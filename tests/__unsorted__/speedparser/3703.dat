<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/rss2full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><rss xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0" version="2.0">

<channel>
	<title>un-excogitate.org</title>
	
	<link>http://un-excogitate.org</link>
	<description>what was I thinking? (Christian Frichot's ad-lib on security and what-not)</description>
	<lastBuildDate>Sun, 07 Aug 2011 09:14:55 +0000</lastBuildDate>
	<language>en</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>http://wordpress.org/?v=3.2.1</generator>
		<atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/rss+xml" href="http://feeds.feedburner.com/Un-excogitateorg" /><feedburner:info uri="un-excogitateorg" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><item>
		<title>Security Tools – Don’t re-invent the wheel when there’s a whole car available</title>
		<link>http://feedproxy.google.com/~r/Un-excogitateorg/~3/XFMfZy57cD0/</link>
		<comments>http://un-excogitate.org/archives/2011/08/07/security-tools-dont-re-invent-the-wheel-when-theres-a-whole-car-available/#comments</comments>
		<pubDate>Sun, 07 Aug 2011 09:14:55 +0000</pubDate>
		<dc:creator>Christian</dc:creator>
				<category><![CDATA[Computers]]></category>
		<category><![CDATA[Security]]></category>
		<category><![CDATA[Web Development]]></category>
		<category><![CDATA[beef]]></category>
		<category><![CDATA[browser]]></category>
		<category><![CDATA[development]]></category>
		<category><![CDATA[Internet]]></category>
		<category><![CDATA[metasploit]]></category>
		<category><![CDATA[tool]]></category>
		<category><![CDATA[web application]]></category>

		<guid isPermaLink="false">http://un-excogitate.org/?p=716</guid>
		<description><![CDATA[One of the biggest issues I had with BeEF when I started contributing to the project was the administrative interface. Primarily this was due to being absolutely spoilt by Metasploit&#8217;s &#8220;msfconsole&#8221; interface, it just felt so natural to run everything from the command line, it made it trivial to ssh into EC2 instances running MSF, [...]]]></description>
			<content:encoded><![CDATA[<p>One of the biggest issues I had with <a href="http://www.beefproject.com">BeEF</a> when I started contributing to the project was the administrative interface. Primarily this was due to being absolutely spoilt by <a href="http://www.metasploit.com">Metasploit&#8217;s</a> &#8220;msfconsole&#8221; interface, it just felt so natural to run everything from the command line, it made it trivial to ssh into EC2 instances running MSF, or even just locally, it didn&#8217;t matter, the &#8220;show&#8221; command making it so easy to iterate through a fairly complex hierarchy of information.</p>
<p>So I took some time out to try and figure out how we could implement another UI for BeEF, and naturally I started to look into how MSF did it, and then I came across their fantastic <a href="http://dev.metasploit.com/redmine/projects/framework/wiki/DeveloperGuide#Chapter-02-Rex">Rex Library</a>, now packaged as a gem for easy distribution and installation over here: <a href="https://github.com/hammackj/rex">https://github.com/hammackj/rex</a>. (Cheers <a href="http://twitter.com/hammackj">@hammackj</a>). Now, at this point the <a href="http://code.google.com/p/beef/source/browse/#svn%2Fbranches%2Fconsole">console interface</a> for BeEF is still non-trunk material, and it&#8217;s more of a remote-control interface, i.e. talking via the admin JSON interface that exists within the &#8220;Admin&#8221; BeEF extension.</p>
<p>It was through this process that I really came to appreciate the awesome work the Metasploit team had done in the construction of Rex, I mean immediately just by performing a quick &#8220;# gem install librex&#8221; and then including a &#8220;require &#8216;rex&#8217;&#8221; into your code you have access to an incredibly powerful console based interface with tab completion, multiple level stacks (think beef > zombie > command), a job management system, and this is just the stuff the BeEF console&#8217;s using. Lets not forget logging, encoding, sockets and much much more.</p>
<p>If you&#8217;re building any security tools in ruby, nay, any tool in ruby that requires this sort of interface (and lets not forget how extensive msf is, so sure you can use Rex to drive a web-ui, console, cli, whatever) I think you&#8217;d have a hard time trying to find anything as effective and full-featured as Rex. In addition you&#8217;ll find that new features come out quite consistently too, like their <a href="https://community.rapid7.com/community/metasploit/blog/2011/07/08/jsobfu">JS obfuscator</a>.</p>
<p>By separating the remote control library from the Rex console driver UI, I was then also able to drop the exact same remote control library into the recently announced MSF BeEF Plugin (early version available <a href="http://code.google.com/p/beef/source/browse/#svn%2Fbranches%2Fbeefmsfplugin">here</a>).</p>
<p>You can see the console in action here (the current version in the trunk has been updated though, so it&#8217;s a lot neater than this):<br />
<iframe width="640" height="510" src="http://www.youtube-nocookie.com/embed/NjHyLwNp5eU?rel=0&amp;hd=1" frameborder="0" allowfullscreen></iframe></p>
<p>And the MSF BeEF Plugin here:<br />
<iframe width="640" height="510" src="http://www.youtube-nocookie.com/embed/al0veZ2950M?rel=0&amp;hd=1" frameborder="0" allowfullscreen></iframe></p>
<img src="http://feeds.feedburner.com/~r/Un-excogitateorg/~4/XFMfZy57cD0" height="1" width="1"/>]]></content:encoded>
			<wfw:commentRss>http://un-excogitate.org/archives/2011/08/07/security-tools-dont-re-invent-the-wheel-when-theres-a-whole-car-available/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		<feedburner:origLink>http://un-excogitate.org/archives/2011/08/07/security-tools-dont-re-invent-the-wheel-when-theres-a-whole-car-available/</feedburner:origLink></item>
		<item>
		<title>Project Oedipus</title>
		<link>http://feedproxy.google.com/~r/Un-excogitateorg/~3/XvEhREqQ0FI/</link>
		<comments>http://un-excogitate.org/archives/2011/07/22/project-oedipus/#comments</comments>
		<pubDate>Fri, 22 Jul 2011 09:46:20 +0000</pubDate>
		<dc:creator>Christian</dc:creator>
				<category><![CDATA[Computers]]></category>
		<category><![CDATA[Security]]></category>
		<category><![CDATA[Web Development]]></category>
		<category><![CDATA[beef]]></category>
		<category><![CDATA[burp]]></category>
		<category><![CDATA[cloud]]></category>
		<category><![CDATA[owasp]]></category>
		<category><![CDATA[presentation]]></category>

		<guid isPermaLink="false">http://un-excogitate.org/?p=709</guid>
		<description><![CDATA[or &#8220;Leveraging the Cloud to Pwn your Mum&#8221;. .. (Cheers to @irldexter for the name idea) I was fortunate to get a DM the other day from @Kimono asking if I&#8217;d want to do a lightening talk at the Perth CloudCamp today. I immediately got excited about the opportunity to talk about something that I&#8217;ve [...]]]></description>
			<content:encoded><![CDATA[<p>or &#8220;Leveraging the Cloud to Pwn your Mum&#8221;. .. (Cheers to <a href="http://twitter.com/irldexter">@irldexter</a> for the name idea)</p>
<p>I was fortunate to get a DM the other day from <a href="http://twitter.com/kimono">@Kimono</a> asking if I&#8217;d want to do a lightening talk at the <a href="http://www.cloudcamp.org/perth/2011-07-22">Perth CloudCamp</a> today. I immediately got excited about the opportunity to talk about something that I&#8217;ve certainly been experimenting with over the past few months, and it&#8217;s pretty trivial stuff if you think about it, and fairly common if you&#8217;re keeping abreast of current trends in web pen testing. Why run your applications locally, over your local connection, if you can run it from the Internet.</p>
<p>This is certainly an idea we&#8217;ve been playing with at <a href="http://beefproject.com">BeEF</a> (BeEF-cloud &#8211; pre-canned AMI images for Amazon&#8217;s EC2), and something that Dinis Cruz just talked about if you&#8217;re interested in running up <a href="http://o2platform.wordpress.com/2011/07/18/o2-platform-amazon-ec2-image-ami/">O2 in Amazon</a>. And why stop there? There&#8217;s great benefits from running your <a href="http://www.social-engineer.org/framework/Computer_Based_Social_Engineering_Tools:_Social_Engineer_Toolkit_(SET)">SET</a> and <a href="http://metasploit.com/">Metasploit</a> from Amazon&#8217;s environment too!</p>
<p>Having only 10 minutes was fairly limiting, and not really knowing the audience didn&#8217;t help, but I aimed to try and provide a really high level overview of the <a href="https://www.owasp.org/index.php/OWASP_Testing_Project">OWASP Testing Guide</a> and how tools traditionally designed to run locally can leverage Amazon&#8217;s EC2 environment quite well too.</p>
<p>You can see the slidedeck here (I would recommend opening up the &#8220;Show Speaker Notes&#8221;): <a href="https://docs.google.com/present/view?id=ddwsqr7c_63c3phb7gn">https://docs.google.com/present/view?id=ddwsqr7c_63c3phb7gn</a></p>
<p>Oh, and PS: I&#8217;m not strictly tied to the term &#8220;Cloud&#8221;, but I do really enjoy Amazon&#8217;s AWS and EC2 services :)</p>
<img src="http://feeds.feedburner.com/~r/Un-excogitateorg/~4/XvEhREqQ0FI" height="1" width="1"/>]]></content:encoded>
			<wfw:commentRss>http://un-excogitate.org/archives/2011/07/22/project-oedipus/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		<feedburner:origLink>http://un-excogitate.org/archives/2011/07/22/project-oedipus/</feedburner:origLink></item>
		<item>
		<title>Burpdot: Now with Web UI</title>
		<link>http://feedproxy.google.com/~r/Un-excogitateorg/~3/FrRfbvH2CoI/</link>
		<comments>http://un-excogitate.org/archives/2011/06/07/burpdot-now-with-web-ui/#comments</comments>
		<pubDate>Tue, 07 Jun 2011 14:35:12 +0000</pubDate>
		<dc:creator>Christian</dc:creator>
				<category><![CDATA[Security]]></category>
		<category><![CDATA[Web Development]]></category>
		<category><![CDATA[browser]]></category>
		<category><![CDATA[burp]]></category>
		<category><![CDATA[burpdot]]></category>
		<category><![CDATA[development]]></category>
		<category><![CDATA[security assessment]]></category>
		<category><![CDATA[visualisation]]></category>
		<category><![CDATA[web application]]></category>

		<guid isPermaLink="false">http://un-excogitate.org/?p=704</guid>
		<description><![CDATA[*Phew*, burpdot is now up to version 0.5. I can&#8217;t really explain the relief I feel at getting this version out. Ever since David planted the idea of visualising Burp log files showing how URLs refer to one another he was always going on about &#8220;Hey, jQuery is easy right? Sure! You can build up [...]]]></description>
			<content:encoded><![CDATA[<p>*Phew*, <a href="https://github.com/xntrik/burpdot">burpdot</a> is now up to version 0.5. I can&#8217;t really explain the relief I feel at getting this version out. Ever since David planted the idea of visualising <a href="http://portswigger.net/">Burp</a> log files showing how URLs refer to one another he was always going on about &#8220;Hey, jQuery is easy right? Sure! You can build up a web interface right? That&#8217;ll only take you a couple of days?&#8221;. Well according to the <a href="https://github.com/xntrik/burpdot/network">network graph</a> I&#8217;ve been making tiny commits to the work in progress branch for the past 2 months, only now have I merged it back in and voila.</p>
<p>The existing command line functionality should be exactly the same, but, if you set up your environment according to the <a href="https://github.com/xntrik/burpdot/blob/master/README.rdoc">documented dependancies</a> then you should be able to simply run &#8220;./burpweb.rb&#8221; and open up http://localhost:8015.</p>
<p>Less words, more shows:<br />
<object width="640" height="510"><param name="movie" value="http://www.youtube-nocookie.com/v/rrBnAWE2fuw?version=3&amp;hl=en_US&amp;rel=0&amp;hd=1"></param><param name="allowFullScreen" value="true"></param><param name="allowscriptaccess" value="always"></param><embed src="http://www.youtube-nocookie.com/v/rrBnAWE2fuw?version=3&amp;hl=en_US&amp;rel=0&amp;hd=1" type="application/x-shockwave-flash" width="640" height="510" allowscriptaccess="always" allowfullscreen="true"></embed></object></p>
<img src="http://feeds.feedburner.com/~r/Un-excogitateorg/~4/FrRfbvH2CoI" height="1" width="1"/>]]></content:encoded>
			<wfw:commentRss>http://un-excogitate.org/archives/2011/06/07/burpdot-now-with-web-ui/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		<feedburner:origLink>http://un-excogitate.org/archives/2011/06/07/burpdot-now-with-web-ui/</feedburner:origLink></item>
		<item>
		<title>Burpdot: Playing with Depth and Optimising Graphviz</title>
		<link>http://feedproxy.google.com/~r/Un-excogitateorg/~3/gPyoeyBcOsA/</link>
		<comments>http://un-excogitate.org/archives/2011/04/08/burpdot-playing-with-depth-and-optimising-graphviz/#comments</comments>
		<pubDate>Fri, 08 Apr 2011 11:28:20 +0000</pubDate>
		<dc:creator>Christian</dc:creator>
				<category><![CDATA[Security]]></category>
		<category><![CDATA[Web Development]]></category>
		<category><![CDATA[browser]]></category>
		<category><![CDATA[burp]]></category>
		<category><![CDATA[burpdot]]></category>
		<category><![CDATA[development]]></category>
		<category><![CDATA[security assessment]]></category>
		<category><![CDATA[visualisation]]></category>
		<category><![CDATA[web application]]></category>

		<guid isPermaLink="false">http://un-excogitate.org/?p=699</guid>
		<description><![CDATA[Burpdot is now up to version 0.4, it&#8217;s starting to shape up into something a little bigger than first imagined, which I guess is the way with these things. But first lets cover the simple stuff, as of 0.4, burpdot now has a new mode to output into a SQLite database file. At the moment, [...]]]></description>
			<content:encoded><![CDATA[<p><a href="https://github.com/xntrik/burpdot">Burpdot</a> is now up to version 0.4, it&#8217;s starting to shape up into something a little bigger than first imagined, which I guess is the way with these things. But first lets cover the simple stuff, as of 0.4, burpdot now has a new mode to output into a SQLite database file. At the moment, there&#8217;s not much point in this functionality, but new versions will use it &#8211; but lets leave that for another post. Example:</p>
<p><code># ./burpdot.rb -i burp.log -m sqlite -o burp.db</code></p>
<p>Excitement!</p>
<p>Okay, not really. Anyway, before getting onto the depth option I&#8217;ll have to admit, I don&#8217;t really know much about using Graphviz. So, after a little <a href="http://www.graphviz.org/doc/info/attrs.html">reading</a> I figured out a couple of over-rides that really help with burpdot (via <a href="http://afterglow.sourceforge.net/">Afterglow</a>) generated graphs, the normalize option, the splines option, and using vpsc for overlay prevention instead of ortho. You can see these generated below.</p>
<p>The concept of depth is really simple, set to 1 and burpdot only extracts the domain portion of the URI, set to 2, and you get the domain and the path, set to 3 you get the domain, path and query string. By default depth is set to 2, so you get graphs as generated in previous versions. Examples:</p>
<p><code># ./burpdot.rb -i burp.log -m csv <strong>-d 1</strong> | ./afterglow.pl -t -c burp.properties | neato -v -Tpng -Gnormalize=true -Gsplines=true -Goverlap=vpsc -o burp-depth-1.png</code></p>
<p><a href="http://un-excogitate.org/uploads/burp-d1.png"><img src="http://un-excogitate.org/uploads/burp-d1-small.jpg" alt="" title="burp-d1-small" width="378" height="338" class="alignnone size-full wp-image-692" /></a></p>
<p><code># ./burpdot.rb -i burp.log -m csv <strong>-d 2</strong> | ./afterglow.pl -t -c burp.properties | neato -v -Tpng -Gnormalize=true -Gsplines=true -Goverlap=vpsc -o burp-depth-2.png</code></p>
<p><a href="http://un-excogitate.org/uploads/burp-d2.png"><img src="http://un-excogitate.org/uploads/burp-d2-small.jpg" alt="" title="burp-d2-small" width="350" height="515" class="alignnone size-full wp-image-694" /></a></p>
<p><code># ./burpdot.rb -i burp.log -m csv <strong>-d 3</strong> | ./afterglow.pl -t -c burp.properties | neato -v -Tpng -Gnormalize=true -Gsplines=true -Goverlap=vpsc -o burp-depth-3.png</code></p>
<p><a href="http://un-excogitate.org/uploads/burp-d3.png"><img src="http://un-excogitate.org/uploads/burp-d3-small.jpg" alt="" title="burp-d3-small" width="279" height="616" class="alignnone size-full wp-image-696" /></a></p>
<img src="http://feeds.feedburner.com/~r/Un-excogitateorg/~4/gPyoeyBcOsA" height="1" width="1"/>]]></content:encoded>
			<wfw:commentRss>http://un-excogitate.org/archives/2011/04/08/burpdot-playing-with-depth-and-optimising-graphviz/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		<feedburner:origLink>http://un-excogitate.org/archives/2011/04/08/burpdot-playing-with-depth-and-optimising-graphviz/</feedburner:origLink></item>
		<item>
		<title>Burpdot: Now with CSV support to play nice with Afterglow</title>
		<link>http://feedproxy.google.com/~r/Un-excogitateorg/~3/8IHAVH1Lxq4/</link>
		<comments>http://un-excogitate.org/archives/2011/03/29/burpdot-now-with-csv-support-to-play-nice-with-afterglow/#comments</comments>
		<pubDate>Tue, 29 Mar 2011 13:41:31 +0000</pubDate>
		<dc:creator>Christian</dc:creator>
				<category><![CDATA[Security]]></category>
		<category><![CDATA[Web Development]]></category>
		<category><![CDATA[browser]]></category>
		<category><![CDATA[burp]]></category>
		<category><![CDATA[burpdot]]></category>
		<category><![CDATA[development]]></category>
		<category><![CDATA[security assessment]]></category>
		<category><![CDATA[visualisation]]></category>
		<category><![CDATA[web application]]></category>

		<guid isPermaLink="false">http://un-excogitate.org/?p=678</guid>
		<description><![CDATA[It wasn&#8217;t until after I&#8217;d pushed the 0.1 version of burpdot up to git when I remembered secviz.org. If you haven&#8217;t checked it out you certainly should, it&#8217;s a great portal for people to share visualisations of log analysis/mining, in particular those related to security. I pinged Raffy, who maintains the site, on twitter, and [...]]]></description>
			<content:encoded><![CDATA[<p>It wasn&#8217;t until after I&#8217;d pushed the 0.1 version of burpdot up to <a href="https://github.com/xntrik/burpdot">git</a> when I remembered <a href="http://secviz.org/">secviz.org</a>. If you haven&#8217;t checked it out you certainly should, it&#8217;s a great portal for people to share visualisations of log analysis/mining, in particular those related to security. I pinged Raffy, who maintains the site, on twitter, and he reminded me of <a href="http://afterglow.sourceforge.net/">Afterglow</a>, a perl tool that he maintains  which facilitates the process of generating graphs. The power of Afterglow comes from it&#8217;s powerful color properties file and plethora of options. So it made perfect sense for burpdot to be modified to output simple CSV files, which could then be consumed and processed with Afterglow.</p>
<p>A simple example:<br />
<code># ./burpdot.rb -i burplogfile.log -m csv | ./afterglow.pl -t -c burp.properties | neato -v -Tpng -Goverlap=orthoyx -o burp.png</code></p>
<p>Which generates:<br />
<a href="http://un-excogitate.org/uploads/burpag.svg"><img src="http://un-excogitate.org/uploads/burpag.jpg" alt="Burp PNG" title="burpag" width="445" height="402" class="alignnone size-full wp-image-680" /></a></p>
<p>You can grab Afterglow from: <a href="http://afterglow.sourceforge.net/">http://afterglow.sourceforge.net/</a> and the updated burpdot from: <a href="https://github.com/xntrik/burpdot">https://github.com/xntrik/burpdot</a>.</p>
<p>Update: Forgot to give epic big ups to Dave who helped get the label wrapping Perl Fu working in the burp.properties file!</p>
<img src="http://feeds.feedburner.com/~r/Un-excogitateorg/~4/8IHAVH1Lxq4" height="1" width="1"/>]]></content:encoded>
			<wfw:commentRss>http://un-excogitate.org/archives/2011/03/29/burpdot-now-with-csv-support-to-play-nice-with-afterglow/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		<feedburner:origLink>http://un-excogitate.org/archives/2011/03/29/burpdot-now-with-csv-support-to-play-nice-with-afterglow/</feedburner:origLink></item>
	</channel>
</rss><!-- Dynamic Page Served (once) in 0.332 seconds --><!-- Cached page served by WP-Cache -->
