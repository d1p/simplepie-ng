<?xml version="1.0" encoding="utf-8" ?>
<rss version="2.0"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xml:lang="ja">
	<channel>
		<title>ShobonEngineの日記</title>
		<link>http://d.hatena.ne.jp/shobonengine/</link>
		<description>ShobonEngineの日記</description>
		<dc:creator>shobonengine</dc:creator>


		<item>
			<title>[Closure Library]DragListGroup のドラッグ &amp; ドロップ・イベントを監視する</title>
			<link>http://d.hatena.ne.jp/shobonengine/20111003/1317584827</link>

			<description><![CDATA[
		<div class="section">
			<p><a href="http://closure-library.googlecode.com/svn/docs/class_goog_fx_DragListGroup.html" target="_blank">goog.fx.DragListGroup</a> は <span style="font-style:italic;" class="deco">dragListElement</span> として追加したノードに含まれる DOM 要素群を、<span style="color:#0000FF;" class="deco">ドラッグアンドドロップで位置交換</span>できるようにするクラスです。</p>
			<p><span style="font-weight:bold;" class="deco">DragListGroup</span> で発生した<span style="font-weight:bold;" class="deco">ドラッグ・イベント</span>は、<a href="http://closure-library.googlecode.com/svn/docs/closure_goog_fx_draglistgroup.js.source.html" target="_blank">draglistgroup.js</a> の <span style="font-weight:bold;" class="deco"><a href="http://closure-library.googlecode.com/svn/docs/closure_goog_fx_draglistgroup.js.source.html#line136" target="_blank">goog.fx.DragListGroup.EventType</a></span> に定義されているイベントタイプを <span style="font-weight:bold;" class="deco">listen</span> することでキャッチすることができます。</p>
<pre class="syntax-highlight">
<span class="synComment">// イベントタイプ</span>
goog.fx.DragListGroup.EventType = <span class="synIdentifier">{</span>
  BEFOREDRAGSTART: <span class="synConstant">'beforedragstart'</span>,
  DRAGSTART: <span class="synConstant">'dragstart'</span>,
  BEFOREDRAGMOVE: <span class="synConstant">'beforedragmove'</span>,
  DRAGMOVE: <span class="synConstant">'dragmove'</span>,
  BEFOREDRAGEND: <span class="synConstant">'beforedragend'</span>,
  DRAGEND: <span class="synConstant">'dragend'</span>
<span class="synIdentifier">}</span>;
</pre>

			<br>

			<p>以下に <span style="font-weight:bold;" class="deco">DragListGroup</span> のイベント監視例を示します。</p>
<pre class="syntax-highlight">

<span class="synIdentifier">&#60;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&#34;content&#34;</span><span class="synIdentifier">&#62;</span>
    <span class="synIdentifier">&#60;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&#34;item&#34;</span><span class="synIdentifier">&#62;</span>1<span class="synIdentifier">&#60;/</span><span class="synStatement">div</span><span class="synIdentifier">&#62;</span>
    <span class="synIdentifier">&#60;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&#34;item&#34;</span><span class="synIdentifier">&#62;</span>2<span class="synIdentifier">&#60;/</span><span class="synStatement">div</span><span class="synIdentifier">&#62;</span>
    <span class="synIdentifier">&#60;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&#34;item&#34;</span><span class="synIdentifier">&#62;</span>3<span class="synIdentifier">&#60;/</span><span class="synStatement">div</span><span class="synIdentifier">&#62;</span>
<span class="synIdentifier">&#60;/</span><span class="synStatement">div</span><span class="synIdentifier">&#62;</span>
</pre>

<pre class="syntax-highlight">
goog.require(<span class="synConstant">'goog.fx.DragListGroup'</span>);
goog.require(<span class="synConstant">'goog.events'</span>);
goog.require(<span class="synConstant">'goog.dom'</span>);

<span class="synIdentifier">var</span> $ = goog.dom.getElement;

<span class="synComment">// Set up a DragListGroup</span>
<span class="synIdentifier">var</span> dlg = <span class="synStatement">new</span> goog.fx.DragListGroup();
dlg.setDragItemHoverClass(<span class="synConstant">'cursor_move'</span>);  <span class="synComment">// ホバー時に追加するクラス</span>
dlg.setDraggerElClass(<span class="synConstant">'cursor_move opacity_40'</span>);  <span class="synComment">// ドラッグ時に追加するクラス</span>
dlg.addDragList($(<span class="synConstant">'content'</span>), goog.fx.DragListDirection.DOWN);  <span class="synComment">// dragListElement と方向</span>
dlg.init();  <span class="synComment">// 初期化</span>

<span class="synComment">// イベント監視登録</span>
<span class="synComment">// Before drag start</span>
goog.events.listen(dlg, 
                   goog.fx.DragListGroup.EventType.BEFOREDRAGSTART, 
                   <span class="synIdentifier">function</span> (e) <span class="synIdentifier">{</span>
                       console.log(<span class="synConstant">'Before drag start'</span>);
                       <span class="synComment">// </span>
                       <span class="synComment">// 'return false;' で一連のドラッグ処理をキャンセルできる</span>
                       <span class="synComment">// </span>
                   <span class="synIdentifier">}</span>);
<span class="synComment">// Drag start</span>
goog.events.listen(dlg, 
                   goog.fx.DragListGroup.EventType.DRAGSTART, 
                   <span class="synIdentifier">function</span> (e) <span class="synIdentifier">{</span>
                       console.log(<span class="synConstant">'Drag start'</span>);
                   <span class="synIdentifier">}</span>);
<span class="synComment">// Before drag move</span>
goog.events.listen(dlg, 
                   goog.fx.DragListGroup.EventType.BEFOREDRAGMOVE, 
                   <span class="synIdentifier">function</span> (e) <span class="synIdentifier">{</span>
                       console.log(<span class="synConstant">'Before drag move'</span>);
                   <span class="synIdentifier">}</span>);
<span class="synComment">// Drag move</span>
goog.events.listen(dlg, 
                   goog.fx.DragListGroup.EventType.DRAGMOVE, 
                   <span class="synIdentifier">function</span> (e) <span class="synIdentifier">{</span>
                       console.log(<span class="synConstant">'Drag move'</span>);
                   <span class="synIdentifier">}</span>);
<span class="synComment">// Before drag end</span>
goog.events.listen(dlg, 
                   goog.fx.DragListGroup.EventType.BEFOREDRAGEND, 
                   <span class="synIdentifier">function</span> (e) <span class="synIdentifier">{</span>
                       console.log(<span class="synConstant">'Before drag end'</span>);
                   <span class="synIdentifier">}</span>);
<span class="synComment">// Drag end</span>
goog.events.listen(dlg, 
                   goog.fx.DragListGroup.EventType.DRAGEND, 
                   <span class="synIdentifier">function</span> (e) <span class="synIdentifier">{</span>
                       console.log(<span class="synConstant">'Drag end'</span>);
                   <span class="synIdentifier">}</span>);
</pre>

			<p>最初は <span style="font-weight:bold;" class="deco">DragListGroup</span> を継承してイベント処理しようとしましたが、ちゃんと EventType が定義されていることが分かりました。</p>
			<div class="hatena-asin-detail">
  <a href="http://www.amazon.co.jp/exec/obidos/ASIN/4844329626/y066-22/"><img src="http://ecx.images-amazon.com/images/I/518QroOmS6L._SL160_.jpg" class="hatena-asin-detail-image" alt="Google API Expertが解説する Closure Libraryプログラミングガイド" title="Google API Expertが解説する Closure Libraryプログラミングガイド"></a>
  <div class="hatena-asin-detail-info">
    <p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4844329626/y066-22/">Google API Expertが解説する Closure Libraryプログラミングガイド</a></p>
    <ul>
      
      <li><span class="hatena-asin-detail-label">作者:</span> <a href="http://d.hatena.ne.jp/keyword/%B0%CB%C6%A3%C0%E9%B8%F7" class="keyword">伊藤千光</a></li>
      
      <li><span class="hatena-asin-detail-label">出版社/メーカー:</span> <a href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%D7%A5%EC%A5%B9%A5%B8%A5%E3%A5%D1%A5%F3" class="keyword">インプレスジャパン</a></li>
      
      <li><span class="hatena-asin-detail-label">発売日:</span> 2010/12/10</li>
                                                      <li><span class="hatena-asin-detail-label">メディア:</span> 単行本（ソフトカバー）</li>
      <li><span class="hatena-asin-detail-label">購入</span>: 4人 <span class="hatena-asin-detail-label">クリック</span>: 159回</li>
      <li><a href="http://d.hatena.ne.jp/asin/4844329626/y066-22" target="_blank">この商品を含むブログ (11件) を見る</a></li>
    </ul>
  </div>
  <div class="hatena-asin-detail-foot"></div>
</div>

		</div>
]]></description>

			<dc:creator>shobonengine</dc:creator>

			<pubDate>Sun, 02 Oct 2011 19:47:07 GMT</pubDate>



			<category>Closure Library</category>


		</item>

		<item>
			<title>[Closure Library]Closure Library で新しいページを開く goog.window</title>
			<link>http://d.hatena.ne.jp/shobonengine/20111002/1317508330</link>

			<description><![CDATA[
		<div class="section">
			<p>API リファレンスからは検索しにくいのですが、<span style="font-weight:bold;" class="deco">Closure Library</span> にはウィンドウ操作のための関数群が <a href="http://code.google.com/p/closure-library/source/browse/trunk/closure/goog/window/window.js?r=727" target="_blank">window.js</a> に定義してあり、<span style="font-style:italic;color:#FF0000;" class="deco">require('goog.window')</span> で利用可能になります。</p>
			<p><span style="color:#FF0000;" class="deco">goog.window</span> には以下の関数が定義されています。</p>
<pre class="syntax-highlight">
goog.require(<span class="synConstant">'goog.window'</span>);

<span class="synComment">// linkRef ページを新しいウィンドウで開く</span>
goog.<span class="synStatement">window</span>.open(linkRef, opt_options, opt_parentWin);
<span class="synComment">// 空白ページを新しいウィンドウで開く</span>
goog.<span class="synStatement">window</span>.openBlank(opt_message, opt_options, opt_parentWin);
<span class="synComment">// ポップアップウィンドウで開く</span>
goog.<span class="synStatement">window</span>.popup(linkRef, opt_options);
</pre>

			<br>

			<p>JavaScript の <span style="color:#0000FF;" class="deco">window.open()</span> 関数に関する説明は<a href="https://developer.mozilla.org/ja/DOM/window.open" target="_blank">こちら</a>。</p>
			<div class="hatena-asin-detail">
  <a href="http://www.amazon.co.jp/exec/obidos/ASIN/477414813X/y066-22/"><img src="http://ecx.images-amazon.com/images/I/51kWsXJ-8dL._SL160_.jpg" class="hatena-asin-detail-image" alt="パーフェクトJavaScript (PERFECT SERIES 4)" title="パーフェクトJavaScript (PERFECT SERIES 4)"></a>
  <div class="hatena-asin-detail-info">
    <p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/477414813X/y066-22/">パーフェクトJavaScript (PERFECT SERIES 4)</a></p>
    <ul>
      
      <li><span class="hatena-asin-detail-label">作者:</span> <a href="http://d.hatena.ne.jp/keyword/%B0%E6%BE%E5%C0%BF%B0%EC%CF%BA" class="keyword">井上誠一郎</a>,<a href="http://d.hatena.ne.jp/keyword/%C5%DA%B9%BE%C2%F3%CF%BA" class="keyword">土江拓郎</a>,<a href="http://d.hatena.ne.jp/keyword/%C9%CD%CA%D5%BE%AD%C2%C0" class="keyword">浜辺将太</a></li>
      
      <li><span class="hatena-asin-detail-label">出版社/メーカー:</span> <a href="http://d.hatena.ne.jp/keyword/%B5%BB%BD%D1%C9%BE%CF%C0%BC%D2" class="keyword">技術評論社</a></li>
      
      <li><span class="hatena-asin-detail-label">発売日:</span> 2011/09/23</li>
                                                      <li><span class="hatena-asin-detail-label">メディア:</span> 大型本</li>
      <li><span class="hatena-asin-detail-label">購入</span>: 1人 <span class="hatena-asin-detail-label">クリック</span>: 177回</li>
      <li><a href="http://d.hatena.ne.jp/asin/477414813X/y066-22" target="_blank">この商品を含むブログ (8件) を見る</a></li>
    </ul>
  </div>
  <div class="hatena-asin-detail-foot"></div>
</div>

		</div>
]]></description>

			<dc:creator>shobonengine</dc:creator>

			<pubDate>Sat, 01 Oct 2011 22:32:10 GMT</pubDate>



			<category>Closure Library</category>


		</item>

		<item>
			<title>[Closure Library]DOM 要素のドラッグ&amp;ドロップには Dragger をイベント登録する</title>
			<link>http://d.hatena.ne.jp/shobonengine/20111001/1317418191</link>

			<description><![CDATA[
		<div class="section">
			<p><span style="font-weight:bold;" class="deco">goog.events.listen()</span> 関数で <span style="color:#0000FF;" class="deco">DOM 要素のドラッグアンドドロップ・イベントを登録</span>したい場合、DOM 要素を <span style="font-weight:bold;" class="deco">goog.fx.Dragger</span> インスタンスとして登録する必要があります。</p>
			<p><span style="font-style:italic;" class="deco"><a href="http://closure-library.googlecode.com/svn/docs/class_goog_fx_Dragger.html" target="_blank">Dragger (Closure Library API Documentation - JavaScript)</a></span></p>
			<p>また、イベントタイプは通常の goog.events.EventType ではなく、<span style="font-weight:bold;" class="deco">goog.fx.Dragger.EventType</span> に定義されているものを用います。</p>
<pre class="syntax-highlight">

<span class="synIdentifier">&#60;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&#34;target&#34;</span><span class="synIdentifier">&#62;&#60;/</span><span class="synStatement">div</span><span class="synIdentifier">&#62;</span>
</pre>

<pre class="syntax-highlight">
goog.require(<span class="synConstant">'goog.dom'</span>);
goog.require(<span class="synConstant">'goog.events'</span>);
goog.require(<span class="synConstant">'goog.fx.Dragger'</span>);

<span class="synIdentifier">var</span> $ = goog.dom.getElement;

<span class="synIdentifier">var</span> element = $(<span class="synConstant">'target'</span>);
<span class="synIdentifier">var</span> dragger = <span class="synStatement">new</span> goog.fx.Dragger(element, element);  <span class="synComment">// Dragging source</span>

<span class="synComment">// Drag-start</span>
goog.events.listen(dragger, 
                   goog.fx.Dragger.EventType.START, 
                   <span class="synIdentifier">function</span>(e) <span class="synIdentifier">{</span>
                   <span class="synIdentifier">}</span>);
<span class="synComment">// Drag-move</span>
goog.events.listen(dragger, 
                   goog.fx.Dragger.EventType.DRAG, 
                   <span class="synIdentifier">function</span>(e) <span class="synIdentifier">{</span>
                   <span class="synIdentifier">}</span>);
<span class="synComment">// Drag-end</span>
goog.events.listen(dragger, 
                   goog.fx.Dragger.EventType.END, 
                   <span class="synIdentifier">function</span>(e) <span class="synIdentifier">{</span>
                   <span class="synIdentifier">}</span>);
</pre>

			<p>ドラッグ・イベントは START &#62; DRAG &#62; END の順に連鎖し、<span style="color:#00AA00;" class="deco">イベントハンドラ関数内で <span style="font-style:italic;" class="deco">return false;</span> することでイベント連鎖を中断</span>することができます。</p>
		</div>
]]></description>

			<dc:creator>shobonengine</dc:creator>

			<pubDate>Fri, 30 Sep 2011 21:29:51 GMT</pubDate>



			<category>Closure Library</category>


		</item>

		<item>
			<title>[Closure Library] $ を使って DOM Element を取得する</title>
			<link>http://d.hatena.ne.jp/shobonengine/20110930/1317312849</link>

			<description><![CDATA[
		<div class="section">
			<p><span style="font-weight:bold;" class="deco">Closure Library</span> では <span style="color:#0000FF;" class="deco">goog.dom.getElement(element)</span> 関数で DOM 要素を取得できますが、頻繁にこの長い名前空間を記述するのは面倒なので、次のように<span style="color:#FF0000;" class="deco">変数 $ に関数オブジェクトを代入</span>する方法があります。</p>
			<br>

<pre class="syntax-highlight">
goog.require(<span class="synConstant">'goog.dom'</span>);

<span class="synIdentifier">var</span> $ = goog.dom.getElement;

<span class="synIdentifier">var</span> main = $(<span class="synConstant">'main'</span>);  <span class="synComment">// #main Element を取得</span>
</pre>

			<br>

			<p><span style="font-weight:bold;" class="deco">jQuery</span> と違い、<span style="color:#FF0000;" class="deco">$('#main') と書かずに $('main') と書く</span>ことに注意します。</p>
			<div class="hatena-asin-detail">
  <a href="http://www.amazon.co.jp/exec/obidos/ASIN/4844329626/y066-22/"><img src="http://ecx.images-amazon.com/images/I/518QroOmS6L._SL160_.jpg" class="hatena-asin-detail-image" alt="Google API Expertが解説する Closure Libraryプログラミングガイド" title="Google API Expertが解説する Closure Libraryプログラミングガイド"></a>
  <div class="hatena-asin-detail-info">
    <p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4844329626/y066-22/">Google API Expertが解説する Closure Libraryプログラミングガイド</a></p>
    <ul>
      
      <li><span class="hatena-asin-detail-label">作者:</span> <a href="http://d.hatena.ne.jp/keyword/%B0%CB%C6%A3%C0%E9%B8%F7" class="keyword">伊藤千光</a></li>
      
      <li><span class="hatena-asin-detail-label">出版社/メーカー:</span> <a href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%D7%A5%EC%A5%B9%A5%B8%A5%E3%A5%D1%A5%F3" class="keyword">インプレスジャパン</a></li>
      
      <li><span class="hatena-asin-detail-label">発売日:</span> 2010/12/10</li>
                                                      <li><span class="hatena-asin-detail-label">メディア:</span> 単行本（ソフトカバー）</li>
      <li><span class="hatena-asin-detail-label">購入</span>: 4人 <span class="hatena-asin-detail-label">クリック</span>: 159回</li>
      <li><a href="http://d.hatena.ne.jp/asin/4844329626/y066-22" target="_blank">この商品を含むブログ (11件) を見る</a></li>
    </ul>
  </div>
  <div class="hatena-asin-detail-foot"></div>
</div>

		</div>
]]></description>

			<dc:creator>shobonengine</dc:creator>

			<pubDate>Thu, 29 Sep 2011 16:14:09 GMT</pubDate>



			<category>Closure Library</category>


		</item>

		<item>
			<title>ローカルストレージのリクエスト容量増加を要求されても Flash Player 設定パネルが操作できない問題を解決する</title>
			<link>http://d.hatena.ne.jp/shobonengine/20110928/1317207522</link>

			<description><![CDATA[
		<div class="section">
			<p>よくあるのが、<span style="font-weight:bold;" class="deco">ニコニコ動画</span>を再生したときに出現する <span style="font-weight:bold;" class="deco">Adobe Flash Player 設定ポップアップパネル</span>。</p>
			<blockquote>
			<p>ローカルストレージ res.nimg.jp はコンピューターに情報を保存する許可を要求しています。</p>
			</blockquote>
			<p>上記のメッセージが以下の画面に表示されるのですが、希に<span style="color:#FF0000;" class="deco">パネルが操作できない</span>問題が発生します。</p>
			<p><center><img alt="flash" src="http://www.macromedia.com/support/documentation/jp/flashplayer/help/images/pop_localstorage.gif"></center></p>
			<br>

			<p>これを解決するためには、まず動画を<span style="font-weight:bold;" class="deco">右クリック</span>して表示される「<span style="font-weight:bold;" class="deco">グローバル設定...</span>」を選択します。</p>
			<p><center><a href="http://f.hatena.ne.jp/shobonengine/20110928193851" class="hatena-fotolife" target="_blank"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/s/shobonengine/20110928/20110928193851.png" alt="f:id:shobonengine:20110928193851p:image" title="f:id:shobonengine:20110928193851p:image" class="hatena-fotolife"></a></center></p>
			<p>OS やブラウザによって異なるのですが、「<span style="font-weight:bold;" class="deco">Flash Player ヘルプ</span>」のページが表示されたら、「<span style="font-weight:bold;" class="deco">設定マネージャー</span>」一覧の「<span style="font-weight:bold;" class="deco">Webサイトの記憶領域設定パネル</span>」を選択します。</p>
			<p><center><a href="http://f.hatena.ne.jp/shobonengine/20110928193852" class="hatena-fotolife" target="_blank"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/s/shobonengine/20110928/20110928193852.png" alt="f:id:shobonengine:20110928193852p:image" title="f:id:shobonengine:20110928193852p:image" class="hatena-fotolife"></a></center></p>
			<p>「<span style="font-weight:bold;" class="deco">Web サイトの記憶領域設定パネル</span>」の「<span style="font-weight:bold;" class="deco">訪問済み Web サイト一覧</span>」から、要求されているドメイン（<span style="font-style:italic;" class="deco">res.nimg.jp</span>）を探し、上限を <span style="font-weight:bold;" class="deco">1 MB</span> くらいに変更します。</p>
			<p>これで動画再生時に設定ポップアップが出現することはなくなります。</p>
		</div>
]]></description>

			<dc:creator>shobonengine</dc:creator>

			<pubDate>Wed, 28 Sep 2011 10:58:42 GMT</pubDate>




		</item>

	</channel>
</rss>
