<?xml version="1.0" encoding="utf-8" ?>
<rss version="2.0"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xml:lang="ja">
	<channel>
		<title>ネリモノ</title>
		<link>http://d.hatena.ne.jp/Malan/</link>
		<description>ネリモノ</description>
		<dc:creator>Malan</dc:creator>


		<item>
			<title>dotcloudに招待されてから実際に動かすまで</title>
			<link>http://d.hatena.ne.jp/Malan/20110508</link>

			<description><![CDATA[
		<div class="section">
			<p>dotcloud流行ってますね。</p>
			<p>僕もinviteきてからしばらく放置していたのでこれを機にflaskアプリでdeployしてみようと思いました。</p>
			<br>

			<blockquote>
			<p>$ pip install dotcloud</p>
			<p>dotcloudをshellから操作するコマンドをインストールします。</p>
			</blockquote>
			<blockquote>
			<p>$ dotcloud</p>
			<p>APIキー <a href="https://www.dotcloud.com/account/settings" target="_blank">https://www.dotcloud.com/account/settings</a></p>
			<p>を入力します。</p>
			</blockquote>
			<blockquote>
			<p>$ dotcloud create testapp</p>
			<p>$ dotcloud deploy -t python testapp.www</p>
			<p>"testapp"というアプリを作成して"www.testapp"にデプロイします。</p>
			</blockquote>
			<br>

			<p>実際にローカルでアプリを作成します。</p>
			<blockquote>
			<p>$ mkdir testapp</p>
			<p>$ cd testapp</p>
			<p>（ここで下記のようなアプリを作成する）</p>
			<p>$ tree</p>
			<p>.</p>
			<p>├── __init__.py</p>
			<p>├── testapp</p>
			<p>│&#160;&#160; ├── admin</p>
			<p>│&#160;&#160; │&#160;&#160; ├── __init__.py</p>
			<p>│&#160;&#160; │&#160;&#160; ├── static</p>
			<p>│&#160;&#160; │&#160;&#160; │&#160;&#160; ├── css</p>
			<p>│&#160;&#160; │&#160;&#160; │&#160;&#160; ├── images</p>
			<p>│&#160;&#160; │&#160;&#160; │&#160;&#160; └── js</p>
			<p>│&#160;&#160; │&#160;&#160; ├── templates</p>
			<p>│&#160;&#160; │&#160;&#160; └── views.py</p>
			<p>│&#160;&#160; └── frontend</p>
			<p>│&#160;&#160;     ├── __init__.py</p>
			<p>│&#160;&#160;     ├── static</p>
			<p>│&#160;&#160;     │&#160;&#160; ├── css</p>
			<p>│&#160;&#160;     │&#160;&#160; ├── images</p>
			<p>│&#160;&#160;     │&#160;&#160; └── js</p>
			<p>│&#160;&#160;     ├── templates</p>
			<p>│&#160;&#160;     └── views.py</p>
			<p>└── wsgi.py</p>
			</blockquote>
			<br>

			<p>nginxで動くようなのでwsgi.pyの中身を書いておきましょう。</p>
			<p>pathなどは適時変更してください。</p>
<pre class="syntax-highlight">
<span class="synPreProc">import</span> sys
sys.path.append('<span class="synConstant">testapp</span>')
<span class="synPreProc">from</span> frontend.views <span class="synPreProc">import</span> app

<span class="synStatement">def</span> <span class="synIdentifier">application</span>(environ, start_response):
  <span class="synStatement">return</span> app(environ, start_response)
</pre>

			<br>

			<p>あとはこのディレクトリの中身をdotcloudにpushすれば動きます。</p>
			<blockquote>
			<p>$ cd testapp</p>
			<p>$ dotcloud push testapp.www .</p>
			</blockquote>
			<br>

			<p><a href="http://www.testapp.dotcloud.com" target="_blank">http://www.testapp.dotcloud.com</a> にアクセスして、先ほど作成したアプリの画面がでれば成功です。</p>
			<p>誰かdotcloudのチュートリアル日本語訳してくれないかなー（チラッチラッ</p>
			<br>

			<p>参考URL</p>

			<ul>
				<li> <a href="http://d.hatena.ne.jp/kuma8/20110507/1304734739" target="_blank">http://d.hatena.ne.jp/kuma8/20110507/1304734739</a></li>
				<li> <a href="http://docs.dotcloud.com/tutorials/" target="_blank">http://docs.dotcloud.com/tutorials/</a></li>
			</ul>
		</div>
]]></description>

			<dc:creator>Malan</dc:creator>

			<pubDate>Sat, 07 May 2011 15:00:00 GMT</pubDate>




		</item>

		<item>
			<title>node.js + express + mongodb + mongoose を試してみた</title>
			<link>http://d.hatena.ne.jp/Malan/20101106/1288972181</link>

			<description><![CDATA[
		<div class="section">
			<p>そんな組み合わせを使う機会に恵まれたのでせっかくだからメモ。</p>
			<p>websocketとかやりたい人はそれようのサンプルがいっぱいあると思うのでそっちを見たほうがいいです。</p>
			<p>mongodb は既にインストールされていることを前提として書きます。</p>
<pre>
# node.js のインストール
$ git clone git://github.com/ry/node.git
$ cd node
$ ./configure
$ make 
$ sudo make install
</pre>
			<p>node.js がインストールできたら、ruby でいうところの gem のような npm をインストールして便利なものを追加していきます。</p>
<pre>
# npm のインストール
$ curl <a href="http://npmjs.org/install.sh" target="_blank">http://npmjs.org/install.sh</a> | sudo sh
# node.js 用フレームワーク express のインストール
$ sudo npm install express
# node.js 用 ORM/ODM mongoose のインストール
$ sudo npm install mongoose
</pre>
			<p>node.js で使える mongodb driver は、 mongoose の他にもいくつかあるようです。</p>
			<p><a href="http://www.mongodb.org/display/DOCS/node.JS" target="_blank">http://www.mongodb.org/display/DOCS/node.JS</a></p>
			<p><br></p>
			<p>モデル定義。</p>
<pre class="syntax-highlight">
<span class="synComment">// user.js</span>
require.paths.unshift(<span class="synConstant">'vendor/mongoose'</span>);
<span class="synIdentifier">var</span> mongoose = require(<span class="synConstant">'mongoose'</span>).Mongoose;
<span class="synIdentifier">var</span> db = mongoose.connect(<span class="synConstant">'mongodb://localhost:27017/test'</span>);
mongoose.model(<span class="synConstant">'user'</span>, <span class="synIdentifier">{</span>
  properties: <span class="synIdentifier">[</span>
    <span class="synConstant">'name'</span>, <span class="synConstant">'age'</span>, <span class="synConstant">'created_at'</span>,
  <span class="synIdentifier">]</span>,
  methods: <span class="synIdentifier">{</span>
    save: <span class="synIdentifier">function</span> (fn) <span class="synIdentifier">{</span>
      <span class="synIdentifier">this</span>.created_at = <span class="synStatement">new</span> <span class="synType">Date</span>();
      <span class="synIdentifier">this</span>.__super__(fn);
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
module.exports = db.model(<span class="synConstant">'user'</span>);
</pre>

			<p><br></p>
			<p>アプリを書きましょう。</p>
			<p>※ /templates とか /static とかはそのうち使うと思うので書いておく。</p>
<pre class="syntax-highlight">
<span class="synComment">// app.js</span>
<span class="synIdentifier">var</span> express = require(<span class="synConstant">'express'</span>);
<span class="synIdentifier">var</span> app = express.createServer();
<span class="synIdentifier">var</span> User = require(<span class="synConstant">'./user'</span>);

app.configure(<span class="synIdentifier">function</span>()<span class="synIdentifier">{</span>
    app.set(<span class="synConstant">'views'</span>, __dirname + <span class="synConstant">'/templates'</span>);
    app.use(express.methodOverride());
    app.use(express.bodyDecoder());
    app.use(app.router);
    app.use(express.staticProvider(__dirname + <span class="synConstant">'/static'</span>));
<span class="synIdentifier">}</span>);

app.configure(<span class="synConstant">'development'</span>, <span class="synIdentifier">function</span>()<span class="synIdentifier">{</span>
    app.use(express.errorHandler(<span class="synIdentifier">{</span> dumpExceptions: <span class="synConstant">true</span>, showStack: <span class="synConstant">true</span> <span class="synIdentifier">}</span>));
<span class="synIdentifier">}</span>);

app.configure(<span class="synConstant">'production'</span>, <span class="synIdentifier">function</span>()<span class="synIdentifier">{</span>
    app.use(express.errorHandler());
<span class="synIdentifier">}</span>);

app.get(<span class="synConstant">'/'</span>, <span class="synIdentifier">function</span>(req, res)<span class="synIdentifier">{</span>
    <span class="synComment">// インスタンス作成</span>
    <span class="synIdentifier">var</span> u = <span class="synStatement">new</span> User();
    <span class="synComment">// データセット</span>
    u.name = <span class="synConstant">'otsune-tan'</span>;
    u.age = <span class="synConstant">'12'</span>;
    <span class="synComment">// 保存　</span>
    u.save();

    <span class="synComment">// 読み出し &#38; ブラウザへデータ送信</span>
    User.find(<span class="synIdentifier">{</span><span class="synConstant">'age'</span>:<span class="synConstant">'12'</span><span class="synIdentifier">}</span>).all(<span class="synIdentifier">function</span>(docs)<span class="synIdentifier">{</span>
      console.log(docs);
      res.send(JSON.stringify(docs)); <span class="synComment">// find().all() の結果を string にして出力してるだけ</span>
    <span class="synIdentifier">}</span>);
<span class="synIdentifier">}</span>);

console.log(<span class="synConstant">'run server. port 8080.'</span>);
app.listen(8080);
</pre>

			<p>ブラウザで <a href="http://localhost:8080/" target="_blank">http://localhost:8080/</a> にアクセスして、mongodb の中身がずらずらーっと出てきたら成功です。</p>
		</div>
]]></description>

			<dc:creator>Malan</dc:creator>

			<pubDate>Fri, 05 Nov 2010 15:49:41 GMT</pubDate>




		</item>

		<item>
			<title>Facebookでテキストをシェアする方法</title>
			<link>http://d.hatena.ne.jp/Malan/20101012</link>

			<description><![CDATA[
		<div class="section">
			<p>Facebookが日本でも波に乗り始めた昨今、皆様いかがお過ごしでしょうか。</p>
			<p>コメントをつけたり、写真やリンクをシェアとかできて楽しいですよね！</p>
			<p><br></p>
			<p>でも、テキストのみの発言を「シェアしたい！」と思ったことはないですか？</p>
			<p>通常は写真やリンクまたはノートなど、ファイルまたはファイルを参照するものだけに「シェア」ボタンが表示されます。</p>
<pre>
友達もっと欲しいお！＞＜
</pre>
			<p>みたいな発言がTLに流れてくると、Twitterをやっている感覚でついついRTしたくなりますよね。</p>
			<p>Facebookならシェアしたくなりますよね。</p>
			<p>でも普通にボタンが表示されないので、方法を探してみました。</p>
			<p><br></p>
			<h4> １．シェアしたい発言のURLをコピーする</h4>
			<p><a href="http://f.hatena.ne.jp/Malan/20101012020436" class="hatena-fotolife" target="_blank"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/M/Malan/20101012/20101012020436.png" alt="f:id:Malan:20101012020436p:image" title="f:id:Malan:20101012020436p:image" class="hatena-fotolife"></a></p>
			<p><br><br></p>
			<h4> ２．自分のTLの発言窓にフォーカスを合わせるとリンクボタンがでてくるのでクリック！</h4>
			<p><a href="http://f.hatena.ne.jp/Malan/20101012020604" class="hatena-fotolife" target="_blank"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/M/Malan/20101012/20101012020604.png" alt="f:id:Malan:20101012020604p:image" title="f:id:Malan:20101012020604p:image" class="hatena-fotolife"></a></p>
			<p><br><br></p>
			<h4> ３．１でコピーしたURLを貼り付けて、「添付」をクリック！</h4>
			<p><a href="http://f.hatena.ne.jp/Malan/20101012020605" class="hatena-fotolife" target="_blank"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/M/Malan/20101012/20101012020605.png" alt="f:id:Malan:20101012020605p:image" title="f:id:Malan:20101012020605p:image" class="hatena-fotolife"></a></p>
			<p><br><br></p>
			<h4> ４．シェアするときにコメントを添えることができるので、あれば入力して「シェア」！</h4>
			<p><a href="http://f.hatena.ne.jp/Malan/20101012020606" class="hatena-fotolife" target="_blank"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/M/Malan/20101012/20101012020606.png" alt="f:id:Malan:20101012020606p:image" title="f:id:Malan:20101012020606p:image" class="hatena-fotolife"></a></p>
			<p><br><br></p>
			<p>※ちなみにこれは複数人によってシェアされているのでわかりづらいかも知れませんが、</p>
<pre>
「自分の名前」さんが「対象の名前」さんの近況をシェアしました。
</pre>
			<p>と表示されていれば成功です！</p>
			<p><br></p>
			<p>僕のIDは <a href="http://www.facebook.com/mshibata" target="_blank">http://www.facebook.com/mshibata</a> です。</p>
			<p>よかったら友達になってください！！！＞＜</p>
			<p>Facebook楽しいお！！！</p>
		</div>
]]></description>

			<dc:creator>Malan</dc:creator>

			<pubDate>Mon, 11 Oct 2010 15:00:00 GMT</pubDate>




		</item>

		<item>
			<title>macports 1.9.1 on SnowLeopard で tk の build に失敗する件</title>
			<link>http://d.hatena.ne.jp/Malan/20100727</link>

			<description><![CDATA[
		<div class="section">
			<p>ticket探したらこんなのがあった。</p>
			<p><a href="https://trac.macports.org/ticket/23481" target="_blank">https://trac.macports.org/ticket/23481</a></p>
			<p><br></p>
			<p>しょうがないから</p>
			<blockquote>
			<p>$ sudo port install tk -quartz</p>
			</blockquote>
			<p>することで無事解決。</p>
			<p><br></p>
			<p><br></p>
			<p>あと移動先のBlogは秋田ので終了しました。</p>
		</div>
]]></description>

			<dc:creator>Malan</dc:creator>

			<pubDate>Mon, 26 Jul 2010 15:00:00 GMT</pubDate>




		</item>

		<item>
			<title>ニコ生アラートAPI for pythonの公開とBlog移動</title>
			<link>http://d.hatena.ne.jp/Malan/20090916</link>

			<description><![CDATA[
		<div class="section">
			<p>しばらく自宅サーバにおいてるwordpressで書く。</p>
			<p><a href="http://blog.mshibata.net/" target="_blank">http://blog.mshibata.net/</a></p>
			<br>

			<p>あとニコ生アラートAPIのpython library作りました。</p>
			<p>ニコ生に対するクエリの結果は基本的にbeautifulsoupで変換してから返します。</p>
			<p>githubで後悔公開してます。</p>
			<p>nicoliveapi-py &#8211; <a href="http://github.com/mshibata/nicoliveapi-py" target="_blank">http://github.com/mshibata/nicoliveapi-py</a></p>
		</div>
]]></description>

			<dc:creator>Malan</dc:creator>

			<pubDate>Tue, 15 Sep 2009 15:00:00 GMT</pubDate>




		</item>

	</channel>
</rss>
