<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
    <title>Hive Solutions - The diary</title>
    <atom:link href="http://blog.hive.pt/rss" rel="self" type="application/rss+xml" />
    <link>http://blog.hive.pt</link>
    <description>Hive Solutions - The diary</description>
    <pubDate>Mon, 03 Oct 2011 14:30:52 +0000</pubDate>
    <generator>http://hive.pt/colony</generator>
    <language>en</language>
        
            <item>
<title>Out there</title>
<link>http://blog.hive.pt/posts/128</link>
<comments>http://blog.hive.pt/posts/128#comments-area</comments>
<pubDate>Thu, 16 Jun 2011 00:00:00 +0000</pubDate>
<dc:creator>lmartinho</dc:creator>

<guid isPermaLink="false">http://blog.hive.pt/posts/128</guid>
<description><![CDATA[]]></description>
<content:encoded><![CDATA[<p>So the <a href="http://getcolony.com/">alpha</a> is out.</p>

<p>Everybody we were showing <a href="http://en.wikipedia.org/wiki/Colony_Framework">Colony</a> to lately was saying we <b>had</b> to release it because people needed to know about that kind of awesomeness. But we are people of work, not of show... So we kept on working, ironing out the wrinkles and such.</p>

<p>We even started working on documentation and, again, people who looked at it were asking why we didn't have it online. So things added up, we polished a bit more, and felt it was as good a time as any to put something <b>out there</b>.</p>

<p>We didn't pimp it much, <a href="http://www.dzone.com/links/colony_an_upcoming_opensource_modularity_framewor.html">just</a> <a href="http://blog.luismartinho.com/beautiful-software-colony-framework">some</a> <a href="http://www.reddit.com/r/Python/comments/hcvmy/colony_framework_an_upcoming_opensource/">places</a> where like-minded individuals hang out. We got some mixed feedback between people amazed at the amount of work we had put into this thing, while staying under the radar, and others having a hard time understanding what it was good for.
But, most interestingly, we found some people that actually felt the kind of pains Colony was intended to ease. And they wanted to know more.

<p>We got several requests for a <a href="http://groups.google.com/group/colony-users">forum</a> for users to exchange experiences using the technology, and we got a tip about creating the <a href="irc://irc.freenode.net/colonyframework">#colonyframework</a> IRC channel to help connect even better with the audience.</p>

<p>And so here we are. We have something that you can already start calling <a href="http://getcolony.com/docs/colony/">documentation</a> to. You can also check out our <a href="http://hivesolutions.dyndns.org/integration_public/LATEST_SUCCESS/">daily builds</a>. To get an insider perspective on the project consider joining the <a href="http://groups.google.com/group/colony-users">Colony Users</a> mailing list.</p>

<p>Let me know what you think in the comments.</p>
]]></content:encoded>
</item>

        
            <item>
<title>Where the #&amp;%$ is Colony?</title>
<link>http://blog.hive.pt/posts/117</link>
<comments>http://blog.hive.pt/posts/117#comments-area</comments>
<pubDate>Tue, 25 Jan 2011 00:00:00 +0000</pubDate>
<dc:creator>joamag</dc:creator>

<guid isPermaLink="false">http://blog.hive.pt/posts/117</guid>
<description><![CDATA[]]></description>
<content:encoded><![CDATA[<p>Ok, the prank has gone for too long... the fact is that... Colony doesn't exist, it was all a big hoax.
Ahah got ya! It does exist, but with years passed and no release in sight, people have started to wonder,
and rightly so, what the frack happened to Colony. Questions typically involve one or more of the following frustrations:</p>

<ul>
<li>What the hell is Colony?</li>
<li>Why do I keep hearing about Colony and still can't really understand what it is or where to get it?</li>
<li>Why is www.getcolony.com down?</li>
</ul>

<h3>Are we there yet?</h3>

<p>Well, I can tell you that during this long timespan, few were the days where there wasn't a commit to our 
repository, directly or indirectly related with Colony. So, in fact, Colony is better than ever, and 99%
of the work we do today, is either on: directly improving Colony (through the development of new plugins, 
bug fixes, and miscellaneous code improvements), creating products with Colony, or doing consulting work 
using Colony. In fact, we can't stop Colony from getting better with each passing day, even if we tried.</p>

<p>So why isn't it out yet you may ask? Well... you can say it's out, in fact, from day one, http://svn.hive.pt
has been open to the public and filled with <a href="http://en.wikipedia.org/wiki/GNU_General_Public_License">GPL</a> goodness. 
The bottleneck has always been in making Colony so f-ing simple, that using it for the first time is an enjoyable straightforward experience. That means
quality documentation, useful examples, easy installation and transparent updates, etc.. and we ain't there yet... but we're moving in the right direction.</p>

<h3>Where are we going?</h3>

<p>Documentation has improved quite a lot, both by extending their subject coverage, and by making them more actionable
and straight to the point. Serious work as also been done in creating tasty multimedia content to make the experience of diving into Colony more enjoyable. 
This content is still in the works, but just last month, we leaked one of a series of Colony comics we have created:</p>

<p align="center"><object id="__sse6173439" width="477" height="510"><param name="movie" value="http://static.slidesharecdn.com/swf/doc_player.swf?doc=comicspreview-101215044331-phpapp02&stripped_title=comics-preview&userName=hivesolutions" /><param name="allowFullScreen" value="true"/><param name="allowScriptAccess" value="always"/><embed name="__sse6173439" src="http://static.slidesharecdn.com/swf/doc_player.swf?doc=comicspreview-101215044331-phpapp02&stripped_title=comics-preview&userName=hivesolutions" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="477" height="510"></embed></object></p>

<p>However, the biggest milestone has been getting our <i>Colony Build Automation</i> infrastructure (which is a set
of Colony plugins, as everything else) up and running. Nowadays, we have a server running a Colony instance
that is constantly fetching code from our repository, making sure it passes our validations, and packaging it into various formats.
As an added bonus, everytime someone screws up the build, that person is greeted with a nice unforgiving e-mail:</p>

<p align="center"><img src="http://lh6.ggpht.com/_i4ETC63gPA0/TT7QrBRjieI/AAAAAAAAAC4/fNfz-VZ8ekQ/s800/colony_build.jpg" /></p>

<p>With this automated lifecycle in place, I can now access the Colony instance where the build automation plugins are
running and building Colony (embrace the paradox :P), and through the <i>Colony Web Server</i> (which is also just a bunch of Colony plugins), 
and the <i>HTTP File Handler Plugin</i>, which extends the <i>Colony Web Server</i> and allows me to browse the build server's filesystem with my web browser, I can always access the latest build, in various formats, including fancy "deb" files. Meaning that currently, in Ubuntu for example,
I can just add this web server as a source and am able to use its package manager to easily install Colony.</p>

<p align="center"><img src="http://lh6.ggpht.com/_i4ETC63gPA0/TT7SAheJUoI/AAAAAAAAACo/049U5muJNLc/s640/colony_web_server_integration.png" /></p>

<p>This infrastructure, will in the future, keep delivering you fresh Colony builds, regardless of what operating system you want to deploy Colony on.</p>

<h3>When will we finish?</h3>

<p>I just finished reading one of ultramarathoner <a href="http://en.wikipedia.org/wiki/Dean_Karnazes">Dean Karnazes'</a> books
(I just got a Kindle, and its kickass paper-like display has gotten me addicted to reading again!), where he details the gruesome pain he endured in his insane runs, like running 320km non-stop without sleeping. Heat strokes, muscle damage and severe dehydration aside, 12833 commits and 354.488 lines of code (639.286 with comments) later, getting Colony ready already seems like an ultramarathon, which fortunately seems to be getting nearer and nearer to the finish line. As Dean says, no point in thinking of how long to run, just put one foot in front of the other. This to say, I can't give you a release date, it's ready when it's ready, but it will be worth it!</p>]]></content:encoded>
</item>

        
            <item>
<title>We Ain't Dead Yet! (nor lightly)</title>
<link>http://blog.hive.pt/posts/113</link>
<comments>http://blog.hive.pt/posts/113#comments-area</comments>
<pubDate>Wed, 15 Dec 2010 00:00:00 +0000</pubDate>
<dc:creator>tsilva</dc:creator>

<guid isPermaLink="false">http://blog.hive.pt/posts/113</guid>
<description><![CDATA[]]></description>
<content:encoded><![CDATA[<p>This blog has been gathering dust for quite a long time, but fear not, for these are good news... 
they may not be good news for you blog readers that haven't had a mind-blowing article to read
in a long time (oh, the unhealthy ego :P), but they are great news for us, because we have been very 
busy, which made the blog drop to a lower priority for a while. Busy with what you may ask... I can't tell you... not yet... but I can let you in on some miscellaneous stuff that's been happening at Hive.</p>

<h3>Luigi, Mario, Berlusconi, Panzerini!</h3>

<p>In no particular order of importance, let's start with Panzerini. No, it's not a sandwich, it's a multiplayer artificial intelligence robot battle game.
Where's the money in that, you may ask. It ain't in our pockets that's for sure, but that doesn't mean it wasn't worth it.</p>

<p>Long story short, we went on a roadtrip to Lisbon to participate in <a href="http://codebits.eu/">Sapo Codebits 2010</a> in the 48 hour programming competition.
We needed a nifty Colony demo to use when we officially launch Colony, but we never really had the time to do it, so this seemed like the best opportunity to make
a sprint and create one.</p>

<p>The idea was simple. Create an online arena where people can drop robots developed by themselves and watch them fight against other users' robots.
The whole project was to be developed in Colony from the ground up, robots would be Colony plugins that could be dragged and dropped into the arena, 
which would be a simple HTML5 page (no Flash, no Canvas).</p>

<p>With Colony in hand we went on a road trip to Lisbon to participate in the competition, and arrived at the spot, only to find that there were no places to sit down or electrical outlets to power our laptops.
This was a great opportunity to honour what sometimes appears to be a Portuguese tradition, and just blame the organization and quit the competition... but we were on a mission! We managed to get access 
to a small office, inside a garage, got an unprotected wireless network from some neighbour, and started coding.</p>

<p>Fourty-eight hours later, with very little sleep, and after eating a lot of chicken (it was near, it was cheap, and it was the only available food in that restaurant at that time),
we had a functional version of Panzerini.</p>

<embed type="application/x-shockwave-flash" src="http://picasaweb.google.com/s/c/bin/slideshow.swf" width="600" height="400" flashvars="host=picasaweb.google.com&hl=en_US&feat=flashalbum&RGB=0x000000&feed=http%3A%2F%2Fpicasaweb.google.com%2Fdata%2Ffeed%2Fapi%2Fuser%2F108853654973121647185%2Falbumid%2F5550910878747314193%3Falt%3Drss%26kind%3Dphoto%26hl%3Den_US" pluginspage="http://www.macromedia.com/go/getflashplayer"></embed>

<p>It ended up quite good for the time we invested in it, so we went quite confident for the presentation, only to land on our faces in the end.
Turns out the competition was more of a stand-up comedy show, which was a great lesson for us, to remember to always understand the audience first.
At the end of the day, every successful interaction is an exchange of value, be it in whatever shape of form. Even if you have something great to offer,
it's worthless if it's not valuable to the receiver, and value may take the shape of something as simple as making that person laugh, as was the case of some awarded projects.
Regardless, the first three places or so, went to great projects that truly deserved it, and in the end we walked out with a Colony demo in the bag ;).</p>

<h3>The Hive Crisis Center</h3>

<p>We had a big LCD television stuck in storage for over two years now. We used it in an exposition a long time ago, and never touched it again.
After trying to drill holes in the wall, having to change drill bits, making a mess of the whole office, having to run to the electronics store a couple of times, and having to struggle
with the TV provider's front-line support to make them come and replace a Set Top Box that was stalled for two years and couldn't update itself because the firmware was too old, we managed
to hang the television in one of our walls and turn it into a Corporate TV, with our very own home-brewed company dashboard.</p>

<img src="http://lh5.ggpht.com/_i4ETC63gPA0/TQji_tqybGI/AAAAAAAAABo/1sLmyaiKkVU/s640/dashboard.jpg" />

<p>It is now being used to show statistics about the company, like number of commits, upcoming calendar events, ticket status changes, alert messages for when something bad happens, like one of our servers to stop responding, or simply broadcasting a video for everyone to see.</p>

<img src="http://lh4.ggpht.com/_i4ETC63gPA0/TQji_hYRd6I/AAAAAAAAABk/gkgjocr4EIc/s640/dashboard_screenshot.png" />

<p>Just imagine how cool it is to have a live dashboard with your company's heartbeat, giving you an applause sound as it tells you are currently the top commiter of the day, or that a bug as just been closed, or to hear the sound of a siren as it alerts you that a server is down. At the very least, it makes you feel like you are working at the Pentagon.</p>

<p>For now I can't tell you much more about what's going on, mainly because I also have get some work done today... I'm sorry... but in case you are disappointed with the few revelations I have done in this post, here's some cuteness overload as compensation:</p>

<img src="http://lh4.ggpht.com/_i4ETC63gPA0/TQjjhF0rvbI/AAAAAAAAAB0/YE5f50MDigs/s640/dog.jpg" />

<p>P.S: This is a photo of <a href="http://www.hive.pt/people">Luis Martinho</a>'s dog ;).</p>
]]></content:encoded>
</item>

        
            <item>
<title>Them Internets is Booming!!!</title>
<link>http://blog.hive.pt/posts/106</link>
<comments>http://blog.hive.pt/posts/106#comments-area</comments>
<pubDate>Mon, 26 Jul 2010 00:00:00 +0000</pubDate>
<dc:creator>tsilva</dc:creator>

<guid isPermaLink="false">http://blog.hive.pt/posts/106</guid>
<description><![CDATA[]]></description>
<content:encoded><![CDATA[<p>Pack your bags folks! The world is about to end, the Mayans were off by a year or so, and I don't think even them could foresee our end as "death by IP address shortage" at the time. Why the media hasn't picked up on this one as the soon to be apocalypse yet, is beyond me, but by the end of next year we will be running out of <i>IP addresses</i> to assign to stuff, which is kind of an inconvenience, since following the current trend, even my boxer shorts will be pingable any time soon.</p>

<p>If we do live to tell the tale, and <i>IPv6</i> has indeed saved us all, we will have a gazillion of <i>IP addresses</i> to use, apparently more than enough for all the sensing and computing devices we are decorating our planet with. If you think we are in the era of information overload, you ain't seen nothin' yet. We are about to be sh*tstormed with a tidal wave of information the likes of the world as never seen. <a href="http://www.twitter.com">Twitter</a> has done a marvelous job of flooding our beloved <a href="http://www.gametrailers.com/user-movie/internet-is-a-series-of-tubes/43006">Internets</a> with arguably valuable data, by dumping what's on everyone's mind, however irrelevant, onto the <i>Web</i>. It won't be long before everything is "tweeting" every single piece of relevant and/or irrelevant information to the Internet, from <i>GPS devices</i>, to cell phones, to toasters.</p>

<h3>Web 3.0: Now with 532452% more Data (and peanuts, hopefully...)</h3>

<p>We will have a lot of information on our hands and very little to do with it, or what we will able to do with it, will be with great effort. A paradigm shift is in order, and such is the promise of the <i>Semantic Web</i>, that of switching the Internet from a worldwide file server to a global database.</p>

<p align="center"><object width="400" height="300"><param name="allowfullscreen" value="true" /><param name="allowscriptaccess" value="always" /><param name="movie" value="http://vimeo.com/moogaloop.swf?clip_id=11529540&amp;server=vimeo.com&amp;show_title=1&amp;show_byline=1&amp;show_portrait=0&amp;color=&amp;fullscreen=1" /><embed src="http://vimeo.com/moogaloop.swf?clip_id=11529540&amp;server=vimeo.com&amp;show_title=1&amp;show_byline=1&amp;show_portrait=0&amp;color=&amp;fullscreen=1" type="application/x-shockwave-flash" allowfullscreen="true" allowscriptaccess="always" width="400" height="300"></embed></object></p>

<p>The problem with the <i>Web</i> nowadays, is that it's fine and dandy for retrieving information, but kind of sucks for retrieving knowledge. For example, I like to travel, but the planning and booking I have to do beforehand is always a huge pain (am I not an ungrateful bastard?). What I want is simple: I want to go to one or more locations, in a certain time range, with the cheapest transportation available with the shortest trip time, be accomodated in easily accessible spots, preferably near the center, with best rating for the lowest price. I know what I want, but here's what happens when I type that in <i>Google</i>:</p>

<p align="center"><img src="http://lh6.ggpht.com/_AkPHOXTr2V0/TE39EApUfvI/AAAAAAAADvY/Pj6WbVsnQog/s800/google_query.png" /></p>

<p>What the hell am I supposed to do with these results? Read them, extract the information, cross reference it, apply my constraints mentally and hope to find a match? No friggin' way, I'm too lazy... especially when I know that this is a feasible query, that it's possible to compute my query and get a decent answer, if only data was described in a standard way. I was a <i>Semantic Web</i> atheist, as I always saw the concept as something invented by pot-smoking hippies from academia to keep their paper flow steady... but in May 2009, <a href="http://www.wolframalpha.com/">Wolfram|Alpha</a> opened my eyes.</p>

<h3>Couldn't See the Forest for the Trees...</h3>

<p><a href="http://www.wolframalpha.com/">Wolfram|Alpha</a> is scaringly awesome, you can give it the most insane questions, and it will give you a decent answer most of the time. Like, hey, I wonder where the International Space Station is right now:</p>

<p align="center"><img src="http://lh3.ggpht.com/_AkPHOXTr2V0/TE39EHVJkZI/AAAAAAAADvU/B5QBx-kwvAo/s800/wolfram_alpha.png" /></p>

<p>And the list of cool questions you can ask it just goes on and on:</p>

<ul>
	<li><a href="http://www.wolframalpha.com/input/?i=big+mac+%2B+coke">Big Mac + Coke</a></li>
	<li><a href="http://www.wolframalpha.com/input/?i=What+is+the+average+speed+of+an+unladen+swallow%3F">What is the average speed of an unladen swallow?</a></li>
	<li><a href="http://www.wolframalpha.com/input/?i=What+is+the+weather+for+next+sunday%3F">What is the weather for next sunday?</a></li>
	<li><a href="http://www.wolframalpha.com/input/?i=How+much+wood+would+a+woodchuck+chuck+if+a+woodchuck+could+chuck+wood%3F">How much would would a woodchuck chuck if a woodchuck could chuck wood?</a></li>
	<li><a href="http://www.wolframalpha.com/input/?i=What+was+the+population+of+Portugal+in+1984%3F">What was the population of Portugal in 1984?</a></li>
</ul>

<p><a href="http://www.wolframalpha.com/">Wolfram|Alpha</a> accomplishes this by working on structured data sources, instead of flat pages of unstructured data. This way, it knows what the data is, what it means and what it's associated with, and can therefore cross different data sources to extract new knowledge. Imagine if a similar knowledge engine had access to every single piece of data on the Internet in a structured way. A lot of incredible things would be possible, and one of them, would be to get an answer to my god damn query. What if travel booking was as easy as asking a question like that and clicking the pay button? I stress, that this is more than possible, so there is no reason not to dream that high (or that low...).</p>

<h3>Heigh-ho, Heigh-ho, Semantify the Web we Go, Tralalalala...</h3>

<p>The question is, how to go about making the <i>Web</i> semantic. That's where the going gets tough... In order to annotate data with semantics, <a href="http://www.w3.org">W3C</a> proposes its <a href="http://www.w3.org/RDF">Resource Description Framework (RDF)</a> family of specifications. Basically you're supposed to use these to annotate your data so that it can be understood by computers. For example, if you had a travel agency website, annotating it in such a way, would bring my holy grail backpacking online service one step closer to reality, since its travel plans could be used as a data source. The huge problem is that producing this data is humongously painful, and there's little to gain from it from the point of view of who's annotating the data. Therefore, from my point of view, this bottom-up approach to the <i>Semantic Web</i> is just a fairy tale acid trip.</p>

<p>The solution is cleary top-down, this data has to be at least initially produced by machines, and later fine-tuned by humans. This is the approach used by <a href="http://www.freebase.com">Freebase</a>, an open database of structured information, which was recently acquired by <i>Google</i>. <a href="http://www.freebase.com">Freebase</a> initially harvested its data from unstructured data sources such as <a href="http://www.wikipedia.org">Wikipedia</a>, and now relies on crowdsourcing for collaborative fine-tuning.</p>

<p>So what's my point? I honestly don't know... just want to shout out to my homies that the <i>Semantic Web</i> is "for reals", it's not a pipe dream, and it will come about faster than you expect, just still not sure in what shape or form, but definitely the one that offers the path of least resistance. Which I may speculate to be in the form of a killer <i>Semantic Web Application</i> that leaves huge amounts of open structured data in its trail, like a semantic "googlish" search engine that is incredible enough to break the muscle memory imprinted habit of using <i>Google</i> after every question mark that pops into one's head.</p>]]></content:encoded>
</item>

        
            <item>
<title>Saint John on Rails</title>
<link>http://blog.hive.pt/posts/105</link>
<comments>http://blog.hive.pt/posts/105#comments-area</comments>
<pubDate>Wed, 23 Jun 2010 00:00:00 +0000</pubDate>
<dc:creator>tsilva</dc:creator>

<guid isPermaLink="false">http://blog.hive.pt/posts/105</guid>
<description><![CDATA[]]></description>
<content:encoded><![CDATA[<p>Today is Saint John's day here in Porto, where <a href="http://www.hive.pt">Hive Solutions</a> is headquartered.</p>

<p align="center"><img src="http://lh3.ggpht.com/_AkPHOXTr2V0/TCI68RYjRBI/AAAAAAAADu0/s0f8zX2K-80/s400/800px-Festa_de_Sao_Joao_%28Porto%29.jpg" /></p>

<p>Which means that tonight, thousands of people will hit the streets, in what is probably Europe's liveliest street festival, to bang each other's heads with plastic hammers, eat sardines, and watch fireworks. And I will too, just after I finish this post :). So, on a completely unrelated note, I am going to quickly rant on <i>Ruby on Rails</i>.</p>

<h3>To Rail or not to Rail</h3> 

<p><i>Rails</i> rocks, or so they say. Until now, I knew very little about <i>Ruby on Rails</i>. I knew what it was capable of, what the framework was meant for, who designed it, its as well as their history, their success, and all the associated hype that roams the web (and also knew a little bit of <i>Ruby</i>). Basically, my paradigm was: "For the scenarios it was built for, Rails rocks.".</p>

<p>But now that I have actually implemented some new features for another company's product, which was built on <i>Rails</i>, and had to learn it for real, some of the hype has dissipated, and I was left with reality.</p>

<h3>1 - Ruby is just too awesome</h3> 

<p><i>Ruby</i> is a very liberal language, in the sense that it has some nice features, like everything being an object, which allow people to create delicious syntax sugar at first glance, and cryptic mumbo-jumbo for whoever has to understand the code afterwards. For example, here's a creative way of creating a loop in Ruby:</p>

<p>5.times { print "This is one of the many ways you can loop five times." }</p>

<p>Cool as it may seem (and it is), if possible, I personally don't like having more than one way to do a thing, since I feel that it makes it just too easy for a team to create a messy codebase, in case they haven't agreed on strict code standards beforehand.</p>

<h3>2 - Rails is just too damn helpful</h3> 

<p><i>Rails</i> shortcuts a lot. In its quest for DRYness (Don't Repeat Yourself 'ness), it provides a lot of default behaviour (example: default template routing) which in the beginning provides a developer like myself with a pleasantly paranoid frustration of having things work, but not understanding why, which may be interesting when starting from scratch, but completely sucks when you're building stuff on top of a codebase that isn't yours and you're still not done grasping it completely, as you have <i>Rails</i>' smoke and mirrors making that job harder (this is obviously a very personal rant :P).</p>

<h3>3 - Rails is stateless</h3>

<p>This is one of the reasons I wouldn't trust <i>Rails</i> if I was going to build something big. The need for state, would pop in at one time or another. Just on the top of my head, if I wanted to have a scheduling task, I am not seeing my way out of having to run a <i>cronjob</i>, and getting out of the development stack truly sucks for many reasons, one of them having to do with portability.</p>

<h3>4 - Rails is not modular</h3>

<p>This is the ultimate reason why I won't do anything big in <i>Rails</i>, I am addicted to modularity, so I would use <b>Colony</b> instead. Taking all the advantages that runtime modularity brings out of the equation, just the paradigm that <b>Colony</b> would impose on my development, by forcing me to separate my application's concerns gracefully, would pay off so damn much in the long run, that I wouldn't consider any other option.</p>

<h3>So what?</h3>

<p>My opinion may change, but currently, if I was going to build a small project with very specific requirements, very fast, I would probably use <i>Rails</i>, and if I was doing something big, I would use <b>Colony</b>. Anyway, I don't see a reason why <b>Colony</b> won't be able to beat <i>Rails</i> in this regard as well in the nearby future :).</p>
]]></content:encoded>
</item>

        
            <item>
<title>7 Things You Must Know About Microformats Before You Die</title>
<link>http://blog.hive.pt/posts/104</link>
<comments>http://blog.hive.pt/posts/104#comments-area</comments>
<pubDate>Wed, 09 Jun 2010 00:00:00 +0000</pubDate>
<dc:creator>tsilva</dc:creator>

<guid isPermaLink="false">http://blog.hive.pt/posts/104</guid>
<description><![CDATA[]]></description>
<content:encoded><![CDATA[<p>Notice the catchy title? It's called copywriting, and I am not very good at it, but I'm trying. In the last posts I was pretty thorough with my writing, but this time I will try to keep it short and sweet, so you still have time to watch <a href="http://www.youtube.com/watch?v=HPPj6viIBmU">Star Wars Kid</a> and <a href="http://www.youtube.com/watch?v=EwTZ2xpQwpA">Chocolate Rain</a> on <i>YouTube</i> like the rest of us. So here's a pre-washed, pre-cooked, pre-heated, pre-screened, pre-approved, pre-packaged, post-dated, freeze-dried, double-wrapped, vacuum-packed list of the ten things you must know about <i>Microformats</i>:</p>

<h3>1 - You Can Talk to Machines With Microformats</h3>

<p><i>Microformats</i> are used to annotate semantics, so that humans, and especially machines, can parse a page's content and know what it's all about. With regular markup, it's possible to interpret content with natural language processing and other artificial intelligence techniques, or simple hardcoded data scraping, but these techniques obviously fall short, as there is no better way to extract semantics than to have them already specified along with the content in the first place, and this is where <i>Microformats</i> come in.</p>

<h3>2 - Microformats are Damn Easy</h3>

<p><i>Microformats</i> are not based on some weird esoteric language, they use pre-existing syntax to specify semantic information, with most formats being represented in <i>HTML</i> by using <i>"class"</i>, <i>"id"</i>, <i>"title"</i>, <i>"rel"</i> and <i>"rev"</i> attributes. So in a way, if you know <i>HTML</i>, you already know everything you need to start using <i>Microformats</i>.</p>

<h3>3 - HTML5 is a Microformat Killer (slight exageration)</h3>

<p><i>HTML5</i> takes semantics into account, as it has added a lot of tags that are meant to be used instead of their generic <i>"div"</i> predecessors (example: <i>"header"</i>, <i>"section"</i>, <i>"article"</i>, <i>"footer"</i>). For example, in the past while creating a blog post entry, one would probably use the <i>"div"</i> tag to wrap the post's contents, whilst with <i>HTML5</i>, the kosher thing to do would be to use the <i>"article"</i> tag instead, giving parsers a greater insight as to the enclosed contents.</p>

<p>As the <i>HTML5</i> specification matures, it may integrate further markup that may turn some <i>Microformats</i> obsolete. However, <i>Microformats</i> should be here to stay, as no organization can be as fast as a single individual at writing a specification, and no one can stop you from making your own <i>Microformat</i> addressing a new semantic description need you have identified.</p>

<h3>4 - Microformats are in the Wild</h3>

<p>There are already loads of <i>Microformats</i> available out there. I'm going to show you examples of two stable and widely used <i>Microformats</i>, but first, switch to <a href="http://www.mozilla.com/firefox/">Firefox</a>, and install the <a href="https://addons.mozilla.org/en-US/firefox/addon/4106/">Operator</a> extension. This extension will parse pages for a multitude of <i>Microformats</i>, extract their enclosed contents and provide you with operations you can perform on them. It will give you a superficial example on the benefits of annotating data with semantics.</p>

<p>Now that you're running <a href="http://www.mozilla.com/firefox/">Firefox</a> with <a href="https://addons.mozilla.org/en-US/firefox/addon/4106/">Operator</a>, here are some <i>Microformat</i> examples:</p>

<h4>hCard</h4>

<p>This one is used to represent contact information. Below you can see my business card, annotated with the <a href="http://microformats.org/wiki/hcard">hCard Microformat</a>:</p>

<div class="vcard">
    <span class="fn">Tiago Silva</span>
    <span class="org">Hive Solutions</span>
    <a class="url fn n" href="http://www.tiagosilva.me">Personal Web Site</a>
    <a class="url" href="http://www.hive.pt">Hive Solutions Web Site</a>
</div>

<p>If you check out the <a href="https://addons.mozilla.org/en-US/firefox/addon/4106/">Operator</a> bar, you will notice that it has detected the above contact information. This was a pretty straightforward feat, as it may look like regular text, but if you look under the hood:</p>

&lt;div class=&quot;vcard&quot;&gt;<br />
    &lt;span class=&quot;fn&quot;&gt;Tiago Silva&lt;/span&gt;<br />
    &lt;span class=&quot;org&quot;&gt;Hive Solutions&lt;/span&gt;<br />
    &lt;a class=&quot;url fn n&quot; href=&quot;http://www.tiagosilva.me&quot;&gt;Personal Web Site&lt;/a&gt;<br />
    &lt;a class=&quot;url&quot; href=&quot;http://www.hive.pt&quot;&gt;Hive Solutions Web Site&lt;/a&gt;<br />
&lt;/div&gt;

<p>This markup allows the parser to know the enclosed content is a contact information, since the <i>"div"</i> has the <i>"vcard"</i> class which indicates that <a href="http://microformats.org/wiki/hcard">hCard</a> is being used in its contents, guiding the parser on how to interpret the data.</p>

<p>You can use this <a href="http://microformats.org/code/hcard/creator.html">creator</a> to encapsulate your contact information with the <a href="http://microformats.org/wiki/hcard">hCard Microformat</a>.</p>

<h4>hCalendar</h4> 

<p>This <i>Microformat</i> is used to represent information about an event. Below you can see the event of me writing this post, annotated using the <a href="http://microformats.org/wiki/hcalendar">hCalendar Microformat</a>:

<div class="vevent">
	<a href="http://blog.hive.pt" class="url">
		<abbr title="2010-06-09T18:0000" class="dtstart">June 9, 2010 6</abbr> - 
		<abbr title="2010-06-09T18:00" class="dtend">6</abbr>pm at
		<span class="location">Hive</span> - 
		<span class="summary">Hive Solutions Post</span>
	</a>
	<div class="description">Make a post for the Hive Solutions Blog.</div>
</div>

<p>Once again, if you check out the <a href="https://addons.mozilla.org/en-US/firefox/addon/4106/">Operator</a> bar, you will notice that it has detected the above event, and if you look at the code, you can see more than meets the eye:</p>

&lt;div class=&quot;vevent&quot;&gt;<br />
	&lt;a href=&quot;http://blog.hive.pt&quot; class=&quot;url&quot;&gt;<br />
		&lt;abbr title=&quot;2010-06-09T18:0000&quot; class=&quot;dtstart&quot;&gt;June 9, 2010 6&lt;/abbr&gt; - <br />
		&lt;abbr title=&quot;2010-06-09T18:00&quot; class=&quot;dtend&quot;&gt;6&lt;/abbr&gt;pm at<br />
		&lt;span class=&quot;location&quot;&gt;Hive&lt;/span&gt; - <br />
		&lt;span class=&quot;summary&quot;&gt;Hive Solutions Post&lt;/span&gt;<br />
	&lt;/a&gt;<br />
	&lt;div class=&quot;description&quot;&gt;Make a post for the Hive Solutions Blog.&lt;/div&gt;<br />
&lt;/div&gt;

<p>This markup allows the parser to know the enclosed content is an event, because the <i>"div"</i> has the <i>"vevent"</i> class which indicates that <a href="http://microformats.org/wiki/hcalendar">hCalendar</a> is being used in its contents, providing the parser with insight on how to interpret the data.</p>

<p>You can use this <a href="http://microformats.org/code/hcalendar/creator.html">creator</a> to encapsulate your events with the <a href="http://microformats.org/wiki/hcalendar">hCalendar Microformat</a>.</p>

<h3>5 - You're Already Using Microformats</h3>

<p>Google is starting to pay attention to <i>Microformats</i> in its crawling endeavours. Nowadays, if you search for <a href="http://www.google.com/search?q=thai+green+mango+salad+recipe">thai green mango salad recipe</a> you will get the following result:</p>

<img src="http://lh3.ggpht.com/_AkPHOXTr2V0/TA_BdsOpUiI/AAAAAAAADuY/M_JlbHtBDf4/s800/salad.png" />

<p>Google didn't used any cutting-edge algorithm to figure out that the underlying page was talking about a recipe that could be cooked in 20 minutes, and was reviewed 5 times. If you follow the link and analyze the page's source code, you will notice that it uses the <a href="http://microformats.org/wiki/hrecipe">hRecipe</a> and <a href="http://microformats.org/wiki/hreview">hReview</a> <i>Microformats</i> to annotate these details explicitly.</p>

<h3>6 - Lorem ipsum ipsum lorem</h3>

<p><a href="http://knowyourmeme.com/memes/xzibit-yo-dawg">'Sup dawg</a>, I heard you like 7 bullet points, so I put a 6th bullet point in your bullet points so you can have 7 bullet points.</p>

<h3>7 - The Semantic Web is Here</h3>

<p>Straight out of <i>Wikipedia</i>, here's the definition of the <i>Semantic Web</i> for you:</p>

<blockquote>The Semantic Web is an evolving development of the World Wide Web in which the meaning (semantics) of information on the web is defined, making it possible for machines to process it. It derives from World Wide Web Consortium director Sir Tim Berners-Lee's vision of the Web as a universal medium for data, information, and knowledge exchange.</blockquote>

<p>When you talk to an academic about the <i>Semantic Web</i> he/she will probably geek out on elaborated specifications like <i>Resource Description Framework (RDF)</i> being what the <i>Semantic Web</i> is all about, and it probably will be, but for now, keeping it real, <i>HTML5</i> and <i>Microformats</i> are the tools we have to realistically make the web semantic today.</p>

<p>If you wonder where all of this is moving to, and what's the ultimate vision for the <i>Semantic Web</i>, have a look at <a href="http://www.wolframalpha.com/">WolframAlpha</a>, a computational knowledge search engine where you can today make queries as magical as <a href="http://www.wolframalpha.com/input/?i=big+mac+%2B+coke">big mac + coke</a> and know everything there is to know about this combination, thanks to the semantic data sources it uses to cross data and extract meaning out of of. Now imagine if <a href="http://www.wolframalpha.com/">WolframAlpha</a> could use the whole web as its data source... now imagine if something much more intelligent and sophisticated could have access to the whole web as its data source...</p>]]></content:encoded>
</item>

        
            <item>
<title>WTF!!! Google Stole Our Idea!!!</title>
<link>http://blog.hive.pt/posts/100</link>
<comments>http://blog.hive.pt/posts/100#comments-area</comments>
<pubDate>Thu, 20 May 2010 00:00:00 +0000</pubDate>
<dc:creator>tsilva</dc:creator>

<guid isPermaLink="false">http://blog.hive.pt/posts/100</guid>
<description><![CDATA[]]></description>
<content:encoded><![CDATA[<p>I lied... Google DIDN'T steal our idea, just wanted to attract your attention. You see, <a href="http://code.google.com/events/io/2010/">Google I/O</a>, a huge event bringing together thousands of developers, is having its 2010 edition right now, where it once again revealed itself to be following the same path as we are, by announcing the <a href="https://chrome.google.com/webstore">Chrome Web Store</a>.</p>

<h3>Buy Right Now and Get a Free Vacuum Cleaner</h3>

<p>The <a href="https://chrome.google.com/webstore">Chrome Web Store</a> will only be open at the end of the year, and it will be a marketplace where one can publish and sell web applications. The concept may seem a little bit strange for some people, but it is really not unlike <i>Apple's App Store</i> for <i>iPods</i>, <i>iPhones</i>, and alikes; or the <i>Android Marketplace</i> for <i>Android</i> powered mobile devices. Like in these previous installments, it will bring centralization, with all its benefits, to a world of web applications that often remain unnoticed due to the turbulence of the chaotic sea of information overload.</p>

<p>Even though it's getting easier and easier to sign up to different services nowadays, with open authentication methods becoming mainstream (<i>Facebook Connect</i> seems to be everywhere these days), they still don't beat the simplicity of hitting "buy" on the <i>App Store</i>, and being done with the process, with the application you selected now being easily accessible from your dashboard. This is the experience that I am expecting this marketplace to bring, hoping that it will bring forth an obliteration of nowadays' bias towards still developing native applications for cloud-connected devices.</p>

<p>Common sense would say that there is no reason to make native applications for smartphones for example, or that at least they should be a dying trend. Even though mobile devices are getting increasingly powerful, previous limitations that stopped the browser from being a container for any kind of application are disappearing, and internet access is becoming ubiquitous, the transactionable merchandise in the current popular application marketplaces, be it the <i>App Store</i>, <i>Android Marketplace</i>, or <i>Steam</i>, still consists of a native application. If you want to commercialize a web application in any of these stores, you still have to create a native application that will act as a client for it, and obviously deploying your application in all these markets amounts to lot of nonsensical extra work that shouldn't have to be done in the first place.</p>

<h3>We're Losing Cabin Pressure</h3>

<p>Google's version of a web application marketplace is not technologically revolutionary, but it is still nevertheless, a potential game changer, and another step in Google's apparent commitment to leave desktop applications dead and buried, an attitude we are on board with, and that I have addressed extensively in previous posts.</p>

<p>It's no coincidence that this service will be made available at the same time <a href="http://www.chromium.org/chromium-os">Google Chrome OS</a> will be launched. To those not up to speed, <a href="http://www.chromium.org/chromium-os">Google Chrome OS</a> is a very stripped down version of <i>Ubuntu</i>, that basically comes with the <a href="http://www.google.com/chrome">Google Chrome</a> browser and little else, and which is meant to be run on netbooks with a custom firmware used to bypass traditional hardware detection routines for lightning-fast boot times.</p>

<p align="center"><object width="640" height="385"><param name="movie" value="http://www.youtube.com/v/0QRO3gKj3qw&hl=en_US&fs=1&color1=0x2b405b&color2=0x6b8ab6"></param><param name="allowFullScreen" value="true"></param><param name="allowscriptaccess" value="always"></param><embed src="http://www.youtube.com/v/0QRO3gKj3qw&hl=en_US&fs=1&color1=0x2b405b&color2=0x6b8ab6" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="640" height="385"></embed></object></p>

<p>If you join <a href="http://www.chromium.org/chromium-os">Google Chrome OS</a>, with their evangelization of <a href="http://dev.w3.org/html5/spec/Overview.html">HTML5</a>, their <a href="http://en.wikipedia.org/wiki/VP8">WebM codec</a>, <a href="https://chrome.google.com/webstore">Chrome Web Store</a>,  <a href="http://code.google.com/p/nativeclient-sdk/">Chrome's Native SDK</a> and services like <a href="http://code.google.com/apis/cloudprint/">Google Cloud Print</a>, you can see that Google is really pulling out all the stops to turn the browser into the container for all applications in the future.</p>

<h3>We're in the Pipe, Five by Five</h3>

<p>These moves are always a reassurance as to our mental sanity, as we were happy to see that at least one big industry player is seeing the future as we do, since this was yet another instance of Google revealing itself as to being on the same trail as us, but fortunately, still seeming to be miles away from the paradigm and service we want to establish for the next generation of the web.</p>

<p>Every post, I usually deliver a punchline or two about either <b>Colony</b> or <b>Omni</b>, one being our open-source modular application framework which is the fruit of two years of hardcore research and development, and <b>Omni</b> our holy-grail flagship platform-as-a-service that runs on <b>Colony</b>. There is currently no official portal for these technologies, since even though they are currently being used in-field successfully, they are for many reasons, still not consumer-ready. Today, and for the first time, I leave you with a coherent speech on what <b>Omni</b> is/will be, and how its ideology still distances itself as cutting-edge:</p>

<blockquote>
<p>Traditional software development models fail miserably in promoting steady and measurable development of large-scale software that is highly pressured by environmental changes. We believe that a truly modular approach to software development (think legos) is the solution.</p>

<p>We have built the technology that supports a platform where beautiful modular rich internet applications, that rival desktop applications in every way, can be easily developed, deployed and consumed. We call this service <b>Omni</b>, and it will be <i>"the iTunes of the web application world"</i>.</p>

<p>As a consumer you will be able to access all your applications from anywhere in the world, with any device and operating system, without ever having to think about storage or processing capabilities, paying only for what you use, just like electricity.</p>

<p>As a developer you will be able to develop and deploy new plugins using no more software other than a web browser. A plugin may be a new application by itself, which can re-use any of the hundreds of already available plugins (not counting third-party), or just an extension to an already existing application in the platform. You may sell and promote your work in our marketplace, benefiting from the ability to create attractive business models where you can offer and charge the consumer solely for the features he wants to use, thanks to our modular approach. You will be able to maintain your application without any kind of overhead, as you will be able to push any improvements to your consumers without them having to restart their service in any way, shape or form.</p>

<p>Desktop applications are dying, along with their isolated, rigid, and high-maintenance nature. A brave new world of flexible and ubiquitous services is coming to replace them, and it lacks only the earth where it can grow and flourish: <b>Omni</b>.</p> 
</blockquote>]]></content:encoded>
</item>

        
            <item>
<title>Switch Conference 2010 - The Aftermath</title>
<link>http://blog.hive.pt/posts/93</link>
<comments>http://blog.hive.pt/posts/93#comments-area</comments>
<pubDate>Mon, 17 May 2010 00:00:00 +0000</pubDate>
<dc:creator>tsilva</dc:creator>

<guid isPermaLink="false">http://blog.hive.pt/posts/93</guid>
<description><![CDATA[]]></description>
<content:encoded><![CDATA[<p>We're back from a weekend in Coimbra, where we attended <a href="http://www.switchconf.com">Switch</a>, a conference that aimed to gather scientists, entrepreneurs and thinkers, in the context of a <i>Web 2.0</i>, <i>Social Media</i> and <i>Entrepreneurship</i> theme, with some refreshing outliers to the main theme along the way.</p>

<p>The conference attracted our attention mainly because of its Startup Competition, where one could go and pitch for an idea in a couple of minutes in front of investors and a tech-savvy audience. As we have been <a href="http://blog.hive.pt/posts/2">living under a rock for a long time</a>, under heavy research and development for our <b>Colony framework</b> and <a href="https://www.ohloh.net/p/omni">Omni platform</a>, we figured out this would be a great opportunity to go out and breathe fresh air, something we started doing much more as of recently, now that we have reached a phase where <b>Colony</b> is becoming rock solid and very powerful, and we can quickly develop awesome applications on it.</p>

<p>We took the opportunity to take an idea out of the drawer (one that would scratch a personal itch), quickly prototype it, present it, and get some feedback on it. We wanted to always go out and eat in different places, to avoid falling into a routine, so we built a tool that would help us solve that problem. A place where you can just go and ask whatever is on your head in a search box and have useful results show up, like "penne all arrabiata in Coimbra between 5 and 10 euros near me", or just "penne alla arrabiata 5 euros", or whatever you feel like querying for. We implemented the prototype lighting-fast thanks to our <b>Colony framework</b>, and be it not for the current lack of data, it would already scratch our personal itch. With prototype implemented, and presentation in hand, and a name for what could be a new service built around this idea and prototype, we headed out to <a href="http://www.switchconf.com">Switch</a> to pitch for <b>alacarte.fm</b>.</p>

<h4>The Long Hard Road to Switch</h4>

<p>The organization was nailed on the head with every single frickin' Murphy Law. With Eyjafjallajokull spitting out volcanic ash and cancelling Portuguese flights and international speakers dropping out, a sh*t storm rained on the organization's parade, which could very well kill the conference, so when we arrived at the place (which was not that easy to find), and after hearing such a silence around which you could hear the grass growing, we thought for a minute that we had been scammed. Fortunately, after finding the conference hall, there actually were quite a lot of people there, and in the end, it was great to see that the organization still managed to make an awesome conference against all odds.</p>

<p><a href="http://www.switchconf.com">Switch</a> had a little bit of a <a href="http://www.ted.com">TED</a>-like feeling to it, as different people, from different ages, professions and backgrounds, shared their thoughts on the same stage. The conference was almost entirely performed in English, which unfortunately limited some of the speakers' ability to showcase their ideas and knowledge to their full extent, as well as to deliver that emotional punch that presentations need to touch/brainwash/inspire audiences. I do, however, give my deepest congratulations to them, in fact, the lousier the speaker's english, the prouder he should be, because public speaking alone is already such a huge fear for most people, that in a popular study it ended up being ranked as the biggest fear of all, with death itself coming in second place. That's right folks, in a funeral, people would rather be in the casket than giving the eulogy. So a clap of hands for their courage, which allowed the results of this conference to be shareable with the whole world.</p>

<p>Speakers talked about everything from cell biology, to freelancing, to lifestyle, to entrepeneurship, to journalism, and so on. We even had a speaker talk about how to make didgeridoos out of toilet paper, and give a pretty cool performance on stage, which myself, having unsuccessfully tried to play the instrument in the past (not only could I not do circular breathing, but the sound itself came out as an elephant in pain), really enjoyed:</p>


<p align="center"><object width="480" height="360"><param name="movie" value="http://www.dailymotion.com/swf/video/xdbpuz_switch-didgeridoo_music"></param><param name="allowFullScreen" value="true"></param><param name="allowScriptAccess" value="always"></param><embed type="application/x-shockwave-flash" src="http://www.dailymotion.com/swf/video/xdbpuz_switch-didgeridoo_music" width="480" height="360" allowfullscreen="true" allowscriptaccess="always"></embed></object></p>

<h4>Do You See The Face?</h4>
 
<p>I have to give some special attention to a great presentation in the out-of-the-box part of the conference about the science of human emotional facial expressions. Talking badly about someone behind his back is very nasty, but I will take the negative hit on my karma this time, because this one was just too f-ing hilarious.</p>

<p>To me, personally, this talk looked promising, as I am a closet behavioral psychology geek, which made me get preemptively excited. As the speaker stepped on stage, an epic music permeated the room, and he started talking in an hypnotic voice... a black slide appeared, as he provocatively asked if we could see the face... I couldn't see the face... and neither could anybody...</p>

<p>The lights were turned off, and once again we were asked if we could see the face... I couldn't see the face. As his steady voice blended with the harmonious tones of an <i>Enigma</i>-like music I was drawn spellbound by the eery atmosphere joining the darkness which previously enveloped the room, as I still wondered quite naively: where is the face? I wanted to see the face! I was sure he was going to surprise me with a pearl of wisdom that would shatter my model of reality and change the way I saw life and human relations forever, I just didn't have the psychological frame under which I could see the face, but when I did, I was sure my life would change... such an epic stage event just had to be the undertone for something big.</p>

<p>After a couple of minutes the spell broke, and I was probably the last one in the room to figure out that we were actually stuck in what could be a mixture between a sketch from <i>Monty Python's Flying Circus</i> and a <i>David Lynch</i> movie, a ride that would take me into the most bizarre public speaking experience I ever saw in my life. Turns out there was actually a face on the slide, but it wasn't being seen because of a technical problem, but the lack of facial expressions on the speaker's behalf (ohhhh the irony) and the epic tone of the presentation blinded me to the fact that the performance was not a mind-blowing metaphor, but was in fact completely foobar.</p> 

<p>In the end, I still have no idea what the hell the presentation was about, and what the speaker has done in his supposed decades of research, due to the absolute lack of content in the presentation. I wanted to post the video of his talk here, and help create a new internet meme, but unfortunately, I could only find the presentation itself, which with some imagination and my previous description, I hope will give you a nice laugh:</p>

<p align="center"><object width="480" height="385"><param name="movie" value="http://www.youtube.com/v/yCsGvzBQuiI&hl=en_US&fs=1&rel=0&color1=0x2b405b&color2=0x6b8ab6"></param><param name="allowFullScreen" value="true"></param><param name="allowscriptaccess" value="always"></param><embed src="http://www.youtube.com/v/yCsGvzBQuiI&hl=en_US&fs=1&rel=0&color1=0x2b405b&color2=0x6b8ab6" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="480" height="385"></embed></object></p>

<p>P.S.: When I die (knock on wood), I am going straight to hell...</p>

<h4>The Startup Panel</h4>

<p>In the end, we managed to present our project at the startup panel of the conference, which was unfortunately, too small, as it consisted only of us, showcasing <b>alacarte.fm</b>, our restaurant and food discovery service, and another startup, showing <i>Bondiu</i>, an event discovery and management service.</p>

<p><i>Bondiu</i> was pretty interesting, and it's true that I have felt a need for such a service, and even though competitors exist, for some reason I never found them to be good enough, and never ended up using them, so good luck to them on this one, as I hope I will be able to <i>Bondiu</i> in the future.</p>

<p>Our presentation went quite well in my opinion, as João managed to keep it going rather smoothly even with all the unexpected technical problems. I mean, give us a break, we improved the idea and implemented a prototype in little more than a week, within blank timeslots around our regular work, and had to pull close to an all nighter the day before the startup panel, to have things ready. The presentation was fine, the prototype was also working great, but we forgot to turn off the screensaver on the laptop, which kept nagging through the entire presentation, a rookie mistake on our part that won't happen next time.</p>

<p>Anyway, the feedback was great and mostly positive, and to all of those that jumped on the web address expecting something... no, it's not there, this was only a prototype. However, we will probably put a minimal set of stable features online soon. To all of those that weren't there, I leave you with our current "long elevator ride pitch" for <b>alacarte.fm</b>:</p>

<blockquote>
<p>Do your days always seem exactly the same? That's because you're doing exactly the same! Why don't you try going out to eat in a different place everyday for the next month? You may think that's too much of a pain, you don't know where the restaurants are, the ones you know are far away, you don't know what you can eat there, if you have enough money, or they don't have what you want to eat... not anymore! Just go to <b>alacarte.fm</b>, tell it what your stomach and wallet are thinking about, in a freestyle google-like fashion, and you're done! You'll get the best restaurant that fits your stomach, wallet and current location!</p>

<p>You're a restaurant owner, and lots of people passing by your restaurant just ignore it? You know you're better than your neighbouring competitor, but they still go next door, and you can't figure out why? That's because humans are creatures of habit, and in this particular case, their habits are being fueled by deep primal survival strategies... they want food! They'll go for where they can fulfill their need in the best way, they won't settle for any unknowns, they won't give you a fair chance. You just need to be able to showcase yourself and prove them how great you are, and we give you just that! We take the choice out of choosing. The people for which your restaurant is the best choice will be the ones we suggest to go there, and since they don't even have to think about it, and it's the best choice for them, they'll have no reason not to go... the rest is up to you, if you're good, they'll be hooked for life! :)</p>
</blockquote>

<p>And here are the slides for the presentation too:</p>

<p align="center"><object id="__sse4125398" width="425" height="355"><param name="movie" value="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=alacarte-presentation-100517094521-phpapp02&stripped_title=alacartefm-presentation" /><param name="allowFullScreen" value="true"/><param name="allowScriptAccess" value="always"/><embed name="__sse4125398" src="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=alacarte-presentation-100517094521-phpapp02&stripped_title=alacartefm-presentation" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="425" height="355"></embed></object></p>

<h4>The Aftermath</h4>

<p>I have no idea as to the real impact this event had, but I am sure it had at the very least some, and that it was one step forward in waking us up to our great potential, one step towards making us stop whining and step up to the plate, to get our ideas out there and act on them.</p>

<p>Yeah, we live in Portugal and we're in the middle of a financial crisis, but then again, we live in Portugal and we're in a middle of a financial crisis, same phrase, different interpretation, our circumstances can either be a handicap, or a huge advantage. Let's choose wether we want to be whiners or winners, and then stick with that decision. Until then, we hope to see you at the next <a href="http://www.switchconf.com">Switch</a> or similar conference, and see the idea YOU have been keeping in the drawer for all this time :).</p>
]]></content:encoded>
</item>

        
            <item>
<title>HTML5 Killed the Flash Star!</title>
<link>http://blog.hive.pt/posts/9</link>
<comments>http://blog.hive.pt/posts/9#comments-area</comments>
<pubDate>Tue, 04 May 2010 00:00:00 +0000</pubDate>
<dc:creator>tsilva</dc:creator>

<guid isPermaLink="false">http://blog.hive.pt/posts/9</guid>
<description><![CDATA[]]></description>
<content:encoded><![CDATA[<p>Since Steve Jobs has bashed <i>Adobe</i> and <i>Flash</i> recently, calling <i>Adobe</i> "lazy", saying no one will use <i>Flash</i> anymore, and that everyone will move to <i>HTML5</i>, and since I agree with his arrogance (at least in the "everyone will move to HTML5" department), this is a great time to talk about <i>HTML5</i>.</p>
<p>I've just been tinkering around with some of the features that are already available in today's browsers and their nightly builds, and I was very pleased to confirm that all these nice features are incredibly easy to use. Just to get you up to speed, <i>HTML5</i> brings with it not only new markups, but also some kickass extensions to the <i>DOM API</i>. Here are some of the features that come with <i>HTML5</i> or are piggybacking on them:</p>
<ul>
<li><b>Dropped obsolete elements:</b> <i>frame</i>... you will be missed :(.</li>
<li>Added new elements meant to replace the generic and semantically shallow <i>div</i> tags by giving more semantic information about their contents (example: <i>header</i>, <i>section</i>, <i>article</i>, <i>footer</i>).</li>
<li>New form controls as well as the ability to make any marked up content editable.</li>
<li><b>Offline Storage:</b> Goodbye 4kb cookies.</li>
<li><b>Application Cache API:</b> One of the many nails in <i>Google Gears</i>' coffin.</li>
<li><b>Drag and Drop:</b> No more frustrating upload forms.</li>
<li><b>Web Workers:</b> Finally I can use the <i>Javascript Virtual Machine</i> for real, without freezing the browser.</li>
<li><b>Websockets:</b> Goodbye polling, hello push notifications.</li>
<li><b>Notifications:</b> Desktop apps get to be able to notify me even when they're hidden, and the browser doesn't? Not anymore.</li>
<li><b>Geolocation:</b> You are here!</li>
<li><b>Canvas:</b> Hello special FX.</li>
<li><b>WebGL:</b> Will anything run outside the browser now?</li>
<li><b>Video and audio:</b> Hasta la vista 90% of <i>Flash</i> applications (I just made the 90% figure up).</li>
</ul>
<h3>The Desktop Killah</h3>
<p>One of the nicest things about <i>HTML5</i> is that it reduces the need for browser plugins like <i>Flash</i> and <i>Silverlight</i>, both technologies that deserve their spotlight for having redefined the browser's role, to that of a much more multi-purposed and capable tool, but that also deserve to have the spotlight removed from them for making it much harder to make web applications seamless and platform independent. This move represents a strong detachment from the language's original purpose, which was to layout content, as there is now a strong focus on satisfying the needs of web applications.</p>
<p><i>HTML5</i> is demolishing the last obstacles that prevented us from forsaking desktop applications and all the evil that comes with them:</p>
<ul>
<li>I am lazy and I don't like to install stuff.</li>
<li>I don't like to upgrade applications either.</li>
<li>Nor uninstall them.</li>
<li>I don't like to clean viruses out of the computer of someone that used an <i>USB</i> pendrive.</li>
<li>I don't like to have to choose an operating system.</li>
<li>I don't want to have to install all operating systems.</li>
<li>I reaaaally don't like to reinstall an operating system (I left that lifestyle along with <i>win9x</i>).</li>
<li>I don't like to give tech support, as I'm much happier if things just work all the time... and I like giving tech support for free even less.</li>
<li>I don't like to have to tell people that they shouldn't have to buy a new computer, that it's not slow for being obsolete, but from all the crap that they downloaded, that infected their computer, that is spamming everyone, and hogging their computers resources.</li>
</ul>
<p>For these reasons and more, everything should be on the cloud, everything you need should be a browser, and all browsers should remove their download features. When this happens, the world will be a much more peaceful place where the skies are blue, unicorns will roam the streets, and the sun will shine. <i>HTML5</i> is a huge milestone in this paradigm shift and it therefore has our full support.</p>
<h3>Webless Web Applications</h3>
<p>If 1990's Tim Berners-Lee were to slip and fall into a wormhole that sucked him into our time, he would probably be speechless at what we've done with his beloved <i>World Wide Web</i>. It was supposed to be a bunch of pages with links, and not a platform that aims to steal the desktop realm's throne.</p>
<p>Everytime one of us web application pseudo-prophets chants the good ol' word of a world without desktop applications, heretic voices shout: "What if I lose my internet connection?". Until now, the answer was one or more of: use <i>Google Gears</i>, get a better <i>ISP</i>, and/or get a backup internet connection like <i>3G</i>.</p>
<p>The answer is becoming much simpler, with the <i>Application Cache API</i>, <i>DOM Storage</i> and <i>Web SQL Databases</i>, which are the most recent omens validating "the prophecy" (these along with <i>Web Workers</i> and <i>Geolocation</i> features, easily justify why <i>Gears</i> was dropped by <i>Google</i> in favour of <i>HTML5</i>).</p>
<h4>Application Cache API</h4>
<p>With the <i>Application Cache API</i>, one can now control what parts of the web application should be cached on the client side. To do so, is as easy as placing a manifest attribute in the document's <i>html</i> tag, with an <i>URI</i> to the location of a manifest file, which indicates which contents should be cached (this file must be sent with the "text/cache-manifest" mime type).</p>
<p>The cache manifest file is a simple text file with a list of the resources that should be cached and those that shouldn't. Its structure is beyond the scope of this post, but it's pretty much straightforward. To learn more about it you can have a look at the <a href="http://dev.w3.org/html5/spec/Overview.html#offline">Offline Web Applications</a> chapter of the <a href="http://dev.w3.org/html5/spec/Overview.html">HTML5 spec</a>.</p>
<h4>DOM Storage</h4>
<p>You can now also partially, or fully replace the usage of cookies with the easier and more flexible <i>DOM Storage</i>. Now you can access two new structures in your browser called <i>localStorage</i>, and <i>sessionStorage</i>.</p>
<p>With local storage you can store data that is accessible by all scripts within the domain that originated it, and that is persistent even after the browser closes. With session storage, you can store data that is accessible only by the specific window/tab, and therefore disappears after it's closed.</p>
<p>You are not limited to storing only strings like in cookies, it's really easy to use, as you can use them as regular associative array structures, and browsers offer somewhere around 5-10mb per domain for this kind of storage.</p>
<p>You can have a look at this <a href="http://html5demos.com/storage">online demo</a> to give this feature a test run.</p>
<h4>Web SQL Databases</h4>
<p>This feature is just totally sweet, the idea that I can now write a full blown web application without even needing a web server is pretty liberating. The concept may be kind of stupid, but bear with me for a while. Imagine that I just wanted to write a quick personal app, to keep track of workout logs or whatever, and I lived in a parallel universe where spreadsheet software was never invented. Previously I would have to pick up some programming language, or combination thereof, which offered me a way to quickly prototype an application with an user interface, and I would probably end up in <i>.NET</i> and <i>Windows Forms</i> land.</p>
<p>Now I can just hammer up a <i>HTML</i> page with some <i>Javascript</i> and I'm done. It's easy, it's free, it's cross platform, and I just need a rudimentary text editor to do it. If you find this to be a weird scenario for this feature's usage, then think about making web applications that are available offline in whatever platform you're using them in: control the cached resources with the <i>Offline Cache API</i>, sync the user's data with a local <i>Web SQL Database</i>, and you can now use your web applications even in Antarctica.</p>
<p>Give this <a href="http://html5demos.com/database">online demo</a> a try to get a feel for how this works.</p>
<h3>Pimp my Website</h3>
<p><i>HTML5</i> brings with it some nice features that will make web applications increasingly indistinguishable from their desktop counterparts.</p>
<h4>Video and Audio</h4>
<p>I remember the old days when playing video and audio content on the web was a huge pain in a part of my body. Buffering 10%.... buffering 20%... buffering failed... or I didn't have the appropriate player, or the appropriate player was loaded with spyware, it just wasn't fun to say the least... until <a href="http://www.youtube.com">YouTube</a> and similar services appeared.</p>
<p>Due to <i>Flash</i>'s ubiquity, the experience of watching media in these services is nowadays pretty decent, as they work out of the box. However, the way <i>Flash</i> deals with video is pretty resource intensive, and to top that, it uses proprietary formats for compression. <i>HTML5</i> kind of deems <i>Flash</i> obsolete in this department, as it lets the browser deal with media playback by itself, by now adding a way to reference them via <i>video</i> and <i>audio</i> tags.</p>
<p>Here's another cool <a href="http://html5demos.com/two-videos">demo</a> showing off video in <i>HTML5</i>.</p>
<h4>Canvas</h4>
<p>Another one of <i>Flash</i>'s nemesis, <i>Canvas</i> consists of a drawable region defined in the <i>HTML</i> code that can be manipulated via a set of drawing functions similar to other <i>2D APIs</i>. Amongst its many utilities (charts for example, just from the top of my head), <i>Canvas</i> may very well be the container where a new wave of video games an other interactive media applications will run in. Their quality may even be boundless, as the <i>WebGL</i> specification is in the works, which will provide the <i>Canvas</i> container with <i>OpenGL ES</i> bindings, and make hardware accelerated in-browser cross-platform graphics a reality.</p>
<p>You can check out <a href="http://www.canvasdemos.com/">CanvasDemos</a> for a motherload of <i>Canvas</i> demos to play with.</p>
<h4>Drag and Drop</h4>
<p>Have you closely checked out <a href="http://www.gmail.com">Gmail</a> recently? Try dragging and dropping multiple files into the attachment upload area when using <i>Firefox</i> or <i>Chrome</i>, and just watch the magic happen. The files will be uploaded and attached with no extra interaction.</p>
<p><a href="http://www.gmail.com">Gmail</a> is using an interesting hack to do this, it's just using a normal form input tag, of type "file", with the new "multiple" attribute offered by <i>HTML5</i>, which already supports dragging and dropping multiple files into it, and it's hiding the input control and masking it with <i>CSS</i> trickery.</p>
<p>Most browsers already handle custom drag and drop events, but when these events are caused by dragging and dropping files, accessing and manipulating their contents seems to be a whole other story. Hopefully this will become a standardized reality in the not too distant future, and it will bring a whole new level of user experience to web applications, but for now you can already fool around with it today, by using <i>Firefox</i>'s <a href="https://developer.mozilla.org/en/DOM/FileReader">FileReader object</a>.</p>
<h4>Notifications</h4>
<p>Yes, you can install plugins in your browser to provide you with notifications when you receive something in your <a href="http://www.gmail.com">Gmail</a> inbox for example. But change browser or computer, and you've lost the feature.</p>
<p>The fact that web applications can't issue decent notifications nowadays, kind of forces them into having to be visible all the time, which makes them a lesser breed than desktop applications. This is probably a thing of the past, as you can now issue desktop notifications with <i>Chrome</i>, through <i>WebKit</i>'s <i>Notification API</i>.</p>
<p>Actually, for the sake of accuracy, I looked for this feature in the current <i>HTML5</i> spec, and I didn't find it there, so I can't promise this will actually be somewhere in the standard, but I won't be very surprised when this <i>API</i> finds its way there.</p>
<p>Check out this <a href="http://apirocks.com/html5/html5.html#slide12">slide</a> from this <a href="http://apirocks.com/html5/html5.html">awesome HTML5 slideshow</a> with <i>Chrome</i> to see this feature in action.</p>
<h3>And Even More Miscellaneous Sweetness</h3>
<p>Breathe deep... and there we go... more <i>HTML5</i> goodies.</p>
<h4>Websockets</h4>
<p>Browsers and web servers just didn't get along until now. Everytime the browser requested something from the web server, it would just close its door afterwards without asking it if it wanted anything else. Ok, it could ask it to keep the door open for more or less time, but still, it ended up being pretty rude in the end.</p>
<p>Try to design an application that needs to be notified of server-side events and you'll notice how messy and inefficient your solution will be, as you'll have to keep polling the server time and time again, asking it the same old question and having the door shut in your face afterwards. <i>Websockets</i> make things so much easier, since now you can just open a connection with the server and have it notify you instead, leaving you with the simple job of waiting for the notifications, instead of having to be asking questions all the time.</p>
<p>Here's a <a href="http://dev.xantus.org/">demo</a> of an <i>IRC</i> client using <i>Websockets</i>.</p>
<h4>Geolocation</h4>
<p>Want to track down someone who is owing you money? Make a website that will draw him in, and use the <i>Geolocation API</i> to get his coordinates. I'm sure there are better uses for this feature than that one, I mean, even in the desktop computer where I'm writing this post, which naturally has no <i>GPS</i>, I was able to get some pretty accurate coordinates as to the whereabouts of my current location, so I guess coming up with cool uses for this feature just requires a tiny bit of creativity.</p>
<p>Try out this <a href="http://maxheapsize.com/static/html5geolocationdemo.html">demo</a>, and don't blame me if you get a little paranoid after trying it.</p>
<h4>Web Workers</h4>
<p><i>Javascript Virtual Machines</i> are getting pretty efficient, just look at <i>Google's V8</i> for example. Probably it's time to start taking them seriously and getting them to do heavy duty work.</p> <p>Until now, everytime you wanted to perform heavy computations, either you used some nasty <i>setTimeout</i> hacks, or you would get a frozen user interface. With <i>Web Workers</i>, you can now run your code in different threads (or something thread-like, I guess this depends on the browser and the operating system it's running on), and fully use the browser's power without handicapping your user experience.</p>
<p>Watch your <i>CPU</i> fly without crashing your browser, with this <a href="http://html5demos.com/worker">demo</a>.</p>
<h3>We Want You for the HTML5 Army!</h3>
<p>Still not convinced that you can kiss <i>Flash</i> bye bye? Then you can go back to sleep. In case you are, then use <i>HTML5</i>, it's right here, right now. Yes, the specification is still a draft and it's obviously not implemented in all browsers as a consequence, but at least whenever there's not much of a risk in going for <i>HTML5</i> instead of a sluggish browser plugin, then go for it. When <i>Flash</i> becomes an archeological artifact found in archaic websites, along with <i>GIF</i> animations of mailboxes, then you can proudly say you were one of the standard's pioneers :).</p>]]></content:encoded>
</item>

        
            <item>
<title>Oh My God! Colony Broke a (arguably unofficial) World Record!!!</title>
<link>http://blog.hive.pt/posts/6</link>
<comments>http://blog.hive.pt/posts/6#comments-area</comments>
<pubDate>Wed, 14 Apr 2010 00:00:00 +0000</pubDate>
<dc:creator>tsilva</dc:creator>

<guid isPermaLink="false">http://blog.hive.pt/posts/6</guid>
<description><![CDATA[]]></description>
<content:encoded><![CDATA[        <p>It has been a "gung-ho" week here at a Hive, as we have pushed <b>Colony</b> into the ranks of <a href="http://rubyonrails.org/">Ruby on Rails</a>, <a href="http://www.djangoproject.com/">Django</a> and similar rapid web application development frameworks.</p>
        <p><b>Colony</b> is a modularity framework, and as such, it promotes well-designed modular applications. Modular applications are normally of a large scale nature, or at least they intend to be as such, or else they needn't be modular in the first place. Due to this focus, even though we aim for simplicity, promoting rapid development wasn't exactly a top priority.</p>
        <p>Roughly two weeks ago, after performing a demonstration of the <b>Colony</b> framework and the <b>Omni</b> platform service we're building on it, we were asked if <b>Colony</b> was useful as a productivity tool, in order to develop better applications in less time, and how fast we could make an application with the functionality of a specific pre-existing invoicing application. After saying we had to think it through, we went back to the drawing board.</p>
        <p>We checked the application out and it didn't seem that complex, it could be easily done with any of the many already existing web application frameworks. But why not <b>Colony</b>? Just because it was built to create quality modular applications in a fair amount of time, not being able to use it for quick prototyping didn't seem to make sense. In order to push the framework further, instead of doing some math on how long we would take to make the application and probably end up being overly optimistic in our estimations, we build the whole damn thing just to be sure.</p>
        <p>That's right, we built a <i>Software-as-a-Service</i> invoicing application in <b>Colony</b> in little more than one week (without burning the midnight oil!). It's a beta of a pre-alpha version for sure, but from here onward, its basically bug fixing (we're probably aware of most bugs by now, just have to put in the time to fix them), and usability and design improvements. The whole thing, which we branded <b>Take the Bill</b> just for kicks, included:</p>
        <ul>
            <li>Both application and visual design.</li>
            <li>All the CRUD (create, remove, update, delete) normally associated with most information systems, with this one not being an exception.</li>
            <li>Both regular and single sign-on authentication with <a href="http://openid.net/">OpenID</a>, <a href="http://www.twitter.com/">Twitter</a> or <a href="http://www.facebook.com/">Facebook</a>.</li>
            <li>PDF report generation for invoices and others.</li>
            <li>Application interface and logic glued together with Ajax, for a smoother and faster user experience.</li>
            <li>Facebook-style full-text searching, giving the user a single search box where to look for any entity in the application, like a customer or an invoice, using any keyword related to it and without losing context.</li>
        </ul>
        <p><embed type="application/x-shockwave-flash" src="http://picasaweb.google.com/s/c/bin/slideshow.swf" width="600" height="400" flashvars="host=picasaweb.google.com&captions=1&hl=en_US&feat=flashalbum&RGB=0x000000&feed=http%3A%2F%2Fpicasaweb.google.com%2Fdata%2Ffeed%2Fapi%2Fuser%2Feng.tiago.silva%2Falbumid%2F5460057052124078129%3Falt%3Drss%26kind%3Dphoto%26authkey%3DGv1sRgCIykp-Wh7ramuQE%26hl%3Den_US" pluginspage="http://www.macromedia.com/go/getflashplayer"></embed></p>
        <p>To do this, we had to depart from the traditional way we built web applications in <b>Colony</b> until now. Our primary way of doing web applications was to have a <i>Python</i> implementation of <b>Colony</b> running on the server-side with all the plugins necessary to support the application's logic and deployment, which roughly meant having <i>Object-relational-mapping</i>, <i>HTTP</i> server and application logic plugins.</p>
        <p> When the user accessed the <b>Colony</b> instance's <i>HTTP</i> server by typing the web application's <i>URL</i> in the browser, <b>Colony</b> would serve its <i>Javascript</i> implementation, opening up a way to provide modularity on the client-side. From here onward, the server would send all the required plugins to the browser and it would execute them in its <i>Javascript Virtual Machine</i>, which in the end had the effect of rendering the whole web application.</p>
        <p>To achieve the level of modularity we usually targeted for, we didn't provide the client-side visual and logic code in the web plugin itself, but added yet another useful level of indirection by partitioning this code into a <i>Model</i>, a <i>View</i>, a <i>Controller</i>, and a <i>Presentation Model</i>, in a fashion similar to the traditional <i>MVC</i> design pattern, and wrap these parts in a concept we call an <i>MVC Module</i>.</p>
        <p><i>MVC Modules</i> are managed on the client-side by a <i>MVC Manager</i>, which provides lifecycle management in a manner as similar as possible to the <b>Colony</b> specification, but with all the particular twists required to provide modularity in visual components. Finally, in the <i>Module</i>'s <i>View</i>, we would then implement the user interface using <b>Colony Web UI</b>, our own <i>Javascript widget library</i>.</p>
        <p>This way of doing things is architecturally sound, and it's the best solution in the long run, but it's still painfully slow to develop in, as we end up only breaking it even in terms of development time by being able to avoid a lot of bugs that would come from a more ad-hoc messy approach. We have ideas on how to cut this time shorter, but they're still pending implementation.</p>
        <p>Long story short, we could have never implemented this application in this time frame with this previous approach without overdosing on caffeine, so we took a different route this time.</p>
        <p>No need for modularity on the client-side, so no <b>Colony</b> implementation on the browser. Modularity on the server-side was enough, so we threw the whole Javascript stack to the side this time... leaving only some <a href="http://www.jquery.com/">jQuery</a> wizardry in the plate.</p>
        <p>Separation of concerns was made possible on the server-side due our lightweight <i>MVC</i> server-side framework plugins. This was enough to separate logic, static content, dynamic content and visual components, and therefore more than enough to make the whole party.</p>
        <p>In the end, <b>Colony</b> is now more all-purpose than ever, which means more power to the people :). Also, we now have a prototype of a new <i>Software-as-a-Service</i> which can easily be shaped into a consumer-level reliable service if we decide to go in that direction, which we can use as another trophy in our showcase regardless.</p>]]></content:encoded>
</item>

        
            <item>
<title>Go Cloud, or the Planet Gets It!!!</title>
<link>http://blog.hive.pt/posts/5</link>
<comments>http://blog.hive.pt/posts/5#comments-area</comments>
<pubDate>Mon, 05 Apr 2010 00:00:00 +0000</pubDate>
<dc:creator>tsilva</dc:creator>

<guid isPermaLink="false">http://blog.hive.pt/posts/5</guid>
<description><![CDATA[]]></description>
<content:encoded><![CDATA[        <p>Different week same menu, today I am yet again going to pitch in favor of <i>Cloud Computing</i>. If you've been following this blog you've probably found the words <i>SaaS</i> and <i>Cloud</i> popping out of your mouth in your chats around the watercooler and leaving your colleagues to think you're a loon. Fear not! I am going to approach the subject in a totally different light this time, and I promise to change either in area or depth in the next posts, probably by diving into more technical stuff.</p>
        <h4>Loving the Planet is the New Blue</h4>
        <p>Today, ecology is trendy, so trendy in fact that even huge companies previously massacred by activism or simply negative overall public opinion due to their ecological policies or lack thereof, today promote themselves as green, clean, sustainable, low-footprint, yada yada yada... This practice is sometimes refered to as "greenwashing", like the devil was putting an halo on to hide its horns. I personally call it "who the hell cares?". Does it really matter that much, the motivations that made someone perform a good action? Or does it matter more that the action was performed? No matter what your stance torwards the environment is, if you want to save the planet, or just spend less money, <i>Cloud Computing</i> will make you environment-friendly regardless.</p>
        <h4>Captain Cloud, He's Our Hero, Gonna Take Pollution Down to Zero</h4>
        <p>If tomorrow, all services were to be moved to the Cloud, the savings we would have energy-wise would be absolutely incredible. My math skills may be rusty, but "less energy being spent = less energy needing to be produced = smiley planet" seems to be at least correct in theory. Going straight to the point, how can <i>Cloud Computing</i> lower our energy spenditure? Just to get people up to speed, let me just redefine <i>Cloud Computing</i> straight out of <i>Wikipedia</i> again:</p>
        <blockquote><p>Cloud Computing is Internet-based computing, whereby shared resources, software and information are provided to computers and other devices on-demand, like electricity. It is a paradigm shift following the mainframe and client-server shifts that preceded it. Details are abstracted from the users who no longer have need of, expertise in, or control over the technology infrastructure “in the cloud” that supports them.</p></blockquote>
        <p>Or show you this nifty <i>Salesforce</i> video instead:</p>
        <object width="640" height="385"><param name="movie" value="http://www.youtube.com/v/ae_DKNwK_ms&hl=en_US&fs=1&color1=0x2b405b&color2=0x6b8ab6"></param><param name="allowFullScreen" value="true"></param><param name="allowscriptaccess" value="always"></param><embed src="http://www.youtube.com/v/ae_DKNwK_ms&hl=en_US&fs=1&color1=0x2b405b&color2=0x6b8ab6" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="640" height="385"></embed></object>
        <p>By embracing the <i>Cloud Computing</i> paradigm, you will be using storage and processing capabilities just as you use electricity in your house. To use electricity, you don't really need to understand where it comes from or how it works. You will fairly pay for what you use, and not for the resources that provide what you use. You will pay for the storage and not for the hard disk, for the processing and not for the processor. This business model paves the way for the centralization and brutal optimization of the resources that provide these utilities, especially regarding how they're being used.</p>
        <h4>Save the Planet by Being Cheap!</h4>
        <p>Let's think about it in a very simple way. Let's say you want to create a web site and decide to host it on your own. You buy a server just for that purpose, set it up, get your domain, bind it to the server's address, and you're proudly hosting your website by yourself. In the end, it turns out your website is not as important as you thought it was, its not attracting that much traffic, and as a consequence your server is largely underused. Most likely you also have a huge hard disk that is completely empty, unless you are hosting some kind of media streaming service.</p>
        <p>So there you have it, you have an incredibly powerful machine sitting in your house or office, which is basically not being used at all. You have spent your money on something you didn't need, it's turned on and wasting unnecessary energy (power saving methods will probably reduce the impact, but still...), its hard disk is not being fully used, its processor is mostly idle, and the energy and resources necessary for manufacturing and transporting this computer were already wasted and are not coming back.</p>
        <p>If you were to use a shared hosting solution, which would probably serve your needs in case the website had low traffic and uptime demands, then you would have opened the way for the service host to cut on their maintenance costs by placing your website in the same server as many others, consequently using it to its full capacity, and lowering the amount of resources and energy used to provide the same services to the world.</p>
        <p>It would be cheaper for you, cheaper for them, and cheaper for the planet, it's a win-win deal all the way. And I'm talking about shared hosting, something that already existed in the stone-age, along with spears and clubs. When I talk about services like Amazon's <a href="http://aws.amazon.com/s3/">S3</a> and <a href="http://aws.amazon.com/ec2/">EC2</a>, where you can pay for the exact storage and processing you end up using, you are in most cases getting the fairest cost for what you are consuming, while being confident that a company that can sell services at this level of granularity, has to have very efficient and scalable infrastructures, and if they can use less resources to provide the same service, and increase their profit margins, they will, and once again, the planet says thanks.</p>]]></content:encoded>
</item>

        
            <item>
<title>A Modularity Carol: the Ghosts of Modularity Past, Present and Future</title>
<link>http://blog.hive.pt/posts/4</link>
<comments>http://blog.hive.pt/posts/4#comments-area</comments>
<pubDate>Mon, 29 Mar 2010 00:00:00 +0000</pubDate>
<dc:creator>tsilva</dc:creator>

<guid isPermaLink="false">http://blog.hive.pt/posts/4</guid>
<description><![CDATA[]]></description>
<content:encoded><![CDATA[        <p>Today I was reading a <a href="http://thenextweb.com/apps/2010/03/17/seesmic-app-aim-total-personalisation-social-experience/">small blog post</a> about a new desktop client for <i>Twitter</i>, <i>Facebook</i>, and <i>LinkedIn</i> being done by <a href="http://www.seesmic.com/">Seesmic</a>. The interface looked very interesting, but as to the concept itself... ad nauseaum... until I got to the part where they claimed it was going to be easily extensible through plugins. As to the particular details of how they're going to implement the modularity and how easy it will be for developers to extend, and consumers to use, I can only speculate from the articles I have read, since it wasn't launched yet, but it does hold the promise of scratching a itch of mine, since I still have to use different tools to post on different social networks, and redundancy bugs me immensely.</p>
        <p>The modularity train is gaining momentum, as we have seen developments all over the industry in this direction these pasts years, all apparently and hopefully heading torwards the station where we are already waiting at. Not so long ago, talking about building fully modular and extensible applications was crazy talk, utopic mumbo-jumbo, it made sense, but it was, or was perceived as, an unworthwhile investment... but history is about to change.</p>
        <h4>The Ghost of Modularity Past</h4>
        <p>In the software development world, <i>Eclipse</i> was probably the first extensible application whose modularity really seemed to pay off, or at least its utility was easily perceived by the developers using it. Personally, I've been using <i>Eclipse</i> for years, and it always seems to catch up to my new demands, since there always seems to be a bunch of plugins I can use to extend it in order to get the functionality I want.</p>
        <p>Modularity even seems to have already played a significant role in the consumer market. There is probably more than one reason why <i>Firefox</i> has risen from being the underdog, to having a reasonable chunk of the browser market, and I personally think one of the reasons had to due with its extensible nature. When one needed a new feature in <i>Firefox</i>, like a downloader manager for example, one didn't need to spam the <i>Mozilla Foundation</i> requesting for that new feature, it was very probable that someone had already developed that feature as an extension, and getting it was as simple as search, point and click.. and if it wasn't available yet, developing the extension by ourselves was always an option.</p>
        <p>When <i>Google Chrome</i> came out, even though it was blazing fast and I loved it for that, I have to admit it took me a while to drop <i>Firefox</i> and start using <i>Chrome</i> by default, due solely to it not being extensible, and to the fact that I had already placed some weight on my <i>Firefox</i> extensions' shoulders. Certainly, for a lot of early adopters the lack of extensibility in <i>Chrome</i> was probably irrelevant, but I'm pretty sure I wasn't the only one in the same position, that didn't think twice about dropping <i>Firefox</i> for <i>Chrome</i> once it started supporting extensions.</p>
        <p>Above all people want speed, that's it, they want to be able to do the same or more, in less time. <i>Chrome</i> already delivered in terms of raw speed by having an incredibly short boot time, as well as lighting speed rendering and <i>Javascript</i> processing provided by <i>WebKit</i> and the <i>V8 Javascript Engine</i>, respectively. However, the last speed improvement was not so directly measurable; it was by providing extensions that it finally opened the possibility for a whole range of valuable time-saving shortcuts.</p>
        <p>Modularity has been around for quite some years in the desktop application world, and even though monolithic applications are still the norm, one cannot deny the world of difference modularity brings to the few applications that apply the paradigm successfully.</p>
        <h4>The Ghost of Modularity Present</h4>
        <p>There is, as of recently, a new trend arising, that of bringing modularity to the web. <i>Google</i> seems to be increasingly interested in modularity and integration, <i>Google Labs</i> features seem to be popping up in all <i>Google</i> applications, and slowly but surely, the whole <i>Google</i> ecosystem seems to be integrating more and more, each time making more sense as a coherent whole. The recent launch of <a href="http://www.google.com/enterprise/marketplace/home/">Google Apps Marketplace</a> was particularly interesting, because it was a noteworthy move in bringing together different web applications into a single unified platform.</p>
        <p>It's very satisfying to know that our own crazy talk/utopic mumbo-jumbo, or should I call it vision, is being confirmed with each passing day. The web has brought us all together, and thanks to this, excuses for re-inventing the wheel are becoming obsolete. If someone has already solved a problem, you shouldn't have to solve it again, period. The web mixed with the open source movement has done a huge deal in this regard, and we can surely credit them with the exponential growth in innovation brought forth nowadays by even by small groups of people with limited resources.</p>
        <h4>The Ghost of Modularity Future</h4>
        <p>The next step, is to have an unified platform where to develop and deploy applications, where one doesn't have to worry about scalability problems, or compatibility with target platforms. Where we can easily re-use the work performed by other developers, and share our own, a host where the user can find all his web applications, and the developer freely distribute or sell his own, ultimately a service that kills redundancy and complexity in favor of value and simplicity... we are working for <b>Omni</b> to be that service, to be your open web platform, your singularity on the web.</p>
]]></content:encoded>
</item>

        
            <item>
<title>A Mildly Arrogant Attempt at Predicting the Future</title>
<link>http://blog.hive.pt/posts/3</link>
<comments>http://blog.hive.pt/posts/3#comments-area</comments>
<pubDate>Tue, 23 Mar 2010 00:00:00 +0000</pubDate>
<dc:creator>tsilva</dc:creator>

<guid isPermaLink="false">http://blog.hive.pt/posts/3</guid>
<description><![CDATA[]]></description>
<content:encoded><![CDATA[        <p>All boundaries are nearly gone, as we are being propelled towards a future where all computing resources will be easily transferable and tradable, just like electricity and other household services. This change will surely bring about a major paradigm shift in all stages of software development, as well as in its distribution and consumption.</p>
        <p>Whilst globalization brought about an increasing complexity and unpredictability to the marketplace, it surely opened the floodgates to a world of new and exciting possibilities. Opening trading possibilities between all corners of the world, businesses were streamlined to their core competencies, and other tasks delegated to other businesses to which these peripheral tasks were to them, their core competency. Businesses became lighter and more efficient, bold ideas kept in the drawer for years finally saw the light of day due to new outsourcing possibilities, new distribution channels and more flexible logistics.</p>
        <h4>Globalization hits the Software Industry (again!)</h4>
        <p>The exact same shift is happening in the software world, with the advent of <i>Cloud Computing</i>, the <i>Software-as-a-Service</i> paradigm, and the increasingly accelerated evolution of the technologies that support them. Everything is moving to the <i>Cloud</i>, and we are moving back to the old computer terminal days, but now not out of necessity, but due to the incredible advantages of <i>Cloud Computing</i>.</p>
        <p><i>Cloud Computing</i> is, philosophical ramblings apart, the outsourcing of computing and storage resources, as well as full fledged services to the Internet. As so eloquently stated in <i>Wikipedia</i> at the time of this post’s writing, a clearer definition would be the following:</p>
        <blockquote><p>Cloud Computing is Internet-based computing, whereby shared resources, software and information are provided to computers and other devices on-demand, like electricity. It is a paradigm shift following the mainframe and client-server shifts that preceded it. Details are abstracted from the users who no longer have need of, expertise in, or control over the technology infrastructure “in the cloud” that supports them.</p></blockquote>
        <p>Due to this shift, end-users are being stripped down to their core competencies as they’re becoming increasingly able to delegate all the setup and maintenance of their computer software by using software accessible via the <i>Internet</i> as if it were a service (hence the term <i>Software-as-a-Service</i>), with all the accessibility advantages that it brings.</p>
        <h4>Down with the Desktop, Yay to the Modular Web!</h4>
        <p>This shift, along with the growing infrastructures supporting it, is paving the way for a <i>modular web</i>, where applications will be able to cooperate with each other on a whole new level beyond anything ever done before, and bring about at a breakneck pace immeasurably valuable applications built on leveraging various applications and services in a synergistic fashion and by making the all too common process of reinventing the wheel a thing of the past.</p>
        <p>When we talk of these consequences, we are talking also about traditional desktop software eventually disappearing as a whole, leaving the computer with only a lightweight operating system  providing solely the functionality necessary to act as a gateway to the <i>Cloud</i>, where all data storage, retrieval and processing operations would take place. This vision, as that of a <i>modular web</i>, is also highly controversial, but bear in mind that in the past one could argue that there were technological barriers both in software and hardware that prevented such a change, but this is not the case nowadays.</p>
        <p>With browsers becoming lightning fast, and new technologies trying to bridge the gap between their sandboxed environment and the computer’s hardware, it is today possible to use the browser to deploy and run on the fly, something as demanding as a full-blown computer game. With upcoming standardizations and further backup from major industry players, this pre-meditated possibility will become completely ubiquitous (think about <i>Google</i>’s support of <i>HTML5</i> and its investment in <i>Chrome OS</i> as perhaps a validation of this vision).</p>
        <h4>What Does the Horoscope Tell Us?</h4>
        <p>As to the time frame within which these changes will occur, that’s unfortunately another story, and a more unpredictable one at that, since the behavior of a single human being is unpredictable enough, let alone the whole world’s collective behavior. But since this entire post is written with an arrogant mindset, let’s just say that this will happen much faster than people thought so a couple of years ago.</p>
        <p>Meanwhile, the <b>Colony</b> framework, the <b>Omni</b> service, and the ecosystem we are building around them, are being done with the presupposition that these transformations will inevitably take place, short of other unexpected technological or conceptual breakthroughs that could eventually render this vision obsolete.</p>
]]></content:encoded>
</item>

        
            <item>
<title>What Comes After The Radio Silence?</title>
<link>http://blog.hive.pt/posts/2</link>
<comments>http://blog.hive.pt/posts/2#comments-area</comments>
<pubDate>Sat, 20 Mar 2010 00:00:00 +0000</pubDate>
<dc:creator>tsilva</dc:creator>

<guid isPermaLink="false">http://blog.hive.pt/posts/2</guid>
<description><![CDATA[]]></description>
<content:encoded><![CDATA[        <p>…(radio silence)… (static)… and we’re back, with lots of news, assets and experience under our belts.</p>
        <p>It has been two years already, and in this time span we have developed an incredible amount of open-source technology (somewhere between 250.000 and 300.000 lines of code, which regardless of what these metrics may mean to you, is nevertheless a badge of the massive amount of work we have put into it) which has been until now, for various reasons, mostly dormant… and now the sleeping giant is waking up.</p>
        <h4>A Journey of a Thousand Miles Begins With a Single Step</h4>
            <p>Two years ago, there was a “itsy-bitsy” technical problem needing to be solved: migrating data from a legacy information system to a new one being developed by us. The solution was simple and straightforward, and its prescription was: understand the source data model, pick up a bunch of nails, and “hammer-up” a script to copy the data to the new one.</p>
            <p>“But why?” — asked the relentless blissfully ignorant kid within us. Why go through all the trouble just for this one single migration? Why not re-use it in potential future migrations for other deployments of the same system?</p>
            <p>Be it not for the miscellanea of customizations found in each deployment, this would be trivial. Each installation would require a new, but similar, migration script. Using a traditional development approach in order to solve this problem would be the same as shooting yourself in the foot, we would be wandering in spaghetti code land in no time. This problem was crying out for modularity, a concept we had learned back in college, but which had found its way to the back of our heads, not receiving the attention it probably deserved.</p>
            <p>Hence came about the inevitable dive and swim through the somewhat muddy waters of different technologies, paradigms, specifications, concepts, languages and all-things modularity related, from which <i>OSGi</i> stood apart as a major inspiration.</p>
        <h4>An <del>Un</del>Healthy Obsession With Modularity</h4>
            <p>Call it proactive laziness, or an avant-garde distaste for unnecessary complexity, but in the end, we set out to build our own modularity platform capable of providing us the code decoupling ease we required, while throwing away the behemoth that was the overhead of building modular applications with the platforms and accompanying resources available at that time.</p>
            <p>About four thousand lines of <i>Python</i> code later, there was file called “plugin_system.py” that took care of supporting the solution to the migration problem by allowing us to create a basic migration plugin, and later extending it with the additional logic necessary to migrate from installations with different customizations, without ever having to touch the original code.</p>
            <p>Then we created a console for that plugin system, and that was a plugin too. Then that console needed new commands, so we created new plugins to provide those commands. Then we wanted to access the console remotely, so we created a <i>XMPP</i> plugin, fed it the console plugin, and fooled around with the plugin system by issuing it commands via <i>Gmail</i> chat.</p>
            <p>This plugin development frenzy grew completely out of proportion. Plugins forced one to separate concerns, so each piece of code had a beginning, a middle and an end, instead of being an ever-expanding intertwine of different features whose development seems never-ending. The cherry on the top was that new and unexpected uses for previously developed plugins kept popping up, which made the development seem to have a cumulative effect regarding its end results.</p>
        <h4><del>Reinventing</del> Improving the Wheel</h4>
            <p>We were using a traditional <i>JBoss</i> stack to support the information system we were developing, while the ecosystem around the once lonely plugin system kept growing both in power and responsibility. Until one fateful summer day, a friend visited our headquarters, saw the project and asked why the hell we were using <i>JBoss</i> and not our plugin system… we had no real answer for that one…</p>
            <p>Long story short, we scrapped <i>JBoss</i> and moved everything to the plugin system, which meant replacing all the <i>Java</i> technologies we used in <i>JBoss</i> with their <i>Python</i> equivalents. The plugin system received another level of attention and started growing beyond anything previously imagined. Replacing existing technologies with home-made plugins that addressed the same problems became a trend by the way. While at first glance this move may seem like reinventing the wheel, and it was… our previous wheels were not modular, and these were.</p>
            <p>The plugin system stopped looking like a script, but more like a fully fledged development platform, due to the wide scope and number of the plugins we developed for it, which ranged all the way from an <i>ORM</i> to an <i>HTTP</i> server, slowly becoming a fully home-brewed enterprise stack.</p>
            <p>We had to give it a name, and after many not too bright attempts, we arrived at the name <b>Colony</b>, which may have seemed mildly lame at first, but now we wouldn’t call it anything else.</p>
        <h4>The Tao of Modularity</h4>
            <p>Every software project seems to grow quite fast in the beginning, and after a while stale its progress, due not only to the amount of code surpassing the amount of eyes available to read it, but mostly due to the intertwining of unrelated concerns that eventually finds its way into a solid architecture, mostly due to unexpected changes, melding it into a plate of spaghetti, making the small amount of eyes available still have to look at all code, therefore making further developments unsustainable.</p>
            <p>With the modularity paradigm supported and enforced by <b>Colony</b>, growth always seemed sustainable, because it was much simpler to devise architectures that were future-proof by following this Tao of programming. Designing plugins strongly encouraged thinking of their interface first and code their internals later, promoting a higher depth of thought that would later reveal itself as a high resilience to change, and a higher probability and ease of re-utilization in different contexts.</p>
        <h4>Quest for the Holy ERP</h4>
            <p>Megalomania set in again, and the humble information system project morphed into a quest for the <i>Software-as-a-Service Enterprise Resource Planning</i> System-to-Rule-them-All that would solve all problems harassing users of the <i>ERP</i> giants dominating the market: high acquisition, maintenance and customization costs, and low accessibility, amongst others.</p>
            <p><b>Colony</b> had to step up to this new goal, and so it did. If <b>Omni</b> was going to live in the browser, we needed not only modularity on the server-side, for the <i>ERP</i>’s data and logic, but also in the browser, to make the interface adaptable to each user and easily extendable through time, without ever needing to reload the browser page that hosted the application. We did this by porting <b>Colony</b> to <i>Javascript</i> so it could run in the browser, and we nicknamed this implementation <b>Colony Web</b>.</p>
            <p>Books shouldn’t be judged by their cover, but traditional <i>ERP</i> interfaces were… let’s say… ugly. We wanted to make ours lively, snazzy and full of life, so we looked for a <i>Javascript</i> widget library that would help us accomplish that, and found our way to <i>ExtJS</i>, which was awesome, and was part of <b>Omni</b> for a long time… but after diving too much into its core in order to customize it to our needs, we decided that it was becoming too much of an overhead, so we built our own widget library, which we call <b>Colony Web UI</b>.</p>
            <p>In the end, this quest brought forth a flourishing garden of new plugins for all purposes and tastes, ultimately spawning <b>Omni</b>, our flagship <i>Software-as-a-Service/Cloud Computing</i> service. A web service that can load/unload plugins on the fly without ever reloading the container browser page, and therefore a great target host for a new era of rich internet applications, making it pretty much like an operating system for the web (a rather crass metaphor), and leaving the information system itself as just a set of plugins that can be loaded in <b>Omni</b> like any other plugin bundle.</p>
        <h4>Now What?</h4>
            <p>At this point there’s not much left technology-wise that isn’t fully under our control. <b>Omni</b> is out in the wild and working successfully, we are currently smoothing the edges of the current features and of <b>Colony</b> as a consequence.</p>
            <p>Meanwhile, we started offering consulting services for potential clients looking to have interesting problems solved for a fair price, with our focus being on <i>SaaS</i>, <i>Social Networking</i>, <i>Mobile</i>, and <i>Cloud Computing</i>, as these are areas we have been in the trenches with throughout these years.</p>
]]></content:encoded>
</item>

        
    </channel>
</rss>
