<?xml version="1.0"?><feed xmlns:media="http://search.yahoo.com/mrss/" xmlns:gr="http://www.google.com/schemas/reader/atom/" xmlns:idx="urn:atom-extension:indexing" xmlns="http://www.w3.org/2005/Atom" idx:index="no" gr:dir="ltr"><!--
Content-type: Preventing XSRF in IE.

--><generator uri="http://www.google.com/reader">Google Reader</generator><id>tag:google.com,2005:reader/user/03056744841611626003/state/com.google/broadcast</id><link rel="hub" href="http://pubsubhubbub.appspot.com/"/><title>divoxx's shared items in Google Reader</title><gr:continuation>CNXW2Yfcn6gC</gr:continuation><link rel="self" href="http://www.google.com/reader/public/atom/user%2F03056744841611626003%2Fstate%2Fcom.google%2Fbroadcast"/><author><name>divoxx</name></author><updated>2011-10-01T17:39:43Z</updated><entry gr:crawl-timestamp-msec="1317490783502"><id gr:original-id="http://thechangelog.com/post/10872694552">tag:google.com,2005:reader/item/59172cf1c38d1d8a</id><category term="github"/><category term="ruby"/><category term="sinatra"/><category term="web"/><category term="evented"/><title type="html">Sinatra 1.3 is out!</title><published>2011-10-01T02:35:21Z</published><updated>2011-10-01T02:35:21Z</updated><link rel="alternate" href="http://feedproxy.google.com/~r/thechangelog/~3/ddybF76k0Q4/10872694552" type="text/html"/><summary xml:base="http://thechangelog.com/" type="html">&lt;a href="https://github.com/sinatra/sinatra"&gt;Sinatra 1.3 is out!&lt;/a&gt;: &lt;p&gt;Sinatra 1.3.0 is out with two big news items. The Chairman is now traveling with his own band. &lt;a href="https://github.com/sinatra/sinatra-contrib"&gt;Sinatra Contrib, the community-sourced collection of extensions&lt;/a&gt;, is now versioned with Sinatra itself, ensuring compatibility. Sinatra Contrib provides some niceties on top of Sinatra for common tasks like config files, &lt;code&gt;content_for&lt;/code&gt;, &lt;code&gt;respond_with&lt;/code&gt; and other things you might miss from Rails.&lt;/p&gt;

&lt;p&gt;Perhaps the bigger news is that Sinatra gigs can be streamed. No matter if you run evented servers like Thin, Rainbows! or Ebb or sequential servers like Unicorn, Passenger, or Mongrel, you have a single API:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;get &amp;#39;/&amp;#39; do
 stream do |out|
   out &amp;lt;&amp;lt; &amp;quot;It&amp;#39;s gonna be legen -\n&amp;quot;
   sleep 0.5
   out &amp;lt;&amp;lt; &amp;quot; (wait for it) \n&amp;quot;
   sleep 1
   out &amp;lt;&amp;lt; &amp;quot;- dary!\n&amp;quot;
 end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course, you’ll need an evented server to keep connections open to things like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set :server, :thin
connections = []

get &amp;#39;/&amp;#39; do
 # keep stream open
 stream(:keep_open) { |out| connections &amp;lt;&amp;lt; out }
end

post &amp;#39;/&amp;#39; do
 # write to all open streams
 connections.each { |out| out &amp;lt;&amp;lt; params[:message] &amp;lt;&amp;lt; &amp;quot;\n&amp;quot; }
 &amp;quot;message sent&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Smaller but just as cool changes include:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;&lt;code&gt;request.accept?&lt;/code&gt; for &lt;code&gt;Accept&lt;/code&gt; headers&lt;/li&gt;
&lt;li&gt;&lt;code&gt;informal?&lt;/code&gt;, &lt;code&gt;success?&lt;/code&gt;, &lt;code&gt;redirect?&lt;/code&gt; and &lt;code&gt;client_error?&lt;/code&gt; based on HTTP status code.&lt;/li&gt;
&lt;li&gt;Support for &lt;code&gt;If-Unmodified-Since&lt;/code&gt; header&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Check out the &lt;a href="http://www.sinatrarb.com/2011/09/30/sinatra-1.3.0"&gt;official announcement&lt;/a&gt; or the &lt;a href="https://github.com/sinatra/sinatra/blob/master/CHANGES"&gt;changelog&lt;/a&gt; for a complete list of updates. Congrats to &lt;a href="http://rkh.im/"&gt;Konstantin Haase&lt;/a&gt; and the other contributors who made this happen.&lt;/p&gt;&lt;div&gt;
&lt;a href="http://feeds.feedburner.com/~ff/thechangelog?a=ddybF76k0Q4:rcpddtjOE_o:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/thechangelog?d=yIl2AUoC8zA" border="0"&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/thechangelog?a=ddybF76k0Q4:rcpddtjOE_o:7Q72WNTAKBA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/thechangelog?d=7Q72WNTAKBA" border="0"&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/thechangelog?a=ddybF76k0Q4:rcpddtjOE_o:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/thechangelog?i=ddybF76k0Q4:rcpddtjOE_o:V_sGLiPBpWU" border="0"&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/thechangelog?a=ddybF76k0Q4:rcpddtjOE_o:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/thechangelog?d=qj6IDK7rITs" border="0"&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/thechangelog?a=ddybF76k0Q4:rcpddtjOE_o:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/thechangelog?i=ddybF76k0Q4:rcpddtjOE_o:gIN9vFwOqvQ" border="0"&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/thechangelog/~4/ddybF76k0Q4" height="1" width="1"&gt;</summary><author gr:unknown-author="true"><name>(author unknown)</name></author><gr:likingUser>09600878815550570378</gr:likingUser><gr:likingUser>02818161012133932591</gr:likingUser><gr:likingUser>09859392453417972285</gr:likingUser><gr:likingUser>03676399070155537502</gr:likingUser><gr:likingUser>08568509925380106333</gr:likingUser><gr:likingUser>08886010528081733768</gr:likingUser><gr:likingUser>03526858162053867652</gr:likingUser><gr:likingUser>04166295479936949727</gr:likingUser><gr:likingUser>11268689969169739024</gr:likingUser><gr:likingUser>08353054291962603524</gr:likingUser><source gr:stream-id="feed/http://feeds.feedburner.com/thechangelog"><id>tag:google.com,2005:reader/feed/http://feeds.feedburner.com/thechangelog</id><title type="html">The Changelog - Open Source moves fast. Keep up.</title><link rel="alternate" href="http://thechangelog.com/" type="text/html"/></source></entry><entry gr:crawl-timestamp-msec="1316204604690"><id gr:original-id="">tag:google.com,2005:reader/item/c087164df7a99f00</id><title type="html">Practicing Ruby - Issue #23: SOLID Design Principles</title><published>2011-09-16T20:23:24Z</published><updated>2011-09-16T20:23:24Z</updated><link rel="alternate" href="http://blog.rubybestpractices.com/posts/gregory/055-issue-23-solid-design.html" type="text/html"/><link rel="related" href="http://blog.rubybestpractices.com/posts/gregory/055-issue-23-solid-design.html" title="blog.rubybestpractices.com"/><author gr:unknown-author="true"><name>(author unknown)</name></author><source gr:stream-id="user/03056744841611626003/source/com.google/link"><id>tag:google.com,2005:reader/user/03056744841611626003/source/com.google/link</id><title type="html">blog.rubybestpractices.com</title><link rel="alternate" href="http://blog.rubybestpractices.com/posts/gregory/055-issue-23-solid-design.html" type="text/html"/></source></entry><entry gr:crawl-timestamp-msec="1314218582448"><id gr:original-id="http://www.rubyflow.com/items/6402-valium-the-cure-for-your-activerecord-instantiation-woes">tag:google.com,2005:reader/item/39c6e30be18c39f9</id><title type="html">Valium: The Cure for Your ActiveRecord Instantiation Woes</title><published>2011-08-24T20:01:31Z</published><updated>2011-08-24T20:01:31Z</updated><link rel="alternate" href="http://feedproxy.google.com/~r/Rubyflow/~3/PNziDpwg9l4/6402-valium-the-cure-for-your-activerecord-instantiation-woes" type="text/html"/><summary xml:base="http://www.rubyflow.com/" type="html">I just released a tiny little gem called Valium that makes it simpler to get at your attribute values (properly cast and deserialized) without going through the pain of ActiveRecord instantiation. &lt;a href="http://metautonomo.us/2011/08/24/the-cure-for-activerecord-instantiation-anxiety-valium/"&gt;Here's the blog post.&lt;/a&gt;&lt;div&gt;
&lt;a href="http://feeds.feedburner.com/~ff/Rubyflow?a=PNziDpwg9l4:NhN3CQvM5kg:3H-1DwQop_U"&gt;&lt;img src="http://feeds.feedburner.com/~ff/Rubyflow?i=PNziDpwg9l4:NhN3CQvM5kg:3H-1DwQop_U" border="0"&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/Rubyflow/~4/PNziDpwg9l4" height="1" width="1"&gt;</summary><author gr:unknown-author="true"><name>(author unknown)</name></author><gr:likingUser>18394722032739442715</gr:likingUser><source gr:stream-id="feed/http://feeds2.feedburner.com/Rubyflow"><id>tag:google.com,2005:reader/feed/http://feeds2.feedburner.com/Rubyflow</id><title type="html">RubyFlow</title><link rel="alternate" href="http://www.rubyflow.com/" type="text/html"/></source></entry><entry gr:crawl-timestamp-msec="1313429256480"><id gr:original-id="http://florianhanke.com/blog/2011/08/15/picky-30-its-all-ruby-part-1">tag:google.com,2005:reader/item/dacc8a223f528531</id><title type="html">Picky 3.0: It&amp;#39;s all Ruby! (Part 1)</title><published>2011-08-14T22:00:00Z</published><updated>2011-08-14T22:00:00Z</updated><link rel="alternate" href="http://florianhanke.com/blog/2011/08/15/picky-30-its-all-ruby-part-1.html" type="text/html"/><content xml:base="http://florianhanke.com/blog/" type="html">&lt;p&gt;This is a post in the &lt;a href="http://florianhanke.com/picky/"&gt;Picky&lt;/a&gt; series on its workings.&lt;/p&gt;
&lt;p&gt;This is a quick look at the customizability of Picky in the upcoming 3.0 release.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://florianhanke.com/blog/#part1"&gt;Too much intro? Jump down to the code!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://florianhanke.com/blog/#summary"&gt;Even too much code? Jump down to the summary!&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Intro&lt;/h2&gt;
&lt;p&gt;Remember when you wrote your first Ruby code?&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bananas.each do { |banana| banana.peel }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="http://groups.csail.mit.edu/mac/classes/6.001/abelson-sussman-lectures/wizard.jpg" alt=""&gt;&lt;/p&gt;
&lt;p&gt;You probably felt more powerful that the freakish wizard at the beginning of &lt;a href="http://groups.csail.mit.edu/mac/classes/6.001/abelson-sussman-lectures/"&gt;Structure &amp;amp; Interpretation of Computer Programs&lt;/a&gt; by Abelson and Sussman&lt;/p&gt;
&lt;p&gt;Finally, no more initializing an anonymous class and overriding its methods just to traverse an array like a mere acolyte.&lt;/p&gt;
&lt;p&gt;Accusatorily, you shake your magic wand at me. Yes, we can even write&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bananas.each &amp;amp;:peel&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The point here is:
Ruby is powerful. Or more importantly: Ruby does not take away the possibilities. There is a way, always, whereas with other, more restrictive languages I usually hit a wall and then have a feeling of powerlessness wash over me.&lt;/p&gt;
&lt;p&gt;I don’t know you, but chances are, you feel the same.&lt;/p&gt;
&lt;h2&gt;Powerlessness and the Power of Ruby&lt;/h2&gt;
&lt;p&gt;A quick story:
Back when I still worked with Java Lucene servers, I found myself often deep in rather big &lt;span&gt;XML&lt;/span&gt; files.&lt;/p&gt;
&lt;p&gt;The way it worked is that you wrote down a string on what tokenizer you’d like to use. For example, &lt;code&gt;"whitespace"&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Lo and behold, the beast roared and duly split search text on whitespaces.&lt;/p&gt;
&lt;p&gt;Sometimes a typo creeped in: &lt;code&gt;"whitspace"&lt;/code&gt;. The beast just lifted an eyebrow and continued doing… nothing.&lt;/p&gt;
&lt;p&gt;This is bad. Why?&lt;/p&gt;
&lt;p&gt;Strings are the weakest of command words. If you have to step down from a type down to a String you have already lost.&lt;/p&gt;
&lt;p&gt;You have just lost a lot of information that only a type can carry.&lt;/p&gt;
&lt;p&gt;More often than not – since you usually needed a very specific sort of tokenizer for that given project – I was not quite happy with any of the tokenizers.&lt;/p&gt;
&lt;p&gt;It was time to leave the world of &lt;span&gt;XML&lt;/span&gt; to the world of Java classes. This was not acolyte school anymore. This was the “Dark Forest”, with creepy trees and bugs lurking left and right.&lt;/p&gt;
&lt;p&gt;After valiantly capturing a tokenizer you dragged your ungodly creation out of the forest back to the acolyte school to then proudly write its name down on the &lt;span&gt;XML&lt;/span&gt; scroll: &lt;code&gt;"com.florianhanke.tokenizers.NotQuiteAWhitespaceTokenizer"&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Beautiful *cough*&lt;/p&gt;
&lt;p&gt;Of course, now that you know Ruby, you’d rather use objects than Strings.&lt;/p&gt;
&lt;p&gt;Let’s leave the world of wizards and beasts and enter the land of rainbows and rubies.&lt;/p&gt;
&lt;h2&gt;Part I: Derived Indexes.&lt;/h2&gt;
&lt;p&gt;Indexing is very customizable in Picky.&lt;/p&gt;
&lt;p&gt;Most search engines use some sort of &lt;a href="http://en.wikipedia.org/wiki/Inverted_index"&gt;inverted index&lt;/a&gt;. Picky also does that. In addition, it generates 3 other derived indexes from that inverted index.&lt;/p&gt;
&lt;p&gt;These generators can be passed into a&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;category   :title,
           weights:    Picky::Weights::Logarithmic.new,            # Default
           partial:    Picky::Partial::Substring.new(:from =&amp;gt; -3), # Default
           similarity: Picky::Similarity::DoubleMetaphone.new(2)   # Default is ::None.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s look at the inverted index first:&lt;/p&gt;
&lt;h2&gt;Inverted Index&lt;/h2&gt;
&lt;p&gt;An &lt;a href="http://en.wikipedia.org/wiki/Inverted_index"&gt;inverted index&lt;/a&gt; in Picky is simply a Hash that consists of &lt;code&gt;:symbols =&amp;gt; [ids]&lt;/code&gt;. For example if we have things like&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Thing(id: 1, text: "Hello Picky")
Thing(id: 2, text: "Hello!")
Thing(id: 3, text: "Hello, hello.")
Thing(id: 5, text: "PICKY")
Thing(id: 11, text: "Picky, hello.")&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;an inverted index would probably look like this&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  :hello =&amp;gt; [1, 3, 2, 11],
  :picky =&amp;gt; [1, 5, 11]
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this case, the things we indexed had “Hello” and “Picky” in the texts. Some had both, some only one of these.&lt;/p&gt;
&lt;p&gt;If you search for &lt;code&gt;"picky"&lt;/code&gt;, you will get &lt;code&gt;[1, 5, 11]&lt;/code&gt;, since – simplified – Picky does a hash lookup.
That means when you search for just &lt;code&gt;"pic"&lt;/code&gt;, Picky will not find anything.&lt;/p&gt;
&lt;p&gt;For that it needs a partial index.&lt;/p&gt;
&lt;h2&gt;Partial Index&lt;/h2&gt;
&lt;p&gt;A partial index is an index where we also find pieces of the words above. Say, we want to also find &lt;code&gt;[1, 5, 11]&lt;/code&gt;
when looking for &lt;code&gt;"pic"&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;What you need to to is provide Picky with a generator that generates a new inverted index just for partial matches.&lt;/p&gt;
&lt;p&gt;Picky already provides one:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;partial: Picky::Partial::Substring.new(:from =&amp;gt; -3)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This one generates the following index from the above one:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  :hello =&amp;gt; [1, 3, 2, 11],
  :hell =&amp;gt; [1, 3, 2, 11],
  :hel =&amp;gt; [1, 3, 2, 11],
  :picky =&amp;gt; [1, 5, 11],
  :pick =&amp;gt; [1, 5, 11],
  :pic =&amp;gt; [1, 5, 11]
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Incidentally, this &lt;code&gt;(from: -3)&lt;/code&gt; is the default one.&lt;/p&gt;
&lt;p&gt;If you don’t want a partial index, use &lt;code&gt;partial: Picky::Partial::None.new&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, this might not be what you want. How do you write your own?&lt;/p&gt;
&lt;h3&gt;Your own?&lt;/h3&gt;
&lt;p&gt;All derived indexes implement the method &lt;code&gt;#generate_from(inverted_index)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A partial generator should return an inverted index with &lt;code&gt;Symbols&lt;/code&gt; as keys and id arrays as values.&lt;/p&gt;
&lt;p&gt;Read more about it in &lt;a href="http://florianhanke.com/2011/01/17/searching-with-picky-partial-search.html"&gt;Searching with Picky Partial Search&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Also, who said they need to be actual partials? Go wild!
(And remember that Picky looks in the partial indexes when a &lt;code&gt;*&lt;/code&gt;
is used in the queries or on the last word of a query, the implicit &lt;code&gt;*&lt;/code&gt; at the end)&lt;/p&gt;
&lt;p&gt;When would you use this? For example, you’d like to have partial searches, but from the front. So, &lt;code&gt;picky&lt;/code&gt;, &lt;code&gt;icky&lt;/code&gt;, &lt;code&gt;cky&lt;/code&gt;, &lt;code&gt;ky&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; would match.&lt;/p&gt;
&lt;p&gt;Next up is weighing symbols.&lt;/p&gt;
&lt;h2&gt;Weight Index&lt;/h2&gt;
&lt;p&gt;Weights are assigned to all the symbols and are used to weigh the results.&lt;/p&gt;
&lt;p&gt;A weight generator also implements &lt;code&gt;#generate_from(inverted_index)&lt;/code&gt;, but should not return id arrays as values of the inverted index, but weights.&lt;/p&gt;
&lt;p&gt;So, a weight index derived from the above inverted index might look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  :hello =&amp;gt; 0.6,
  :picky =&amp;gt; 0.48
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The default weight index generator is &lt;code&gt;Picky::Weights::Default&lt;/code&gt;, which is equal to the &lt;code&gt;Picky::Weights::Logarithmic&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you don’t want all indexed words to be equally treated, you’d pass in something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class EqualWeightsForAll

  def generate_from inverted_index
    equality = {}
    inverted_index.each do |sym, ids|
      equality[sym] = 0
    end
    equality
  end

end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When would you use this? For example, you’d like to have words that are used more often be more important. You could implement a &lt;code&gt;LinearWeight&lt;/code&gt; – the weight is equal to the size of the ids array.&lt;/p&gt;
&lt;p&gt;That’s it!&lt;/p&gt;
&lt;h2&gt;Similarity Index&lt;/h2&gt;
&lt;p&gt;The similarity index should have the structure &lt;code&gt;:encoded_symbol =&amp;gt; :original_symbol_from_inverted_index&lt;/code&gt;. For example, the original could have been encoded with the metaphone algorithm.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  :HL =&amp;gt; [:hello]
  :PK =&amp;gt; [:picky]
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;:HL&lt;/code&gt; is the encoded symbol for &lt;code&gt;:hello&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To generate this index, just offer a &lt;code&gt;generate_from(inverted_index)&lt;/code&gt; and a &lt;code&gt;encoded(original_symbol) # =&amp;gt; encoded_symbol&lt;/code&gt; method.&lt;/p&gt;
&lt;p&gt;If you have a phonetic encoding, you could just implement &lt;code&gt;encoded(original_symbol)&lt;/code&gt; and derive from &lt;code&gt;Picky::Generators::Similarity::Phonetic&lt;/code&gt;, like in &lt;a href="http://github.com/floere/picky/blob/master/server/lib/picky/generators/similarity/metaphone.rb"&gt;this example&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When would you use this? For example, you’d like to implement a chinese tone similarity algorithm instead of the more western oriented ones that come with Picky.&lt;/p&gt;
&lt;p&gt;(If you do, please send us a pull request)&lt;/p&gt;
&lt;p&gt;What can I do again?&lt;/p&gt;
&lt;h2&gt;In short&lt;/h2&gt;
&lt;p&gt;Picky offers you to inject your own functionality.&lt;/p&gt;
&lt;p&gt;You pass options &lt;code&gt;partial&lt;/code&gt;, &lt;code&gt;weights&lt;/code&gt;, and &lt;code&gt;similarity&lt;/code&gt; to the &lt;code&gt;category&lt;/code&gt; method inside an index block. You give it an instance either of the built-in types or create your own.&lt;/p&gt;
&lt;p&gt;Like so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;category   :title,
           weights:    Picky::Weights::Logarithmic.new,            # Default
           partial:    Picky::Partial::Substring.new(:from =&amp;gt; -3), # Default
           similarity: Picky::Similarity::DoubleMetaphone.new(2)   # Default is ::None.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or with your own:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;category   :title,
           weights:    AllWeightsAreOne.new,            # Default
           partial:    StarInFrontSubstringPartial.new, # Default
           similarity: JapaneseSimilarity.new           # Default is ::None.&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Creating your own. How?&lt;/h3&gt;
&lt;h4&gt;Partial&lt;/h4&gt;
&lt;p&gt;Implement method &lt;code&gt;#generate_from(inverted_index)&lt;/code&gt; which returns an inverted index with &lt;code&gt;{ :partial_symbol =&amp;gt; [ids array] }&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;Weights&lt;/h4&gt;
&lt;p&gt;Implement method &lt;code&gt;#generate_from(inverted_index)&lt;/code&gt; which returns an inverted index with &lt;code&gt;{ :original_symbol =&amp;gt; some_weight_number }&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;Similarity&lt;/h4&gt;
&lt;p&gt;Implement method &lt;code&gt;#generate_from(inverted_index)&lt;/code&gt; which returns an inverted index with &lt;code&gt;{ :encoded_symbol =&amp;gt; [:original_sym1, :original_sym2] }&lt;/code&gt;
and also implements &lt;code&gt;encoded(original_symbol)&lt;/code&gt; returning an encoded symbol. The encoded symbol should correspond to the one in the returned inverted index.&lt;/p&gt;
&lt;h2&gt;Next up?&lt;/h2&gt;
&lt;p&gt;This is how you customize the derived indexes.&lt;/p&gt;
&lt;p&gt;There’s much more. Next time we will be writing about tokenizing and character substituters!&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;So we’ve seen&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;that Picky is all Ruby, all the time.&lt;/li&gt;
	&lt;li&gt;that you can customize the indexes a lot.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Hope you learnt something new!&lt;/p&gt;</content><author gr:unknown-author="true"><name>(author unknown)</name></author><gr:likingUser>05124856213844841788</gr:likingUser><source gr:stream-id="feed/http://florianhanke.com/blog/atom.xml"><id>tag:google.com,2005:reader/feed/http://florianhanke.com/blog/atom.xml</id><title type="html">code is code</title><link rel="alternate" href="http://florianhanke.com/blog/" type="text/html"/></source></entry><entry gr:crawl-timestamp-msec="1312213014154"><id gr:original-id="http://www.rubyflow.com/items/6288-making-activerecord-models-thin">tag:google.com,2005:reader/item/4450713eaba19d1f</id><title type="html">Making ActiveRecord Models Thin</title><published>2011-08-01T12:39:34Z</published><updated>2011-08-01T12:39:34Z</updated><link rel="alternate" href="http://feedproxy.google.com/~r/Rubyflow/~3/xB9jQlwWBW8/6288-making-activerecord-models-thin" type="text/html"/><summary xml:base="http://www.rubyflow.com/" type="html">Here are my thoughts about separating business logic from the persistence: &lt;a href="http://solnic.eu/2011/08/01/making-activerecord-models-thin.html"&gt;Making ActiveRecord Models Thin&lt;/a&gt;. Let's have a discussion!&lt;div&gt;
&lt;a href="http://feeds.feedburner.com/~ff/Rubyflow?a=xB9jQlwWBW8:xsDdpv59Gqw:3H-1DwQop_U"&gt;&lt;img src="http://feeds.feedburner.com/~ff/Rubyflow?i=xB9jQlwWBW8:xsDdpv59Gqw:3H-1DwQop_U" border="0"&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/Rubyflow/~4/xB9jQlwWBW8" height="1" width="1"&gt;</summary><author gr:unknown-author="true"><name>(author unknown)</name></author><source gr:stream-id="feed/http://feeds2.feedburner.com/Rubyflow"><id>tag:google.com,2005:reader/feed/http://feeds2.feedburner.com/Rubyflow</id><title type="html">RubyFlow</title><link rel="alternate" href="http://www.rubyflow.com/" type="text/html"/></source></entry><entry gr:crawl-timestamp-msec="1311702186782"><id gr:original-id="http://robots.thoughtbot.com/post/8087279685">tag:google.com,2005:reader/item/5b658e9e558361e2</id><category term="testing"/><category term="tdd"/><category term="capybara"/><category term="webrat"/><category term="ruby on rails"/><title type="html">Use Capybara on any HTML fragment or page</title><published>2011-07-26T15:21:00Z</published><updated>2011-07-26T15:21:00Z</updated><link rel="alternate" href="http://feedproxy.google.com/~r/GiantRobotsSmashingIntoOtherGiantRobots/~3/2SU0lXMQDUs/8087279685" type="text/html"/><summary xml:base="http://robots.thoughtbot.com/" type="html">&lt;p&gt;&lt;img src="https://img.skitch.com/20110726-narpmkn94319a161keubi15yyu.png" alt="capybaras are pretty classy"&gt;&lt;/p&gt;

&lt;p&gt;I was upgrading &lt;a href="http://github.com/rubygems/gemcutter"&gt;Gemcutter&lt;/a&gt; to Cucumber and Capybara 1.0 yesterday from Webrat (a change long overdue!), and I discovered a neat little class within Capybara that is worth sharing. Basically, since I was moving the app from Webrat, matchers like &lt;code&gt;assert_contain&lt;/code&gt; and &lt;code&gt;assert_have_selector&lt;/code&gt; are no longer available. Capybara’s &lt;code&gt;Node&lt;/code&gt; class has a great &lt;code&gt;Matchers&lt;/code&gt; mixin with &lt;a href="http://rdoc.info/gems/capybara/1.0.0/Capybara/Node/Matchers"&gt;tons of goodies&lt;/a&gt; that can be used like so, in RSpec:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;page.should have_content("This should be on the page")
page.should have_selector("a[href='http://thoughtbot.com']")
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Great, but how does one use that in functional/controller tests?&lt;/p&gt;

&lt;p&gt;Enter &lt;code&gt;Capybara::Node::Simple&lt;/code&gt;, which I found purely by chance when source diving. This class’ &lt;a href="http://rdoc.info/gems/capybara/1.0.0/Capybara/Node/Simple"&gt;docs&lt;/a&gt; proclaim its usefulness:&lt;/p&gt;

&lt;blockquote&gt;It is useful in that it does not require a session, an application or a driver, but can still use Capybara’s finders and matchers on any string that contains HTML&lt;/blockquote&gt;

&lt;p&gt;Bingo! Now, how to use in our test suite? We’re still on Test::Unit for Gemcutter, so I had to do the following in &lt;code&gt;test/test_helper.rb&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Test::Unit::TestCase
  def page
    Capybara::Node::Simple.new(@response.body)
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now the Gemcutter test suite can do assertions like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;assert page.has_content?("Rails (3.0.9)")
assert page.has_selector?("a[href='/gems/rails/versions/3.0.9']")
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The whole diff is &lt;a href="https://github.com/rubygems/gemcutter/commit/1a6a38c8d7515b7a00d4749fa1f3c638fb7e4a32"&gt;on GitHub&lt;/a&gt; if you’d like to see all of the changes of moving our functional tests from Webrat to Capybara.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://thoughtbot.com/about/#gberkewilliams"&gt;Gabe&lt;/a&gt; also found out that there’s also a shortcut in Capybara for creating a &lt;code&gt;Simple&lt;/code&gt;: &lt;code&gt;Capybara.string&lt;/code&gt;. The &lt;a href="http://rdoc.info/gems/capybara/1.0.0/Capybara#string-class_method"&gt;docs&lt;/a&gt; for this show that it’s basically sugar on top of the &lt;code&gt;Simple&lt;/code&gt; initializer:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;node = Capybara.string &amp;lt;&amp;lt;-HTML
  &lt;ul&gt;
    &lt;li&gt;Home&lt;/li&gt;
    &lt;li&gt;Projects&lt;/li&gt;
  &lt;/ul&gt;
HTML

node.find(&amp;#39;#projects&amp;#39;).text # =&amp;gt; &amp;#39;Projects&amp;#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I think this pattern is really useful not just for upgrading suites from Webrat, but really anywhere you have an HTML fragment or string that you’d like to use Capybara’s matchers on.&lt;/p&gt;</summary><author gr:unknown-author="true"><name>(author unknown)</name></author><gr:likingUser>07699135848086706697</gr:likingUser><gr:likingUser>16054984645934374697</gr:likingUser><gr:likingUser>04518201312597607447</gr:likingUser><gr:likingUser>00556881696561418797</gr:likingUser><gr:likingUser>03303333809845164956</gr:likingUser><gr:likingUser>00453812157463738677</gr:likingUser><gr:likingUser>04490022177101945707</gr:likingUser><gr:likingUser>11641427018177182548</gr:likingUser><gr:likingUser>01546983059174788148</gr:likingUser><gr:likingUser>04321236261124159122</gr:likingUser><gr:likingUser>18046305070971126053</gr:likingUser><gr:likingUser>00662757998069264832</gr:likingUser><source gr:stream-id="feed/http://feeds.feedburner.com/GiantRobotsSmashingIntoOtherGiantRobots"><id>tag:google.com,2005:reader/feed/http://feeds.feedburner.com/GiantRobotsSmashingIntoOtherGiantRobots</id><title type="html">giant robots smashing into other giant robots</title><link rel="alternate" href="http://robots.thoughtbot.com/" type="text/html"/></source></entry><entry gr:crawl-timestamp-msec="1311593144798"><id gr:original-id="tag:blog.codegram.com,2005:Post/21">tag:google.com,2005:reader/item/63d6458d621661a8</id><title type="html">Rack-webconsole, a Ruby/Rails console inside your browser</title><published>2011-07-25T00:00:00Z</published><updated>2011-07-25T13:37:15Z</updated><link rel="alternate" href="http://feedproxy.google.com/~r/codegram/~3/LSXnmfGjsAQ/rack-webconsole-a-rubyrails-console-inside-your-browser" type="text/html"/><content xml:base="http://blog.codegram.com/" xml:lang="en-US" type="html">&lt;pre&gt;&lt;code&gt;"Wouldn't it be nice to have an in-browser console for a Rails application?"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The funniest afternoons tend to start with questions like this.&lt;/p&gt;

&lt;p&gt;And why stop at Rails? Let's build a Rack middleware and make it real for
Sinatra, Padrino and other Rack web frameworks!&lt;/p&gt;

&lt;h3&gt;Introducing rack-webconsole&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://codegram.github.com/rack-webconsole"&gt;Rack-webconsole&lt;/a&gt; is a Rack middleware that enhances your development experience
providing a JavaScript-powered bridge to your Ruby application backend.&lt;/p&gt;

&lt;p&gt;With it you can interact with your database and explore the runtime
environment from within the browser. Although it should be used mainly in
development environments, I personally think it could be a useful tool for
staging as well. Avoids the pain in the ass of interacting with some console
over an SSH session :)&lt;/p&gt;

&lt;p&gt;Here you have a little video showing how it works (&lt;strong&gt;watch in HD, otherwise you won't see
the tiny letters&lt;/strong&gt;!):&lt;/p&gt;

&lt;iframe style="margin:0px auto" width="700" height="510" src="http://www.youtube.com/embed/yKK5J01Dqts?hd=1" frameborder="0"&gt;&lt;/iframe&gt;


&lt;p&gt;Built from the ground up to be Rack-compliant, it has pretty much no
configuration (other than including it in your Gemfile). So, let's give it a try:&lt;/p&gt;

&lt;div&gt;&lt;h5&gt;Gemfile&lt;/h5&gt;&lt;div&gt;
  &lt;div&gt;&lt;pre&gt;gem &lt;span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;rack-webconsole&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Rack-webconsole &lt;strong&gt;needs JQuery&lt;/strong&gt;. If you are using Rails 3, JQuery is loaded by
default. In case you don't want to use JQuery in your application,
&lt;strong&gt;rack-webconsole can inject it for you&lt;/strong&gt; only when it needs it. To do that you
should put this line somewhere in your application (a Rails initializer, or
some configuration file):&lt;/p&gt;

&lt;div&gt;&lt;div&gt;
  &lt;div&gt;&lt;pre&gt;&lt;span&gt;Rack&lt;/span&gt;::&lt;span&gt;Webconsole&lt;/span&gt;.inject_jquery = &lt;span&gt;true&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;If you are using Rails 3, you are done. Rack-webconsole comes with a Railtie
that automatically injects the gem into your middleware chain, and that's it!&lt;/p&gt;

&lt;p&gt;To fire up the console, &lt;strong&gt;just press the ` (backtick) key&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;And in case you are a Sinatra or Padrino user, you only have to specify that
you want to use this middleware:&lt;/p&gt;

&lt;div&gt;&lt;h5&gt;sinatra_or_padrino_app.rb&lt;/h5&gt;&lt;div&gt;
  &lt;div&gt;&lt;pre&gt;require &lt;span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;sinatra&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;/span&gt;
require &lt;span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;rack/webconsole&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;/span&gt;

&lt;span&gt;class&lt;/span&gt; &lt;span&gt;MySinatraApp&lt;/span&gt; &amp;lt; &lt;span&gt;Sinatra&lt;/span&gt;::&lt;span&gt;Application&lt;/span&gt;
  use &lt;span&gt;Rack&lt;/span&gt;::&lt;span&gt;Webconsole&lt;/span&gt;
  &lt;span&gt;\&lt;/span&gt;&lt;span&gt;# . . .&lt;/span&gt;
&lt;span&gt;end&lt;/span&gt;

&lt;span&gt;class&lt;/span&gt; &lt;span&gt;SamplePadrino&lt;/span&gt; &amp;lt; &lt;span&gt;Padrino&lt;/span&gt;::&lt;span&gt;Application&lt;/span&gt;
  use &lt;span&gt;Rack&lt;/span&gt;::&lt;span&gt;Webconsole&lt;/span&gt;
  &lt;span&gt;\&lt;/span&gt;&lt;span&gt;# . . .&lt;/span&gt;
&lt;span&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Manually requiring &lt;code&gt;rack-webconsole&lt;/code&gt; is only needed if you are not using
Bundler.setup to initialize your dependencies in the app.&lt;/p&gt;

&lt;p&gt;You can check out the &lt;a href="http://github.com/codegram/rack-webconsole"&gt;github repo here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Behind the scenes&lt;/h3&gt;

&lt;p&gt;TL;DR: The idea behind rack-webconsole is simple: client-side JavaScript
communicating with an IRB-esque server-side API which maintains state (i.e.
local variables) across requests. The funny part it&amp;#39;s all implemented behind a
single Rack middleware, in that 90&amp;#39;s Plug &amp;amp; Play™ sense.&lt;/p&gt;

&lt;p&gt;For those who are curious, let's do a bit more of an in-depth explanation.
Let's start with what Rack applications and middlewares are.&lt;/p&gt;

&lt;h3&gt;Rack applications and middlewares&lt;/h3&gt;

&lt;p&gt;As the &lt;a href="http://rack.rubyforge.org/doc/files/SPEC.html"&gt;Rack specification says&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;A Rack application is a Ruby object that respond to `call`. It takes
exactly one argument, the environment, and returns an Array of exactly
three values: the status, the headers, and the body.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As an example, the following Ruby object is a fully-compliant Rack application:&lt;/p&gt;

&lt;div&gt;&lt;div&gt;
  &lt;div&gt;&lt;pre&gt;lambda { |env| [&lt;span&gt;200&lt;/span&gt;, {&lt;span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Content-Type&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;/span&gt; =&amp;gt; &lt;span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;text/plain&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;/span&gt;}, [&lt;span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;microsoft is so cool&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;/span&gt;]] }&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;A Rack middleware is just a normal Rack application that is initialized from another Rack application and may manipulate its output (by output I mean
status, headers or body). For example, let's build a middleware that filters
gross words from the body:&lt;/p&gt;

&lt;div&gt;&lt;div&gt;
  &lt;div&gt;&lt;pre&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;GrossFilter&lt;/span&gt;
  &lt;span&gt;\&lt;/span&gt;&lt;span&gt;# This is the Rack application from which we take the response.&lt;/span&gt;
  &lt;span&gt;def&lt;/span&gt; &lt;span&gt;initialize&lt;/span&gt;(app)
    &lt;span&gt;@app&lt;/span&gt; = app
  &lt;span&gt;end&lt;/span&gt;

  &lt;span&gt;def&lt;/span&gt; &lt;span&gt;call&lt;/span&gt;(env)
    status, headers, body = &lt;span&gt;@app&lt;/span&gt;.call(env) &lt;span&gt;\&lt;/span&gt;&lt;span&gt;# Get the original response&lt;/span&gt;

    &lt;span&gt;\&lt;/span&gt;&lt;span&gt;# Filter out gross words from the body&lt;/span&gt;
    modified_body = body.map &lt;span&gt;do&lt;/span&gt; |response_line|
      response_line.gsub(&lt;span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;microsoft&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;/span&gt;)
    &lt;span&gt;end&lt;/span&gt;

    &lt;span&gt;\&lt;/span&gt;&lt;span&gt;# Return the modified response&lt;/span&gt;
    [status, headers, modified_body]
  &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;On every request, our middleware chain will look like this:&lt;/p&gt;

&lt;p style="overflow:hidden;text-align:center"&gt;
   &lt;img src="http://f.cl.ly/items/0N3V033x0t0d3N1o1C1h/middleware_chain.png" style="float:none"&gt;
&lt;/p&gt;


&lt;h3&gt;Rack-webconsole internals&lt;/h3&gt;

&lt;p&gt;Rack-webconsole is a middleware that hides two different middlewares inside:
the asset injecter and the server-side console service.&lt;/p&gt;

&lt;p&gt;When the browser is requesting an HTML view, the asset injecter injects the
console HTML, CSS and JavaScript code in the view.&lt;/p&gt;

&lt;p&gt;Then, whenever the client-side JavaScript performs an AJAX call to the
server-side console (in path '/webconsole'), the server-side console returns
evaluated Ruby as JSON.&lt;/p&gt;

&lt;p style="overflow:hidden;text-align:center"&gt;
  &lt;img src="http://f.cl.ly/items/2G3V210H2J0u2J0G140r/rack-webconsole_internals.png" style="float:none"&gt;
&lt;/p&gt;


&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Rack middlewares are simple yet powerful tools worth adding to your stack. But
we just saw they are not only valuable in production! Can you think of other
development-oriented tools that could fit as a nice, pluggable Rack middleware?
Now you can get an idea of how simple it is to write them :)&lt;/p&gt;
&lt;img src="http://feeds.feedburner.com/~r/codegram/~4/LSXnmfGjsAQ" height="1" width="1"&gt;</content><author><name>Josep M. Bach</name></author><gr:likingUser>04518201312597607447</gr:likingUser><gr:likingUser>16128411065016044828</gr:likingUser><gr:likingUser>03858904182124437666</gr:likingUser><gr:likingUser>09925242124559656076</gr:likingUser><source gr:stream-id="feed/http://blog.codegram.com/feed.atom"><id>tag:google.com,2005:reader/feed/http://blog.codegram.com/feed.atom</id><title type="html">Codegram Blog</title><link rel="alternate" href="http://blog.codegram.com" type="text/html"/></source></entry><entry gr:crawl-timestamp-msec="1308752841904"><id gr:original-id="http://www.rubyflow.com/items/6103-let-and-nested-describe-context-blocks">tag:google.com,2005:reader/item/4c7050bc3be1282a</id><title type="html">let and nested describe/context blocks</title><published>2011-06-21T19:00:01Z</published><updated>2011-06-21T19:00:01Z</updated><link rel="alternate" href="http://feedproxy.google.com/~r/Rubyflow/~3/c09kT8bR-tk/6103-let-and-nested-describe-context-blocks" type="text/html"/><summary xml:base="http://www.rubyflow.com/" type="html">Over on the &lt;a href="http://napkin.highgroove.com"&gt;Highgroove blog&lt;/a&gt;, I posted a small tip about using &lt;a href="http://napkin.highgroove.com/articles/2011/06/21/rspec-tip-let-and-nested-describe-context-blocks"&gt;let and nested describe/context blocks with RSpec&lt;/a&gt; to DRY up test code.&lt;div&gt;
&lt;a href="http://feeds.feedburner.com/~ff/Rubyflow?a=c09kT8bR-tk:Gr3PDtRKEZs:3H-1DwQop_U"&gt;&lt;img src="http://feeds.feedburner.com/~ff/Rubyflow?i=c09kT8bR-tk:Gr3PDtRKEZs:3H-1DwQop_U" border="0"&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/Rubyflow/~4/c09kT8bR-tk" height="1" width="1"&gt;</summary><author gr:unknown-author="true"><name>(author unknown)</name></author><gr:likingUser>09456794655539473732</gr:likingUser><source gr:stream-id="feed/http://feeds.feedburner.com/Rubyflow"><id>tag:google.com,2005:reader/feed/http://feeds.feedburner.com/Rubyflow</id><title type="html">RubyFlow</title><link rel="alternate" href="http://www.rubyflow.com/" type="text/html"/></source></entry><entry gr:crawl-timestamp-msec="1306521487902"><id gr:original-id="http://www.igvita.com/?p=1671">tag:google.com,2005:reader/item/012e27f298140352</id><category term="Architecture"/><category term="Ruby"/><category term="esper"/><category term="streamsql"/><title type="html">Stream(SQL) Event Processing with Esper</title><published>2011-05-27T17:05:55Z</published><updated>2011-05-27T17:05:55Z</updated><link rel="alternate" href="http://feedproxy.google.com/~r/igvita/~3/tl6R78GjZTA/" type="text/html"/><content xml:base="http://www.igvita.com/" type="html">&lt;p&gt;&lt;img align="left" style="margin-right:1em" src="http://www.igvita.com/posts/11/esper.png"&gt;The growth of both the types and the amount of data generated by servers, users, and applications have resulted in a number of recent trends and innovations: NoSQL, rise of popularity of Hadoop, and dozens of higher-level map-reduce frameworks. However, the batch-processing model imposed by map-reduce style of processing is not always a great fit either, especially if latency is a priority.&lt;/p&gt;
&lt;p&gt;What if we turn the problem on its head: instead of storing data and then executing batch queries over it, what if we persisted the query and ran the data &lt;em&gt;through&lt;/em&gt; it? That is the core idea and insight behind &lt;a href="http://en.wikipedia.org/wiki/Event_stream_processing"&gt;Event Stream Processing&lt;/a&gt; (ESP) systems:&lt;strong&gt; store queries not data, process each event in real-time, and emit results when some query criteria is met&lt;/strong&gt;. This is a model that has been well explored in the financial sector (ex: analyzing stock data feeds), and has scaled extremely well - perhaps a pattern we could learn from.&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;Stream Event Processing with StreamSQL&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;SQL has proven to be a great language because it defines a small set of powerful data processing primitives: filter, merge, and aggregate. However, SQL was also defined to work on finite-size sets of records, whereas our problem is that of analyzing a continuous stream of data - not going to work. It is not hard to imagine how one could implement a filter or merge operation in your own language of choice (a route many have taken), but as it turns out, we don't have to throw out SQL just yet, we just need to extend it with some new primitives.&lt;/p&gt;
&lt;p&gt;&lt;img align="left" style="margin-right:1em" src="http://www.igvita.com/posts/11/sql-window.png"&gt;There is no official standard for "&lt;a href="http://en.wikipedia.org/wiki/StreamSQL"&gt;StreamSQL&lt;/a&gt;", and each vendor has their own take on the problem, but most agree on the basics: events (usually timestamped) serve as input, an engine evaluates each event with respect to the specified queries, and the SQL syntax is extended with base primitives such as ticks, timers, and windows.&lt;/p&gt;
&lt;p&gt;A window in StreamSQL can be defined as a period of time, ticks, or events flowing through the engine. Only the simplest queries can be answered by analyzing each event individually (&lt;em&gt;ex: finding a global min or max number in a continuous stream&lt;/em&gt;), and hence a certain amount of data must be kept around (&lt;em&gt;ex: find average price over last 60s&lt;/em&gt;). How the data is persisted (or not) is up to the engine, but the key is that the window is bounded and is updated incrementally as new events are registered.&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;ESP with Esper&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Going from abstract to more concrete, &lt;a href="http://www.espertech.com/"&gt;Esper is an open-source ESP and correlation engine&lt;/a&gt; which definitely deserves some attention. Started in 2004 by Thomas Bernhardt for a financial application, it is implemented in Java and provides a &lt;a href="http://esper.codehaus.org/"&gt;fully featured&lt;/a&gt;, &lt;a href="http://esper.codehaus.org/esper/performance/performance.html"&gt;fast&lt;/a&gt; ESP library with a powerful list of StreamSQL extensions. Esper keeps all data structures in memory (no external database required) and is multi-thread safe and able to make use of all the available CPUs. A code example is worth a thousand words:&lt;/p&gt;
&lt;div style="background:white"&gt;
&lt;pre&gt;&lt;span style="color:#008000;font-style:italic"&gt;# full gist: https://gist.github.com/994739&lt;/span&gt;
 
&lt;span style="color:#9966CC;font-weight:bold"&gt;class&lt;/span&gt; TweetListener
  &lt;span style="color:#9966CC;font-weight:bold"&gt;include&lt;/span&gt; UpdateListener
 
  &lt;span style="color:#9966CC;font-weight:bold"&gt;def&lt;/span&gt; update&lt;span style="color:#006600;font-weight:bold"&gt;(&lt;/span&gt;newEvents, oldEvents&lt;span style="color:#006600;font-weight:bold"&gt;)&lt;/span&gt;
    newEvents.&lt;span style="color:#9900CC"&gt;each&lt;/span&gt; &lt;span style="color:#9966CC;font-weight:bold"&gt;do&lt;/span&gt; |event|
      &lt;span style="color:#CC0066;font-weight:bold"&gt;puts&lt;/span&gt; &lt;span style="color:#996600"&gt;&amp;quot;New event: #{event.getUnderlying.toString}&amp;quot;&lt;/span&gt;
    &lt;span style="color:#9966CC;font-weight:bold"&gt;end&lt;/span&gt;
  &lt;span style="color:#9966CC;font-weight:bold"&gt;end&lt;/span&gt;
&lt;span style="color:#9966CC;font-weight:bold"&gt;end&lt;/span&gt;
 
epService = EPServiceProviderManager.&lt;span style="color:#9900CC"&gt;getDefaultProvider&lt;/span&gt;
statement = epService.&lt;span style="color:#9900CC"&gt;getEPAdministrator&lt;/span&gt;.&lt;span style="color:#9900CC"&gt;createEPL&lt;/span&gt;&lt;span style="color:#006600;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#996600"&gt;&amp;quot;SELECT * from TweetEvent&amp;quot;&lt;/span&gt;&lt;span style="color:#006600;font-weight:bold"&gt;)&lt;/span&gt;
statement.&lt;span style="color:#9900CC"&gt;addListener&lt;/span&gt;&lt;span style="color:#006600;font-weight:bold"&gt;(&lt;/span&gt;TweetListener.&lt;span style="color:#9900CC"&gt;new&lt;/span&gt;&lt;span style="color:#006600;font-weight:bold"&gt;)&lt;/span&gt;
 
&lt;span style="color:#6666ff;font-weight:bold"&gt;TweetStream::Client&lt;/span&gt;.&lt;span style="color:#9900CC"&gt;new&lt;/span&gt;&lt;span style="color:#006600;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#996600"&gt;'username'&lt;/span&gt;,&lt;span style="color:#996600"&gt;'password'&lt;/span&gt;&lt;span style="color:#006600;font-weight:bold"&gt;)&lt;/span&gt;.&lt;span style="color:#9900CC"&gt;track&lt;/span&gt;&lt;span style="color:#006600;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#996600"&gt;'keyword'&lt;/span&gt;&lt;span style="color:#006600;font-weight:bold"&gt;)&lt;/span&gt; &lt;span style="color:#9966CC;font-weight:bold"&gt;do&lt;/span&gt; |t|
  event = TweetEvent.&lt;span style="color:#9900CC"&gt;new&lt;/span&gt;&lt;span style="color:#006600;font-weight:bold"&gt;(&lt;/span&gt;t.&lt;span style="color:#9900CC"&gt;user&lt;/span&gt;.&lt;span style="color:#9900CC"&gt;screen_name&lt;/span&gt;, t.&lt;span style="color:#9900CC"&gt;text&lt;/span&gt;, t.&lt;span style="color:#9900CC"&gt;user&lt;/span&gt;.&lt;span style="color:#9900CC"&gt;time_zone&lt;/span&gt;, t.&lt;span style="color:#9900CC"&gt;retweet_count&lt;/span&gt;&lt;span style="color:#006600;font-weight:bold"&gt;)&lt;/span&gt;
  epService.&lt;span style="color:#9900CC"&gt;getEPRuntime&lt;/span&gt;.&lt;span style="color:#9900CC"&gt;sendEvent&lt;/span&gt;&lt;span style="color:#006600;font-weight:bold"&gt;(&lt;/span&gt;event&lt;span style="color:#006600;font-weight:bold"&gt;)&lt;/span&gt;;
&lt;span style="color:#9966CC;font-weight:bold"&gt;end&lt;/span&gt;
 &lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;A little help from JRuby (&lt;a href="https://gist.github.com/994739"&gt;see full gist&lt;/a&gt;) and we are up and running: we are connecting to a push Twitter search stream, creating simple &lt;strong&gt;TwitterEvent&lt;/strong&gt; objects for each new tweet and pushing them into Esper. Right above, we have also defined a simple &lt;em&gt;"select all"&lt;/em&gt; StreamSQL query and provided a listener, which is invoked with the results. TweetEvents are regular Java objects (POJO's), and our Listener class implements the &lt;strong&gt;UpdateListener&lt;/strong&gt; interface - that's it.&lt;/p&gt;
&lt;p&gt;Run the example above, and not surprisingly, you will see Esper invoke our listener with every tweet we push into it. Not very exciting, but now lets see what else we can do with StreamSQL:&lt;/p&gt;
&lt;div style="background:white"&gt;
&lt;pre&gt;&lt;span style="color:#008000;font-style:italic"&gt;# find the sum of retweets of last 5 tweets which saw more than 10 retweets&lt;/span&gt;
&lt;span style="color:#CC0066;font-weight:bold"&gt;SELECT&lt;/span&gt; sum&lt;span style="color:#006600;font-weight:bold"&gt;(&lt;/span&gt;retweets&lt;span style="color:#006600;font-weight:bold"&gt;)&lt;/span&gt; from TweetEvent&lt;span style="color:#006600;font-weight:bold"&gt;(&lt;/span&gt;retweets &amp;gt;= &lt;span style="color:#006666"&gt;10&lt;/span&gt;&lt;span style="color:#006600;font-weight:bold"&gt;)&lt;/span&gt;.&lt;span style="color:#9900CC"&gt;win&lt;/span&gt;:length&lt;span style="color:#006600;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#006666"&gt;5&lt;/span&gt;&lt;span style="color:#006600;font-weight:bold"&gt;)&lt;/span&gt;
 
&lt;span style="color:#008000;font-style:italic"&gt;# find max, min and average number of retweets for a sliding 60 second window of time&lt;/span&gt;
&lt;span style="color:#CC0066;font-weight:bold"&gt;SELECT&lt;/span&gt; max&lt;span style="color:#006600;font-weight:bold"&gt;(&lt;/span&gt;retweets&lt;span style="color:#006600;font-weight:bold"&gt;)&lt;/span&gt;, min&lt;span style="color:#006600;font-weight:bold"&gt;(&lt;/span&gt;retweets&lt;span style="color:#006600;font-weight:bold"&gt;)&lt;/span&gt;, avg&lt;span style="color:#006600;font-weight:bold"&gt;(&lt;/span&gt;retweets&lt;span style="color:#006600;font-weight:bold"&gt;)&lt;/span&gt; FROM TweetEvent.&lt;span style="color:#9900CC"&gt;win&lt;/span&gt;:time&lt;span style="color:#006600;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#006666"&gt;60&lt;/span&gt; sec&lt;span style="color:#006600;font-weight:bold"&gt;)&lt;/span&gt;
 
&lt;span style="color:#008000;font-style:italic"&gt;# compute number of retweets for all tweets in 10 second batches&lt;/span&gt;
&lt;span style="color:#CC0066;font-weight:bold"&gt;SELECT&lt;/span&gt; sum&lt;span style="color:#006600;font-weight:bold"&gt;(&lt;/span&gt;retweets&lt;span style="color:#006600;font-weight:bold"&gt;)&lt;/span&gt; from TweetEvent.&lt;span style="color:#9900CC"&gt;win&lt;/span&gt;:time_batch&lt;span style="color:#006600;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#006666"&gt;10&lt;/span&gt; sec&lt;span style="color:#006600;font-weight:bold"&gt;)&lt;/span&gt;
 
&lt;span style="color:#008000;font-style:italic"&gt;# number of retweets, grouped by timezone, buffered in 10 second increments&lt;/span&gt;
&lt;span style="color:#CC0066;font-weight:bold"&gt;SELECT&lt;/span&gt; timezone, sum&lt;span style="color:#006600;font-weight:bold"&gt;(&lt;/span&gt;retweets&lt;span style="color:#006600;font-weight:bold"&gt;)&lt;/span&gt; from TweetEvent.&lt;span style="color:#9900CC"&gt;win&lt;/span&gt;:time_batch&lt;span style="color:#006600;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#006666"&gt;10&lt;/span&gt; sec&lt;span style="color:#006600;font-weight:bold"&gt;)&lt;/span&gt; group by timezone
 
&lt;span style="color:#008000;font-style:italic"&gt;# compute the sum of retweets in sliding 60 second window, and emit count every 30 events&lt;/span&gt;
&lt;span style="color:#CC0066;font-weight:bold"&gt;SELECT&lt;/span&gt; sum&lt;span style="color:#006600;font-weight:bold"&gt;(&lt;/span&gt;retweets&lt;span style="color:#006600;font-weight:bold"&gt;)&lt;/span&gt; from TweetEvent.&lt;span style="color:#9900CC"&gt;win&lt;/span&gt;:time&lt;span style="color:#006600;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#006666"&gt;60&lt;/span&gt; sec&lt;span style="color:#006600;font-weight:bold"&gt;)&lt;/span&gt; output snapshot every &lt;span style="color:#006666"&gt;30&lt;/span&gt; events
 
&lt;span style="color:#008000;font-style:italic"&gt;# every 10 seconds, report timezones which accumulated more than 10 retweets&lt;/span&gt;
&lt;span style="color:#CC0066;font-weight:bold"&gt;SELECT&lt;/span&gt; timezone, sum&lt;span style="color:#006600;font-weight:bold"&gt;(&lt;/span&gt;retweets&lt;span style="color:#006600;font-weight:bold"&gt;)&lt;/span&gt; from TweetEvent.&lt;span style="color:#9900CC"&gt;win&lt;/span&gt;:time_batch&lt;span style="color:#006600;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#006666"&gt;10&lt;/span&gt; sec&lt;span style="color:#006600;font-weight:bold"&gt;)&lt;/span&gt; group by timezone having sum&lt;span style="color:#006600;font-weight:bold"&gt;(&lt;/span&gt;retweets&lt;span style="color:#006600;font-weight:bold"&gt;)&lt;/span&gt; &amp;gt; &lt;span style="color:#006666"&gt;10&lt;/span&gt;
 
&lt;span style="color:#008000;font-style:italic"&gt;# Example output with our Listener class:&lt;/span&gt;
&lt;span style="color:#008000;font-style:italic"&gt;#   [&amp;quot;{timezone=null, sum(retweets)=101}&amp;quot;]&lt;/span&gt;
&lt;span style="color:#008000;font-style:italic"&gt;#   [&amp;quot;{timezone=Caracas, sum(retweets)=17}&amp;quot;]&lt;/span&gt;
&lt;span style="color:#008000;font-style:italic"&gt;#   [&amp;quot;{timezone=Central Time (US &amp;amp; Canada), sum(retweets)=15}&amp;quot;]&lt;/span&gt;
 &lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;No glue code, no custom data handlers, and yet we are able to easily apply filters, aggregations, and much more! In fact, the above examples only scratch the surface of what is possible - check the &lt;a href="http://esper.codehaus.org/esper-4.2.0/doc/reference/en/html/epl_clauses.html"&gt;EPL documentation&lt;/a&gt; for more. Esper automatically maintains only the data we need to fulfill our queries and expires old events as new ones arrive - nice.&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;Joins, Correlations and Complex Event Processing&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Having a powerful framework for manipulating a data stream is liberating, but it only gets more interesting when we are able to &lt;a href="http://esper.codehaus.org/tutorials/tutorial/transaction_casestudy.html"&gt;join multiple streams&lt;/a&gt;: why not intersect clickstream data, site activity data, and log data to optimize a recommendations system, or to detect fraud? Esper allows you to do exactly that, in real-time. We can feed multiple data streams into the engine, join and intersect the data, define new views based on these results, detect correlations, and &lt;a href="http://esper.codehaus.org/tutorials/tutorial/tutorial.html"&gt;much&lt;/a&gt; &lt;a href="http://esper.codehaus.org/esper-4.2.0/doc/reference/en/html/epl_clauses.html"&gt;more&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Hadoop and map-reduce batch processing is a popular way to answer some of the similar questions today, but that model imposes a large and an often unnecessary latency barrier. Stream processing, with time window semantics and fixed memory footprint can be a much more agile, faster and cheaper way to get at the same answers.&lt;/p&gt;
&lt;div&gt;
&lt;a href="http://feeds.feedburner.com/~ff/igvita?a=tl6R78GjZTA:khBrfLe2Nj4:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/igvita?d=yIl2AUoC8zA" border="0"&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/igvita?a=tl6R78GjZTA:khBrfLe2Nj4:D7DqB2pKExk"&gt;&lt;img src="http://feeds.feedburner.com/~ff/igvita?i=tl6R78GjZTA:khBrfLe2Nj4:D7DqB2pKExk" border="0"&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/igvita?a=tl6R78GjZTA:khBrfLe2Nj4:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/igvita?i=tl6R78GjZTA:khBrfLe2Nj4:F7zBnMyn0Lo" border="0"&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/igvita?a=tl6R78GjZTA:khBrfLe2Nj4:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/igvita?i=tl6R78GjZTA:khBrfLe2Nj4:V_sGLiPBpWU" border="0"&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/igvita?a=tl6R78GjZTA:khBrfLe2Nj4:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/igvita?i=tl6R78GjZTA:khBrfLe2Nj4:gIN9vFwOqvQ" border="0"&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/igvita/~4/tl6R78GjZTA" height="1" width="1"&gt;</content><author><name>Ilya Grigorik</name></author><gr:likingUser>07699135848086706697</gr:likingUser><gr:likingUser>07045786697302405368</gr:likingUser><gr:likingUser>06258574007803594340</gr:likingUser><gr:likingUser>02690730684660925048</gr:likingUser><gr:likingUser>15504391257187117837</gr:likingUser><gr:likingUser>17768493621858906124</gr:likingUser><source gr:stream-id="feed/http://feeds.feedburner.com/igvita"><id>tag:google.com,2005:reader/feed/http://feeds.feedburner.com/igvita</id><title type="html">igvita.com</title><link rel="alternate" href="http://www.igvita.com" type="text/html"/></source></entry><entry gr:crawl-timestamp-msec="1304014603949"><id gr:original-id="http://thechangelog.com/post/5011508954">tag:google.com,2005:reader/item/88cc68e9aefc2691</id><category term="github"/><category term="queue"/><category term="AMQP"/><category term="ruby"/><category term="event-machine"/><category term="Ruby"/><title type="html">Cloudist: Simple, scalable job queue for Ruby powered by AMQP and Event Machine</title><published>2011-04-28T13:21:54Z</published><updated>2011-04-28T13:21:54Z</updated><link rel="alternate" href="http://feedproxy.google.com/~r/thechangelog/~3/IitSESQ1HNQ/5011508954" type="text/html"/><summary xml:base="http://thechangelog.com/" type="html">&lt;a href="http://github.com/ivanvanderbyl/cloudist"&gt;Cloudist: Simple, scalable job queue for Ruby powered by AMQP and Event Machine&lt;/a&gt;: &lt;p&gt;Rubyists seeking to move processing to the background have long relied
on projects like &lt;a href="https://github.com/collectiveidea/delayed_job"&gt;Delayed
Job&lt;/a&gt; and
&lt;a href="https://github.com/defunkt/resque"&gt;Resque&lt;/a&gt;. Now, &lt;a href="http://twitter.com/IvanVanderbyl"&gt;Ivan
Vanderbyl&lt;/a&gt; offers another option.
&lt;a href="https://github.com/ivanvanderbyl/cloudist"&gt;Cloudist&lt;/a&gt; is powered by
&lt;a href="http://amqp.org"&gt;AMQP&lt;/a&gt; and EventMachine and aims to provide a simple
yet highly scalable job queue for Ruby apps.&lt;/p&gt;

&lt;p&gt;Cloudist workers can be in the form of a block:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Cloudist.start {
  log.info("Started Worker")

  job('make.sandwich') {
    log.info("JOB (#{id}) Make sandwich with #{data[:bread]} bread")

    job.started!

    (1..20).each do |i|
      job.progress(i * 5)
      sleep(1)

      raise ArgumentError, "NOT GOOD!" if i == 4
    end
    job.finished!
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;… or a Ruby class:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class SandwichWorker &amp;lt; Cloudist::Worker
  def process
    log.info(&amp;quot;Processing queue: #{queue.name}&amp;quot;)
    log.info(data.inspect)

    job.started!
    (1..5).each do |i|
      job.progress(i * 20)
      # sleep(1)

      # raise ArgumentError, &amp;quot;NOT GOOD!&amp;quot; if i == 4
    end
    job.finished!
  end
end

Cloudist.signal_trap!

Cloudist.start(:heartbeat =&amp;gt; 10, :logging =&amp;gt; false) {
  Cloudist.handle(&amp;#39;make.sandwich&amp;#39;).with(SandwichWorker)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For usage, configuration, and more examples, check out the &lt;a href="https://github.com/ivanvanderbyl/cloudist"&gt;project repo
on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;[&lt;a href="http://github.com/ivanvanderbyl/cloudist"&gt;Source on GitHub&lt;/a&gt;]&lt;/p&gt;&lt;div&gt;
&lt;a href="http://feeds.feedburner.com/~ff/thechangelog?a=IitSESQ1HNQ:uKqQDpthXgs:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/thechangelog?d=yIl2AUoC8zA" border="0"&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/thechangelog?a=IitSESQ1HNQ:uKqQDpthXgs:7Q72WNTAKBA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/thechangelog?d=7Q72WNTAKBA" border="0"&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/thechangelog?a=IitSESQ1HNQ:uKqQDpthXgs:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/thechangelog?i=IitSESQ1HNQ:uKqQDpthXgs:V_sGLiPBpWU" border="0"&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/thechangelog?a=IitSESQ1HNQ:uKqQDpthXgs:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/thechangelog?d=qj6IDK7rITs" border="0"&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/thechangelog?a=IitSESQ1HNQ:uKqQDpthXgs:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/thechangelog?i=IitSESQ1HNQ:uKqQDpthXgs:gIN9vFwOqvQ" border="0"&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/thechangelog/~4/IitSESQ1HNQ" height="1" width="1"&gt;</summary><author gr:unknown-author="true"><name>(author unknown)</name></author><gr:likingUser>05759880138216456150</gr:likingUser><gr:likingUser>08568509925380106333</gr:likingUser><gr:likingUser>09986713436382198282</gr:likingUser><gr:likingUser>05200358440305782625</gr:likingUser><gr:likingUser>03573529146980714171</gr:likingUser><source gr:stream-id="feed/http://feeds.feedburner.com/thechangelog"><id>tag:google.com,2005:reader/feed/http://feeds.feedburner.com/thechangelog</id><title type="html">The Changelog - Open Source moves fast. Keep up.</title><link rel="alternate" href="http://thechangelog.com/" type="text/html"/></source></entry><entry gr:crawl-timestamp-msec="1303938632560"><id gr:original-id="http://blog.plataformatec.com.br/?p=1985">tag:google.com,2005:reader/item/9b3e75d64b868f3c</id><category term="English"/><category term="Agile"/><category term="git"/><category term="project"/><category term="workflow"/><title type="html">A (successful) git branching model</title><published>2011-04-27T19:31:09Z</published><updated>2011-04-27T19:31:09Z</updated><link rel="alternate" href="http://feedproxy.google.com/~r/PlataformaBlog_english/~3/u-CnTVAmWi4/" type="text/html"/><content xml:base="http://blog.plataformatec.com.br/" type="html">&lt;p&gt;&lt;em&gt;*This blog post tells about how we improved a VCS workflow to another one that suited our and the consumer needs. It was a great result: we minimized the chances of occurring one of the worst problems for a developer in a project: big integration while we maintained an ‘almost releasable branch’ all the time&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In the last months we’ve been working on a project with a mixed development team (Plataformatec’s team and the customer’s team). We, of course, used a version control system (specifically git) and we set up a nice git branching model for our team. As agilists, we know that we should not use anything that requires a lot of bureaucracy (things like opening a ticket to integrate a branch into the trunk).&lt;/p&gt;
&lt;p&gt;Using &lt;a href="http://nvie.com/posts/a-successful-git-branching-model/"&gt;nvie guide&lt;/a&gt; as base, we developed a git workflow. First of all, we had three main branches:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;production&lt;/strong&gt;: contains the code that is currently on production. We also have a production server that contains, obviously, the production code up and running.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;staging&lt;/strong&gt;: contains the code that is being tested before going to production (we used this branch to deploy to a production-like environment that worked as a final test until production, this environment is also called staging)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;master&lt;/strong&gt;: contains the already accepted features. To consider a feature as “accepted” we deployed to another environment (called “dev”) and asked a QA analyst to test it. Once approved we merged the commits. This “dev” environment is used for this kind of approval and also for general purposes like when we say: “take a look at this new awesome feature we’re developing”.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For each feature that we developed, we created a git branch (almost all of them we pushed it to the remote server to facilitate code review and to deploy to the “dev” environment). Everyday, we ran &lt;code&gt;git rebase master&lt;/code&gt;, to update our branch code (except for features developed by more than one developer). Once the feature is complete, we rebased master into it, and merge it using –no-ff (to create a merge commit). For the branches that more than one developer worked on, we usually talked and set up a “rebase period” where one does the rebase, forces the push (because you changed your local tree so git does not accept it as a non forced push) and updates the remote branch.&lt;/p&gt;
&lt;p&gt;Close to the production deploy, we merged (always using –no-ff) master branch into staging branch and deploy to staging. Once approved, we merged to production, and created a tag telling the current version of the application and then we do the deploy. When we deployed to production we also removed the merged branches from the remote repository.&lt;/p&gt;
&lt;p&gt;One of the great advantages of this schema is: Master is always “almost” ready for a release. Yeah, some features really deserves to be validated right before the deploy, because another feature can break them, but we kept the master as an “always releasable stable” branch (and also we used a continuous integration tool in order to enforce all tests passing). Another great advantage is: as we updated our code everyday, it was very unusual for us to face big integration scenarios.&lt;/p&gt;
&lt;p&gt;For the “dev” environment deploy we also set up a capistrano task that asks which branch we want to deploy to be possible to deploy something from any branch.&lt;/p&gt;
&lt;p&gt;This workflow has worked really well for us and maybe it is useful to you (maybe for you to adapt it to something that works better for you as we did with the workflow suggested on &lt;a href="http://nvie.com/posts/a-successful-git-branching-model/"&gt;nvie&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;To summarize, this is our git workflow in commands (supposing that we are on master branch):&lt;br&gt;
&lt;code&gt;&lt;br&gt;
git checkout -b my-awesome-feature&lt;br&gt;
# (... you do some code and some commits and you go home to have some sleep or maybe play some starcraft 2 ...)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#(arrived at the office on the next day)&lt;br&gt;
git rebase master&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#(... continue working and commiting and sleeping (or maybe playing some starcraft 2 ...)&lt;br&gt;
git rebase master&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# (... some commits ... and voila ... you've finished...)&lt;br&gt;
git push origin my-awesome-feature&lt;br&gt;
cap dev deploy&lt;br&gt;
&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# (...YAY!  QA analyst just approved it ...)&lt;br&gt;
git pull origin master&lt;br&gt;
git rebase master&lt;br&gt;
&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# (run the tests to ensure all of them pass)&lt;br&gt;
git checkout master&lt;br&gt;
git pull --rebase origin master&lt;br&gt;
git merge --no-ff my-awesome-branch&lt;br&gt;
git push origin master&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#(... it is time to validate on staging)&lt;br&gt;
git checkout staging&lt;br&gt;
git pull origin staging&lt;br&gt;
git merge --no-ff master&lt;br&gt;
git push origin staging&lt;br&gt;
cap staging deploy&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#(... QA analysts validate the staging ...)&lt;br&gt;
git checkout production&lt;br&gt;
git merge --no-ff staging&lt;br&gt;
git tag -a v1.4.2 -m "Releasing on 13th February"&lt;br&gt;
git push origin production&lt;br&gt;
git push --tags origin production&lt;br&gt;
cap production deploy&lt;br&gt;
&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Well, this is how we improved a git workflow based in another one. As almost everything, there is no bullet proof for it, but we found interesting to share this experience with you as it was a success (every developer on the team enjoyed it). But please, we would like to receive some feedback about it &lt;img src="http://blog.plataformatec.com.br/wp-includes/images/smilies/icon_smile.gif" alt=":-)"&gt; . Have you used something similar in your team? Do you have any ideas on how we can improve it?&lt;/p&gt;
&lt;img src="http://feeds.feedburner.com/~r/PlataformaBlog_english/~4/u-CnTVAmWi4" height="1" width="1"&gt;</content><author><name>Rodrigo Flores</name></author><gr:likingUser>01467495565366147159</gr:likingUser><gr:likingUser>08711332971985243177</gr:likingUser><gr:likingUser>04852205886132929920</gr:likingUser><gr:likingUser>15070213177608446064</gr:likingUser><source gr:stream-id="feed/http://feeds.feedburner.com/PlataformaBlog_english"><id>tag:google.com,2005:reader/feed/http://feeds.feedburner.com/PlataformaBlog_english</id><title type="html">Plataforma Tecnologia Blog » English</title><link rel="alternate" href="http://blog.plataformatec.com.br" type="text/html"/></source></entry><entry gr:crawl-timestamp-msec="1303850340609"><id gr:original-id="http://www.dezeen.com/?p=125763">tag:google.com,2005:reader/item/45b7e9582deb392e</id><category term="Architecture"/><category term="all"/><title type="html">House at Punta Chilen by dRN Architects</title><published>2011-04-25T23:15:25Z</published><updated>2011-04-25T23:15:25Z</updated><link rel="alternate" href="http://www.dezeen.com/2011/04/26/house-at-punta-chilen-by-drn-architects/" type="text/html"/><content xml:base="http://www.dezeen.com/" type="html">&lt;p&gt;&lt;img title="House At Punta Chilen by dRN Architects" src="http://static.dezeen.com/uploads/2011/04/dzn_House-At-Punta-Chilen-by-dRN-Architects-top-6.jpg" alt="House At Punta Chilen by dRN Architects" width="468" height="468"&gt;&lt;/p&gt;
&lt;p&gt;A Corten steel roof folds over the upper storey and terrace of this house on the Chilean Island of Chiloé by &lt;a href="http://drn.cl/"&gt;dRN Architects&lt;/a&gt;.&lt;span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img title="House At Punta Chilen by dRN Architects" src="http://static.dezeen.com/uploads/2011/04/dzn_House-At-Punta-Chilen-by-dRN-Architects-35.jpg" alt="House At Punta Chilen by dRN Architects" width="468" height="314"&gt;&lt;/p&gt;
&lt;p&gt;Wooden columns and glazed strips form the ground floor facade overlooking the water, with a more open structure enclosing the lounge and kitchen on the upper floor.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://static.dezeen.com/uploads/2011/04/dzn_House-At-Punta-Chilen-by-dRN-Architects-23.jpg"&gt;&lt;img title="House At Punta Chilen by dRN Architects" src="http://static.dezeen.com/uploads/2011/04/dzn_House-At-Punta-Chilen-by-dRN-Architects-23.jpg" alt="House At Punta Chilen by dRN Architects" width="468" height="371"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Photographs are by &lt;a href="http://www.felipecamus.cl/"&gt;Felipe Camus&lt;/a&gt; of Chilean architecture database &lt;a href="http://www.barqo.cl/"&gt;Barqo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img title="House At Punta Chilen by dRN Architects" src="http://static.dezeen.com/uploads/2011/04/dzn_House-At-Punta-Chilen-by-dRN-Architects-10.jpg" alt="House At Punta Chilen by dRN Architects" width="468" height="699"&gt;&lt;/p&gt;
&lt;p&gt;Here are some more details from the architects:&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;House At Punta Chilen&lt;/p&gt;
&lt;p&gt;Different to the abrupt topography of continental Chile, the soft slopes and the extended horizon of the Island of Chiloé defines a distinct landscape. Constant rains, strong winds and a tidal variation of up to eight meters, characterize its harsh and always changing shores.&lt;/p&gt;
&lt;p&gt;&lt;img title="House At Punta Chilen by dRN Architects" src="http://static.dezeen.com/uploads/2011/04/dzn_House-At-Punta-Chilen-by-dRN-Architects-11.jpg" alt="House At Punta Chilen by dRN Architects" width="468" height="314"&gt;&lt;/p&gt;
&lt;p&gt;The site, located in the tip of a peninsula facing the northeast, offers an open view at 360º.  On a clear day seven volcanoes can be identified at the distant background of the Andes, most of them, like the Chaitén Volcano, are still active.&lt;/p&gt;
&lt;p&gt;&lt;img title="House At Punta Chilen by dRN Architects" src="http://static.dezeen.com/uploads/2011/04/dzn_House-At-Punta-Chilen-by-dRN-Architects-36.jpg" alt="House At Punta Chilen by dRN Architects" width="468" height="314"&gt;&lt;/p&gt;
&lt;p&gt;The house is placed as a stranger in the shore, an unfamiliar object resting on the site, as if it was ready to take off with a strong wind. Its undefined geometry is not attached to the ground; the connections to its terrain are defined by its interior views to the outside.&lt;/p&gt;
&lt;p&gt;&lt;img title="House At Punta Chilen by dRN Architects" src="http://static.dezeen.com/uploads/2011/04/dzn_House-At-Punta-Chilen-by-dRN-Architects-15.jpg" alt="House At Punta Chilen by dRN Architects" width="468" height="314"&gt;&lt;/p&gt;
&lt;p&gt;On the first floor, where bedrooms are located, a rhythmic repetition of wood columns carries the structure to the perimeter, liberating part of the floor plan. This over structured density of columns fragments the views of the surroundings, while its moving shadows change the interiors through out the day.&lt;/p&gt;
&lt;p&gt;&lt;img title="House At Punta Chilen by dRN Architects" src="http://static.dezeen.com/uploads/2011/04/dzn_House-At-Punta-Chilen-by-dRN-Architects-24.jpg" alt="House At Punta Chilen by dRN Architects" width="468" height="314"&gt;&lt;/p&gt;
&lt;p&gt;Over this platform, a different structural system is produced to gather the common areas of the house. Below one roof, living room, fire and cooking areas are brought together in a panoramic relation to the landscape.&lt;/p&gt;
&lt;p&gt;&lt;img title="House At Punta Chilen by dRN Architects" src="http://static.dezeen.com/uploads/2011/04/dzn_House-At-Punta-Chilen-by-dRN-Architects-25.jpg" alt="House At Punta Chilen by dRN Architects" width="468" height="314"&gt;&lt;/p&gt;
&lt;p&gt;The oblique shape of the corten roof defines an irregular perimeter -opposed to the flat line of the horizon- compressing or opening the room, creating a contained living space to inhabit during the rainy days of Chiloé.&lt;/p&gt;
&lt;p&gt;&lt;img title="House At Punta Chilen by dRN Architects" src="http://static.dezeen.com/uploads/2011/04/dzn_House-At-Punta-Chilen-by-dRN-Architects-29.jpg" alt="House At Punta Chilen by dRN Architects" width="468" height="699"&gt;&lt;/p&gt;
&lt;p&gt;Architects: dRN Architects&lt;br&gt;
Collaborator: Andres Soffia&lt;/p&gt;
&lt;p&gt;&lt;img title="House At Punta Chilen by dRN Architects" src="http://static.dezeen.com/uploads/2011/04/dzn_House-At-Punta-Chilen-by-dRN-Architects-26.jpg" alt="House At Punta Chilen by dRN Architects" width="468" height="314"&gt;&lt;/p&gt;
&lt;p&gt;Building Contractor: Nicolas Aranguiz&lt;br&gt;
Location: Chiloé, X Region, Chile.&lt;/p&gt;
&lt;p&gt;&lt;img title="House At Punta Chilen by dRN Architects" src="http://static.dezeen.com/uploads/2011/04/dzn_House-At-Punta-Chilen-by-dRN-Architects-31.jpg" alt="House At Punta Chilen by dRN Architects" width="468" height="699"&gt;&lt;/p&gt;
&lt;p&gt;Photography: Felipe Camus&lt;br&gt;
Surface: 276 sqr/mts&lt;/p&gt;
&lt;p&gt;&lt;img title="House At Punta Chilen by dRN Architects" src="http://static.dezeen.com/uploads/2011/04/dzn_House-At-Punta-Chilen-by-dRN-Architects-32.jpg" alt="House At Punta Chilen by dRN Architects" width="468" height="314"&gt;&lt;/p&gt;
&lt;p&gt;Materials: Wood, steel, glass.&lt;br&gt;
Contact: www.drn.cl&lt;/p&gt;
&lt;p&gt;&lt;img title="House At Punta Chilen by dRN Architects" src="http://static.dezeen.com/uploads/2011/04/dzn_House-At-Punta-Chilen-by-dRN-Architects-3.jpg" alt="House At Punta Chilen by dRN Architects" width="468" height="314"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img title="House At Punta Chilen by dRN Architects" src="http://static.dezeen.com/uploads/2011/04/dzn_House-At-Punta-Chilen-by-dRN-Architects-4.jpg" alt="House At Punta Chilen by dRN Architects" width="468" height="314"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img title="House At Punta Chilen by dRN Architects" src="http://static.dezeen.com/uploads/2011/04/dzn_House-At-Punta-Chilen-by-dRN-Architects-22.jpg" alt="House At Punta Chilen by dRN Architects" width="468" height="333"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img title="House At Punta Chilen by dRN Architects" src="http://static.dezeen.com/uploads/2011/04/dzn_House-At-Punta-Chilen-by-dRN-Architects-7.jpg" alt="House At Punta Chilen by dRN Architects" width="468" height="314"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img title="House At Punta Chilen by dRN Architects" src="http://static.dezeen.com/uploads/2011/04/dzn_House-At-Punta-Chilen-by-dRN-Architects-2.jpg" alt="House At Punta Chilen by dRN Architects" width="468" height="314"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img title="House At Punta Chilen by dRN Architects" src="http://static.dezeen.com/uploads/2011/04/dzn_House-At-Punta-Chilen-by-dRN-Architects-40.jpg" alt="House At Punta Chilen by dRN Architects" width="468" height="302"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img title="House At Punta Chilen by dRN Architects" src="http://static.dezeen.com/uploads/2011/04/dzn_House-At-Punta-Chilen-by-dRN-Architects-41.jpg" alt="House At Punta Chilen by dRN Architects" width="468" height="287"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img title="House At Punta Chilen by dRN Architects" src="http://static.dezeen.com/uploads/2011/04/dzn_House-At-Punta-Chilen-by-dRN-Architects-39.jpg" alt="House At Punta Chilen by dRN Architects" width="468" height="337"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;&lt;span style="color:#ff6600"&gt;See also:&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span style="color:#ff6600"&gt;&lt;span style="color:#ffffff"&gt;.&lt;/span&gt;&lt;br&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;table style="text-align:left;width:468px;height:156px" border="0" cellspacing="0" cellpadding="0"&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="width:156px;height:156px;vertical-align:top"&gt;&lt;a href="http://www.dezeen.com/2011/04/13/d-house-by-panorama/"&gt;&lt;img src="http://static.dezeen.com/uploads/2011/04/dzn_D-house-by-Panorama-3.jpg" alt="" width="156" height="156"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td style="width:156px;height:156px;vertical-align:top"&gt;&lt;a href="http://www.dezeen.com/2009/10/30/casadetodos-by-veronica-arcos/"&gt;&lt;img src="http://static.dezeen.com/uploads/2009/10/dzn_Casadetodos-by-Veronica-Arcos-333.jpg" alt="" width="156" height="156"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td style="width:156px;height:156px;vertical-align:top"&gt;&lt;a href="http://www.dezeen.com/2010/12/06/shingle-house-by-nord-architecture/"&gt;&lt;img src="http://static.dezeen.com/uploads/2010/12/dzn_Shingle-House-by-NORD-Architecture-1.jpg" alt="" width="156" height="156"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="vertical-align:top"&gt;&lt;a href="http://www.dezeen.com/2011/04/13/d-house-by-panorama/"&gt;D House by&lt;br&gt;
Panorama&lt;/a&gt;&lt;/td&gt;
&lt;td style="vertical-align:top"&gt;&lt;a href="http://www.dezeen.com/2009/10/30/casadetodos-by-veronica-arcos/"&gt;Casadetodos by&lt;br&gt;
Veronica Arcos&lt;/a&gt;&lt;/td&gt;
&lt;td style="vertical-align:top"&gt;&lt;a href="http://www.dezeen.com/2010/12/06/shingle-house-by-nord-architecture/"&gt;Shingle House by&lt;br&gt;
NORD Architecture&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content><author><name>Rose Etherington</name></author><gr:likingUser>09296569841269196560</gr:likingUser><gr:likingUser>16503295800189812468</gr:likingUser><source gr:stream-id="feed/http://www.dezeen.com/feed/"><id>tag:google.com,2005:reader/feed/http://www.dezeen.com/feed/</id><title type="html">Dezeen</title><link rel="alternate" href="http://www.dezeen.com" type="text/html"/></source></entry><entry gr:crawl-timestamp-msec="1303672960645"><id gr:original-id="">tag:google.com,2005:reader/item/7bbc0bac47298854</id><title type="html">April 23, 2011</title><published>2011-04-23T04:00:00Z</published><updated>2011-04-23T04:00:00Z</updated><link rel="alternate" href="http://feedproxy.google.com/~r/smbc-comics/PvLb/~3/US8ipvlxhc4/index.php" type="text/html"/><summary xml:base="http://www.smbc-comics.com/" type="html">&lt;img src="http://www.smbc-comics.com/comics/20110423.gif"&gt;&lt;br&gt;
BAM! Early update, since it'll take all day to read this damn thing.&lt;p&gt;&lt;iframe src="http://feedads.g.doubleclick.net/~ah/f/kev4g7o58gundqef878ohjdgug/468/60#http%3A%2F%2Fwww.smbc-comics.com%2Findex.php%3Fdb%3Dcomics%26id%3D2223" width="100%" height="60" frameborder="0" scrolling="no" marginwidth="0" marginheight="0"&gt;&lt;/iframe&gt;&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/smbc-comics/PvLb/~4/US8ipvlxhc4" height="1" width="1"&gt;</summary><author gr:unknown-author="true"><name>(author unknown)</name></author><gr:likingUser>13028615841660604580</gr:likingUser><gr:likingUser>05998012483406975471</gr:likingUser><gr:likingUser>14984368595206282583</gr:likingUser><gr:likingUser>17975683666801044754</gr:likingUser><gr:likingUser>17576729999227570766</gr:likingUser><gr:likingUser>15687942234892547420</gr:likingUser><gr:likingUser>14952908826852504230</gr:likingUser><gr:likingUser>06517667876597633754</gr:likingUser><gr:likingUser>02229757710438706599</gr:likingUser><gr:likingUser>07601879565071075708</gr:likingUser><gr:likingUser>15659849012231642772</gr:likingUser><gr:likingUser>07685474067564227939</gr:likingUser><gr:likingUser>09700133831389514138</gr:likingUser><gr:likingUser>12139355887188609217</gr:likingUser><gr:likingUser>12948830377278242230</gr:likingUser><gr:likingUser>14530661056369731080</gr:likingUser><gr:likingUser>00154320757040793113</gr:likingUser><gr:likingUser>01234457203797033829</gr:likingUser><gr:likingUser>09370975079527944636</gr:likingUser><gr:likingUser>13345519443336942279</gr:likingUser><gr:likingUser>13822596021302225321</gr:likingUser><gr:likingUser>18203718918816949449</gr:likingUser><gr:likingUser>09879977286868249236</gr:likingUser><gr:likingUser>05693012551531553580</gr:likingUser><gr:likingUser>06968977879586507906</gr:likingUser><gr:likingUser>05802664548597000039</gr:likingUser><gr:likingUser>15720999439362379365</gr:likingUser><gr:likingUser>04603607502933300923</gr:likingUser><gr:likingUser>10628418918281350058</gr:likingUser><gr:likingUser>06595066627570945091</gr:likingUser><gr:likingUser>02417509857766869062</gr:likingUser><gr:likingUser>06296417698386256753</gr:likingUser><gr:likingUser>08104244785821989080</gr:likingUser><gr:likingUser>08432063031239747652</gr:likingUser><gr:likingUser>05932682935901927763</gr:likingUser><gr:likingUser>05491065718418194548</gr:likingUser><gr:likingUser>09935059844417310386</gr:likingUser><gr:likingUser>05361811494135501135</gr:likingUser><gr:likingUser>03653475436704049483</gr:likingUser><gr:likingUser>13697023743735562103</gr:likingUser><gr:likingUser>02092008602426266671</gr:likingUser><gr:likingUser>18231311360823965275</gr:likingUser><gr:likingUser>16220327301131725567</gr:likingUser><gr:likingUser>04205422562624960755</gr:likingUser><gr:likingUser>06536211175300650571</gr:likingUser><gr:likingUser>05024492457204303481</gr:likingUser><gr:likingUser>06725098035067828870</gr:likingUser><gr:likingUser>01993161335858921504</gr:likingUser><gr:likingUser>14824901866223397235</gr:likingUser><gr:likingUser>09988164760852593257</gr:likingUser><gr:likingUser>17623335929464403420</gr:likingUser><gr:likingUser>07965357033533778499</gr:likingUser><gr:likingUser>08153230191716130266</gr:likingUser><gr:likingUser>01193571460764412471</gr:likingUser><gr:likingUser>00871948266361170322</gr:likingUser><gr:likingUser>05919910502826941857</gr:likingUser><gr:likingUser>15529899234828525629</gr:likingUser><gr:likingUser>13894478614647726910</gr:likingUser><gr:likingUser>04414033255958255210</gr:likingUser><gr:likingUser>17261587833959414216</gr:likingUser><gr:likingUser>02438731866835478013</gr:likingUser><gr:likingUser>08119931534095876913</gr:likingUser><gr:likingUser>18174617082890673583</gr:likingUser><gr:likingUser>10828574395111843436</gr:likingUser><gr:likingUser>17305769904846138215</gr:likingUser><gr:likingUser>15352040498254816375</gr:likingUser><gr:likingUser>05771076047797685311</gr:likingUser><gr:likingUser>15902803293215399742</gr:likingUser><gr:likingUser>03228920207871858418</gr:likingUser><gr:likingUser>08474505159552874872</gr:likingUser><gr:likingUser>18092094610329218119</gr:likingUser><gr:likingUser>02008934608904143471</gr:likingUser><gr:likingUser>06845882824203071648</gr:likingUser><gr:likingUser>05544696372253174193</gr:likingUser><gr:likingUser>06089752419982732492</gr:likingUser><gr:likingUser>01976731651925110237</gr:likingUser><gr:likingUser>13919587235852607700</gr:likingUser><gr:likingUser>15660557807216647562</gr:likingUser><gr:likingUser>11110394820393394401</gr:likingUser><gr:likingUser>06269433972883970852</gr:likingUser><gr:likingUser>01945724477943037263</gr:likingUser><gr:likingUser>12375010821382343307</gr:likingUser><gr:likingUser>13674880872739186941</gr:likingUser><gr:likingUser>04741430246624569045</gr:likingUser><gr:likingUser>08256856276702560360</gr:likingUser><gr:likingUser>01694075129981218968</gr:likingUser><gr:likingUser>00124782601440214256</gr:likingUser><gr:likingUser>18141781241153297728</gr:likingUser><gr:likingUser>12210129779378620057</gr:likingUser><gr:likingUser>11763108107664945945</gr:likingUser><gr:likingUser>11228021738674625357</gr:likingUser><gr:likingUser>02321066975224324919</gr:likingUser><gr:likingUser>06690833396780763732</gr:likingUser><gr:likingUser>05178067536036991643</gr:likingUser><gr:likingUser>17089436192776135810</gr:likingUser><gr:likingUser>14274384500514150963</gr:likingUser><gr:likingUser>17767811246110718090</gr:likingUser><gr:likingUser>16893483246446677011</gr:likingUser><gr:likingUser>03982270244302155676</gr:likingUser><gr:likingUser>05511520161485541254</gr:likingUser><source gr:stream-id="feed/http://www.smbc-comics.com/rss.php"><id>tag:google.com,2005:reader/feed/http://www.smbc-comics.com/rss.php</id><title type="html">Saturday Morning Breakfast Cereal (updated daily)</title><link rel="alternate" href="http://www.smbc-comics.com" type="text/html"/></source></entry><entry gr:crawl-timestamp-msec="1303424841094"><id gr:original-id="http://blog.absurd.li/2011/04/21/introducing_cod">tag:google.com,2005:reader/item/4e877f8ce7fd6645</id><category term="zeromq" scheme="http://edward.oconnor.cx/tags/" label="zeromq"/><category term="cod" scheme="http://edward.oconnor.cx/tags/" label="cod"/><category term="ruby" scheme="http://edward.oconnor.cx/tags/" label="ruby"/><category term="beanstalk" scheme="http://edward.oconnor.cx/tags/" label="beanstalk"/><category term="pipes" scheme="http://edward.oconnor.cx/tags/" label="pipes"/><category term="zack" scheme="http://edward.oconnor.cx/tags/" label="zack"/><category term="rpc" scheme="http://edward.oconnor.cx/tags/" label="rpc"/><category term="unix" scheme="http://edward.oconnor.cx/tags/" label="unix"/><title type="html">Introducing Cod</title><published>2011-04-20T22:00:00Z</published><updated>2011-04-20T22:00:00Z</updated><link rel="alternate" href="http://blog.absurd.li/2011/04/21/introducing_cod.html" type="text/html"/><content xml:base="http://blog.absurd.li/" type="html">&lt;p&gt;&lt;a href="http://www.google.com/search?q=cod&amp;amp;tbm=isch"&gt;Cod&lt;/a&gt; is a library for
interprocess communication that I am working on in the wee hours these days.
My goal is to make things really simple and to overlay sockets, pipes and
other means of communication with an interface that is easy to remember.&lt;/p&gt;
&lt;p&gt;Cod is open source software and will be released sometime this year. In the
meantime, please look at
&lt;a href="https://github.com/kschiess/cod"&gt;github.com/kschiess/cod&lt;/a&gt; to get an idea. Try
it out and send me feedback!&lt;/p&gt;
&lt;h2&gt;Building on small elements&lt;/h2&gt;
&lt;p&gt;One of the main ideas of parslet was to build on small elements and to
construct larger ideas from them. This style of construction pervades my work
and never gets old for me. In Cod, I am trying to achieve much the same. All
work you do with it will be based on the concept of a unidirectional
communication channel:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  channel = Cod.pipe
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is a channel based on &lt;code&gt;IO.pipe&lt;/code&gt;. It abstracts all the nitty
gritty for you. Here’s how you communicate with child processes:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  control = Cod.pipe
  
  pid = fork do
    loop do
      # do something important &amp;amp; interesting
      break if control.waiting? &amp;amp;&amp;amp; control.get == :shutdown
    end
  end
  
  # eventually, deciding that we want to shut down the child: 
  control.put :shutdown
  
  Process.waitall
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see in the above sample, Cod defaults to serializing Ruby objects
through channels. This will be open for customization later on, but is mostly
what you’ll want anyway.&lt;/p&gt;
&lt;p&gt;For now, you are forced to ask if messages are queued up
(&lt;code&gt;control.waiting?&lt;/code&gt;) – however I will be working on allowing a
Cod.select as well, implementing mixed #select calls on real FDs and Cod
channels. This is real important for the style of process design I am aiming
for.&lt;/p&gt;
&lt;h2&gt;Channels in channels&lt;/h2&gt;
&lt;p&gt;Cod channels try to be serializable. This sounds trivial, but has really 
profound implications. Let’s say you want to create a client/server type of 
interaction: You will have a common server address and open up a channel to 
it. But to be able to get a response back, you will need two things:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;A channel to receive answers in&lt;/li&gt;
	&lt;li&gt;and to be able to communicate the channel to the server.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here’s how you would probably do this in Cod:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  server = Cod.beanstalk('somehost:11300', 'server')
  client = Cod.beanstalk('somehost:11300')
  
  server.put ['heiho server!', client]
  answer = client.get
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And on the server side of this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  comm = Cod.beanstalk('somehost:11300', 'server')
  
  message, client = comm.get
  answer = act_on(message)
  client.put answer
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But of course, in real life this is slightly more complex. You will want to
use &lt;code&gt;Cod::Client&lt;/code&gt; and &lt;code&gt;Cod::Service&lt;/code&gt; for this kind of
interaction; it bundles this functionality and delivers a debugged and robust
implementation.&lt;/p&gt;
&lt;h2&gt;Bleeding edge&lt;/h2&gt;
&lt;p&gt;The above code will not even work. I am illustrating the idea, see. But it 
might very soon. Have a look at &lt;code&gt;./examples&lt;/code&gt; – those typically 
work. For now, assume that nothing else does.&lt;/p&gt;
&lt;h2&gt;Patterns of distributed computing&lt;/h2&gt;
&lt;p&gt;Cod will: Capture and encode patterns of distributed computation/communication
in a library that allows the programmer to focus on the level above. To allow
communication (even cross-communication?) with the newest fad queue server X,
you’ll write a channel implementation for X and then profit of all higher
order primitives directly.&lt;/p&gt;
&lt;p&gt;Nifty. Been chuckling about the simplicity of it for days now. (Insert thunder
&amp;amp; lightning)&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/absurd/xoDW/~4/OndhbuCbbbo" height="1" width="1"&gt;</content><author gr:unknown-author="true"><name>(author unknown)</name></author><source gr:stream-id="feed/http://feeds.feedburner.com/absurd/xoDW"><id>tag:google.com,2005:reader/feed/http://feeds.feedburner.com/absurd/xoDW</id><title type="html">press play on tape</title><link rel="alternate" href="http://blog.absurd.li/" type="text/html"/></source></entry><entry gr:crawl-timestamp-msec="1303343544186"><id gr:original-id="56927 at http://abduzeedo.com">tag:google.com,2005:reader/item/dc518dfb96e2a9cd</id><category term="architecture" scheme="http://abduzeedo.com/tags/architecture"/><category term="greece" scheme="http://abduzeedo.com/tags/greece"/><category term="hotel" scheme="http://abduzeedo.com/tags/hotel"/><category term="volcano" scheme="http://abduzeedo.com/tags/volcano"/><title type="html">Astonishing Hotel above the Santorini Volcano, Greece</title><published>2011-04-20T12:36:13Z</published><updated>2011-04-20T12:36:13Z</updated><link rel="alternate" href="http://abduzeedo.com/astonishing-hotel-above-santorini-volcano-greece" type="text/html"/><summary xml:base="http://abduzeedo.com/" type="html">&lt;h3&gt;Who looks quickly think this hotel is only one more of those luxurious hotels around the world and with a beautiful view. But he is much more than that, perhaps because it is located above the famous caldera of Santorini Volcano, at Greece. That's right, a hotel over a volcano!&lt;/h3&gt;
&lt;p&gt;&amp;lt;!--break--&amp;gt;&lt;/p&gt;
&lt;p&gt;Project by the Greek architecture office &lt;a href="http://divercityarchitects.com/"&gt;DiverCity Architects , the Santorini Grace Hotel is an example of luxury, comfort, very functional and above all maintain basic features of Greek architecture. As the architects say "The Hotel Provider Interpretation of the contemporary vernacular architecture: economy of space, radical simplicity, and organic forms." Each photo shows the incredible beauty of this place and despite being located near a volcano can notice the peace that he conveys.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To learn more about the project, check out the project page on the architects website at &lt;a href="http://divercityarchitects.com/index.php/projects/selected_work/grace_santorini_hotel_santorini"&gt;Divercity Architects&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://imgs.abduzeedo.com/files/archi/Majestic_Hotel/Majestic_Hotel_1.jpg" alt="Majestic Hotel Overlooking"&gt;&lt;br&gt;&lt;cite&gt;Photo by: Erieta Attali, Serge Detalle&lt;/cite&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="http://imgs.abduzeedo.com/files/archi/Majestic_Hotel/Majestic_Hotel_2.jpg" alt="Majestic Hotel Overlooking"&gt;&lt;br&gt;&lt;cite&gt;Photo by: Erieta Attali, Serge Detalle&lt;/cite&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="http://imgs.abduzeedo.com/files/archi/Majestic_Hotel/Majestic_Hotel_3.jpg" alt="Majestic Hotel Overlooking"&gt;&lt;br&gt;&lt;cite&gt;Photo by: Erieta Attali, Serge Detalle&lt;/cite&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="http://imgs.abduzeedo.com/files/archi/Majestic_Hotel/Majestic_Hotel_4.jpg" alt="Majestic Hotel Overlooking"&gt;&lt;br&gt;&lt;cite&gt;Photo by: Erieta Attali, Serge Detalle&lt;/cite&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="http://imgs.abduzeedo.com/files/archi/Majestic_Hotel/Majestic_Hotel_5.jpg" alt="Majestic Hotel Overlooking"&gt;&lt;br&gt;&lt;cite&gt;Photo by: Erieta Attali, Serge Detalle&lt;/cite&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="http://imgs.abduzeedo.com/files/archi/Majestic_Hotel/Majestic_Hotel_6.jpg" alt="Majestic Hotel Overlooking"&gt;&lt;br&gt;&lt;cite&gt;Photo by: Erieta Attali, Serge Detalle&lt;/cite&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="http://imgs.abduzeedo.com/files/archi/Majestic_Hotel/Majestic_Hotel_7.jpg" alt="Majestic Hotel Overlooking"&gt;&lt;br&gt;&lt;cite&gt;Photo by: Erieta Attali, Serge Detalle&lt;/cite&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="http://imgs.abduzeedo.com/files/archi/Majestic_Hotel/Majestic_Hotel_8.jpg" alt="Majestic Hotel Overlooking"&gt;&lt;br&gt;&lt;cite&gt;Photo by: Erieta Attali, Serge Detalle&lt;/cite&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;To ensure privacy, fragments of volcanic rock are positioned in the windows of four rooms, interspersed with apertures that provide glimpses to the sea. The feature echoes a local architectural technique, more commonly used for retaining walls, in which minimal amounts of mortar are used, leaving gaps between the stonework.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;img src="http://imgs.abduzeedo.com/files/archi/Majestic_Hotel/Majestic_Hotel_9.jpg" alt="Majestic Hotel Overlooking"&gt;&lt;br&gt;&lt;cite&gt;Photo by: Erieta Attali, Serge Detalle&lt;/cite&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="http://imgs.abduzeedo.com/files/archi/Majestic_Hotel/Majestic_Hotel_10.jpg" alt="Majestic Hotel Overlooking"&gt;&lt;br&gt;&lt;cite&gt;Photo by: Erieta Attali, Serge Detalle&lt;/cite&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="http://imgs.abduzeedo.com/files/archi/Majestic_Hotel/Majestic_Hotel_11.jpg" alt="Majestic Hotel Overlooking"&gt;&lt;br&gt;&lt;cite&gt;Photo by: Erieta Attali, Serge Detalle&lt;/cite&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="http://imgs.abduzeedo.com/files/archi/Majestic_Hotel/Majestic_Hotel_12.jpg" alt="Majestic Hotel Overlooking"&gt;&lt;br&gt;&lt;cite&gt;Photo by: Erieta Attali, Serge Detalle&lt;/cite&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="http://imgs.abduzeedo.com/files/archi/Majestic_Hotel/Majestic_Hotel_13.jpg" alt="Majestic Hotel Overlooking"&gt;&lt;br&gt;&lt;cite&gt;Photo by: Erieta Attali, Serge Detalle&lt;/cite&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="http://imgs.abduzeedo.com/files/archi/Majestic_Hotel/Majestic_Hotel_14.jpg" alt="Majestic Hotel Overlooking"&gt;&lt;br&gt;&lt;cite&gt;Photo by: Erieta Attali, Serge Detalle&lt;/cite&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="http://imgs.abduzeedo.com/files/archi/Majestic_Hotel/Majestic_Hotel_15.jpg" alt="Majestic Hotel Overlooking"&gt;&lt;br&gt;&lt;cite&gt;Photo by: Erieta Attali, Serge Detalle&lt;/cite&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="http://imgs.abduzeedo.com/files/archi/Majestic_Hotel/Majestic_Hotel_16.jpg" alt="Majestic Hotel Overlooking"&gt;&lt;br&gt;&lt;cite&gt;Photo by: Erieta Attali, Serge Detalle&lt;/cite&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="http://imgs.abduzeedo.com/files/archi/Majestic_Hotel/Majestic_Hotel_17.jpg" alt="Majestic Hotel Overlooking"&gt;&lt;br&gt;&lt;cite&gt;Photo by: Erieta Attali, Serge Detalle&lt;/cite&gt;&lt;/p&gt;
&lt;div&gt;&lt;h2&gt;About the author&lt;/h2&gt;&lt;div&gt;&lt;div&gt;&lt;p&gt;I'm from Brazil, co-founder of &lt;a href="http://zee.com.br"&gt;Zee&lt;/a&gt; with Fabio. Nowadays I like to play with Fireworks, Photoshop and improve my skills in CSS. If you wanna request some posts, please feel free to &lt;a href="mailto:fabiano@zee.com.br"&gt;contact me&lt;/a&gt; or follow on &lt;a href="http://twitter.com/FabianoMe"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;h4&gt;Sponsored Links:&lt;/h4&gt;&lt;div&gt;&lt;div style="margin-top:15px"&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</summary><author><name>fabiano</name></author><gr:likingUser>00775181516279726069</gr:likingUser><gr:likingUser>18172016138038522348</gr:likingUser><gr:likingUser>06126597303084345164</gr:likingUser><gr:likingUser>05588751638194161244</gr:likingUser><gr:likingUser>06023919773547655342</gr:likingUser><gr:likingUser>17316632857682173410</gr:likingUser><gr:likingUser>02517243423175252317</gr:likingUser><gr:likingUser>04426827123254813020</gr:likingUser><gr:likingUser>12543771057254324958</gr:likingUser><gr:likingUser>15788745495849788757</gr:likingUser><gr:likingUser>09857910747529106543</gr:likingUser><gr:likingUser>14852743421548186661</gr:likingUser><gr:likingUser>16503295800189812468</gr:likingUser><source gr:stream-id="feed/http://abduzeedo.com/rss.xml"><id>tag:google.com,2005:reader/feed/http://abduzeedo.com/rss.xml</id><title type="html">Abduzeedo | Graphic Design Inspiration and Photoshop Tutorials</title><link rel="alternate" href="http://abduzeedo.com" type="text/html"/></source></entry><entry gr:crawl-timestamp-msec="1303235471512"><id gr:original-id="http://www.smashingmagazine.com/?p=97296">tag:google.com,2005:reader/item/ab4f88b6b79b964a</id><category term="Coding" scheme="http://www.smashingmagazine.com"/><category term="CSS" scheme="http://www.smashingmagazine.com"/><category term="css3" scheme="http://www.smashingmagazine.com"/><category term="html5" scheme="http://www.smashingmagazine.com"/><category term="javascript" scheme="http://www.smashingmagazine.com"/><category term="techniques" scheme="http://www.smashingmagazine.com"/><category term="tools" scheme="http://www.smashingmagazine.com"/><title type="html">Powerful New CSS Techniques and Tools</title><published>2011-04-18T14:23:36Z</published><updated>2011-04-20T09:15:20Z</updated><link rel="alternate" href="http://www.smashingmagazine.com/2011/04/18/powerful-new-css-techniques-and-tools/" type="text/html"/><link rel="replies" href="http://www.smashingmagazine.com/2011/04/18/powerful-new-css-techniques-and-tools/#comments" type="text/html"/><link rel="replies" href="http://www.smashingmagazine.com/2011/04/18/powerful-new-css-techniques-and-tools/feed/atom/" type="application/atom+xml"/><content xml:base="http://www.smashingmagazine.com/2011/04/18/powerful-new-css-techniques-and-tools/" xml:lang="en" type="html">&lt;table width="650"&gt;&lt;tr&gt;&lt;td width="650"&gt;&lt;div style="width:650px"&gt; &lt;img src="http://statisches.auslieferung.commindo-media-ressourcen.de/advertisement.gif" alt="Advertisement in Powerful New CSS Techniques and Tools" border="0"&gt;&lt;br&gt; &lt;a href="http://auslieferung.commindo-media-ressourcen.de/www/delivery/ck.php?zoneid=34"&gt;&lt;img src="http://auslieferung.commindo-media-ressourcen.de/www/delivery/avw.php?zoneid=34" border="0" alt=" in Powerful New CSS Techniques and Tools"&gt;&lt;/a&gt; &lt;a href="http://auslieferung.commindo-media-ressourcen.de/www/delivery/ck.php?zoneid=35"&gt;&lt;img src="http://auslieferung.commindo-media-ressourcen.de/www/delivery/avw.php?zoneid=35" border="0" alt=" in Powerful New CSS Techniques and Tools"&gt;&lt;/a&gt; &lt;a href="http://auslieferung.commindo-media-ressourcen.de/www/delivery/ck.php?zoneid=36"&gt;&lt;img src="http://auslieferung.commindo-media-ressourcen.de/www/delivery/avw.php?zoneid=36" border="0" alt=" in Powerful New CSS Techniques and Tools"&gt;&lt;/a&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;The hard work of front-end designers never ceases to amaze us. Over the last months, we’ve seen Web designers creating and presenting a plethora of truly remarkable CSS techniques and tools. We have collected, analyzed, curated and feature latest useful resources for your convenience, so you can use them right away or save them for future reference.&lt;/p&gt;&lt;p&gt;Please don’t hesitate to comment on this post and let us know how exactly you are using them in your workflow. However, please avoid link dropping, but share your insights and your experience instead. Also, notice that some techniques are not only CSS-based, but use HTML5, JavaScript, or JavaScript-libraries as well. Thanks to all featured designers and developers for inspiring, hard work.&lt;/p&gt;&lt;h3&gt;CSS Techniques&lt;/h3&gt;&lt;p&gt;&lt;a href="http://meyerweb.com/eric/css/tests/css3-trans-an/transform-sliders.html"&gt;Rotational Sliders&lt;/a&gt;&lt;br&gt;Eric Meyer shares six of his animated transforms that are capable of sliding around to a particular extent with non-centered transform origins.&lt;/p&gt;&lt;p&gt;&lt;a href="http://meyerweb.com/eric/css/tests/css3-trans-an/transform-sliders.html"&gt;&lt;img src="http://media.smashingmagazine.com/cdn_smash/wp-content/uploads/2011/04/css-techniques-april-102.jpg" width="500" height="300" alt="Css-techniques-april-102 in Powerful New CSS Techniques and Tools"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://designfestival.com/the-cicada-principle-and-why-it-matters-to-web-designers/"&gt;Generating Organic Randomness with Prime Numbers and CSS&lt;/a&gt;&lt;br&gt;At first, you may be wondering why the heck is Alex Walker talking about cicada’s and Web design. Once taking a closer look, a sort of connection between the two evolves and a ‘cicada principle’ is born.&lt;/p&gt;&lt;p&gt;&lt;a href="http://designfestival.com/the-cicada-principle-and-why-it-matters-to-web-designers/"&gt;&lt;img src="http://media.smashingmagazine.com/cdn_smash/wp-content/uploads/2011/04/new-css-101.jpg" width="500" height="300" alt="New-css-101 in Powerful New CSS Techniques and Tools"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://hakim.se/experiments/css3-hologram"&gt;CSS3 3D Hologram&lt;/a&gt;&lt;br&gt;Being inspired by holographic effects that can be achieved with HTML/CSS, Hakim El Hattab has developed his own 3D box which alters perspective depending on device orientation. Note that this requires a webkit browser and has only been tested on iPhone. Also make sure to visit more of &lt;a href="http://hakim.se/experiments"&gt;Hakim’s CSS/HTML5 experiments&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;a href="http://hakim.se/experiments/css3-hologram"&gt;&lt;img src="http://media.smashingmagazine.com/cdn_smash/wp-content/uploads/2011/04/new-css-102.jpg" width="500" height="300" alt="New-css-102 in Powerful New CSS Techniques and Tools"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://leaverou.me/2010/12/checkered-stripes-other-background-patterns-with-css3-gradients/"&gt;Checkerboard, striped &amp;amp; other background patterns with CSS3 gradients&lt;/a&gt;&lt;br&gt;You’re probably familiar with CSS3 gradients by now, including the closer to the standard Mozilla syntax and the verbose Webkit one. I assume you know how to add multiple color stops, make your gradients angled or create radial gradients. What you might not be aware of, is that CSS3 gradients can be used to create many kinds of commonly needed patterns, including checkered patterns, stripes and more. Also, check out Lea’s &lt;a href="http://leaverou.me/css3patterns/"&gt;CSS3 Patterns Gallery&lt;p&gt;&lt;a href="http://leaverou.me/2010/12/checkered-stripes-other-background-patterns-with-css3-gradients/"&gt;&lt;img src="http://media.smashingmagazine.com/cdn_smash/wp-content/uploads/2011/04/css3-pattern.gif" width="500" height="300" alt="Css3-pattern in Powerful New CSS Techniques and Tools"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://dl.dropbox.com/u/921159/Keyboard/page.html#"&gt;CSS3 Keyboard&lt;/a&gt;&lt;br&gt;Click in the box and start typing on your computer’s keyboard. Cleverly developed by Dustin Cartwright and Dustin Hoffman. You’ve got to respect the amount of time and effort which went into producing this demo.&lt;/p&gt;&lt;p&gt;&lt;a href="http://dl.dropbox.com/u/921159/Keyboard/page.html#"&gt;&lt;img src="http://media.smashingmagazine.com/cdn_smash/wp-content/uploads/2011/04/css-techniques-april-133.jpg" width="500" height="300" alt="Css-techniques-april-133 in Powerful New CSS Techniques and Tools"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://css-tricks.com/css3-progress-bars/"&gt;CSS3 Progress Bars&lt;/a&gt;&lt;br&gt;A couple of nice progress bars created by Chris Coyier that use no images — just CSS3 fancies. In browsers that do not support CSS3, these progress bars will look more simplified.&lt;/p&gt;&lt;p&gt;&lt;a href="http://css-tricks.com/css3-progress-bars/"&gt;&lt;img src="http://media.smashingmagazine.com/cdn_smash/wp-content/uploads/2011/04/cssn-102.jpg" width="500" height="233" alt="Cssn-102 in Powerful New CSS Techniques and Tools"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://css-tricks.com/hover-on-everything-but/"&gt;Hover on “Everything But”&lt;/a&gt;&lt;br&gt;A tutorial by Chris Coyier which shows us how easy adding a hover state to an element can be. In this case, the hover state is applied to &lt;em&gt;everything &lt;/em&gt;but the element actually being hovered over.&lt;/p&gt;&lt;p&gt;&lt;a href="http://css-tricks.com/hover-on-everything-but/"&gt;&lt;img src="http://media.smashingmagazine.com/cdn_smash/wp-content/uploads/2011/04/cssn-103.jpg" width="500" height="300" alt="Cssn-103 in Powerful New CSS Techniques and Tools"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.paulrhayes.com/2011-02/creating-a-sphere-with-3d-css/"&gt;Creating a Sphere With 3D CSS&lt;/a&gt;&lt;br&gt;With CSS3’s 3D trans­forms it’s possible to cre­ate a sphere-like object, albeit with many elements. Paul Hayes shares his version of a 3D CSS sphere (works in the latest Safari and iOS) and provides us with the coding needed.&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.paulrhayes.com/2011-02/creating-a-sphere-with-3d-css/"&gt;&lt;img src="http://media.smashingmagazine.com/cdn_smash/wp-content/uploads/2011/04/cssn-104.jpg" width="500" height="300" alt="Cssn-104 in Powerful New CSS Techniques and Tools"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://hacks.mozilla.org/2011/03/css3-planetarium/"&gt;CSS3 Planetarium&lt;/a&gt;&lt;br&gt;This demo highlights leading edge CSS3 and HTML5 features that Mozilla Firefox and the open web community push into modern Web browsers.&lt;/p&gt;&lt;p&gt;&lt;a href="http://hacks.mozilla.org/2011/03/css3-planetarium/"&gt;&lt;img src="http://media.smashingmagazine.com/cdn_smash/wp-content/uploads/2011/04/cssn-105.jpg" width="500" height="300" alt="Cssn-105 in Powerful New CSS Techniques and Tools"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.eleqtriq.com/2010/11/natural-object-rotation-with-css3-3d/"&gt;Natural Object-Rotation with CSS3 3D&lt;/a&gt;&lt;br&gt;A tutorial by Dirk Weber that teaches us how to build a 3D packshot in HTML and CSS by applying some CSS 3D-transforms. By adding  some Javascript, we can make the object freely rotatable in 3D space. And as we will enhance our Javascript with some touch-interactivity, the packshot will also work nicely in Safari for iOS-platforms like iPhone or iPad.&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.eleqtriq.com/2010/11/natural-object-rotation-with-css3-3d/"&gt;&lt;img src="http://media.smashingmagazine.com/cdn_smash/wp-content/uploads/2011/04/cssn-106.jpg" width="500" height="300" alt="Cssn-106 in Powerful New CSS Techniques and Tools"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://nicolasgallagher.com/css-drop-shadows-without-images/demo/"&gt;CSS Drop-Shadows Without Images&lt;/a&gt;&lt;br&gt;Nicolas Gallagher shares presents his CSS drop-shadows without any images.&lt;/p&gt;&lt;p&gt;&lt;a href="http://nicolasgallagher.com/css-drop-shadows-without-images/demo/"&gt;&lt;img src="http://media.smashingmagazine.com/cdn_smash/wp-content/uploads/2011/04/cssn-129.jpg" width="500" height="300" alt="Cssn-129 in Powerful New CSS Techniques and Tools"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://leaverou.me/2011/02/incrementable-length-values-in-text-fields/"&gt;Incrementable Length Values in Text Fields&lt;/a&gt;&lt;br&gt;Lea Verou explains how to implement a feature that allows you to increment or decrement a &amp;lt;length&amp;gt; value by pressing the up and down keyboard arrows when the caret is over it.&lt;/p&gt;&lt;p&gt;&lt;a href="http://leaverou.me/2011/02/incrementable-length-values-in-text-fields/"&gt;&lt;img src="http://media.smashingmagazine.com/cdn_smash/wp-content/uploads/2011/04/cssn-108.jpg" width="500" height="300" alt="Cssn-108 in Powerful New CSS Techniques and Tools"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://leaverou.me/2011/03/beveled-corners-negative-border-radius-with-css3-gradients/"&gt;Beveled Corners &amp;amp; Negative Border-Radius with CSS3 Gradients&lt;/a&gt;&lt;br&gt;Beveled corners and simulate negative border radius without images, by utilizing CSS3 gradients once again — Lea Verou is amazed by how many CSS problems can be solved with gradients alone. Works on Firefox 3.6+, latest Webkit Nightly builds, Chrome and Opera 11.10.&lt;/p&gt;&lt;p&gt;&lt;a href="http://leaverou.me/2011/03/beveled-corners-negative-border-radius-with-css3-gradients/"&gt;&lt;img src="http://media.smashingmagazine.com/cdn_smash/wp-content/uploads/2011/04/cssn-109.jpg" width="500" height="300" alt="Cssn-109 in Powerful New CSS Techniques and Tools"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.456bereastreet.com/archive/201103/flexible_height_vertical_centering_with_css_beyond_ie7/"&gt;Flexible Height Vertical Centering With CSS, Beyond IE7&lt;/a&gt;&lt;br&gt;Roger Johansson shares his thoughts on how to improve centering an element both horizontally and vertically with the &lt;code&gt;display:table&lt;/code&gt; alternative.&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.456bereastreet.com/archive/201103/flexible_height_vertical_centering_with_css_beyond_ie7/"&gt;&lt;img src="http://media.smashingmagazine.com/cdn_smash/wp-content/uploads/2011/04/flex.gif" width="500" height="300" alt="Flex in Powerful New CSS Techniques and Tools"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://csswizardry.com/2011/03/coding-up-a-semantic-lean-timeline/"&gt;Coding up a semantic, lean timeline&lt;/a&gt;&lt;br&gt;This article tells you how to create a semantic lean timeline.&lt;/p&gt;&lt;p&gt;&lt;a href="http://csswizardry.com/2011/03/coding-up-a-semantic-lean-timeline/"&gt;&lt;img src="http://media.smashingmagazine.com/cdn_smash/wp-content/uploads/2011/04/timeline.gif" width="498" height="298" alt="Timeline in Powerful New CSS Techniques and Tools"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.yuiblog.com/blog/2011/03/08/css-border-tricks-with-collapsed-boxes"&gt;CSS Border Tricks with Collapsed Boxes&lt;/a&gt;&lt;br&gt;These border tricks tricks will help you to display content outside of the content box, over borders, without the use of images, CSS3 gradients or extraneous markup.&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.yuiblog.com/blog/2011/03/08/css-border-tricks-with-collapsed-boxes"&gt;&lt;img src="http://media.smashingmagazine.com/cdn_smash/wp-content/uploads/2011/04/css-techniques-april-1401.jpg" width="500" height="300" alt="Css-techniques-april-1401 in Powerful New CSS Techniques and Tools"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://net.tutsplus.com/tutorials/html-css-techniques/quick-tip-nonintrusive-css-text-gradients/"&gt;Quick Tip: Nonintrusive CSS Text Gradients&lt;/a&gt;&lt;br&gt;Jeffrey Way shows some ways for creating pure CSS text-gradients with a bit of trickery. The key is to use a mix of attribute selectors, webkit-specific properties, and custom HTML attributes.&lt;/p&gt;&lt;p&gt;&lt;a href="http://net.tutsplus.com/tutorials/html-css-techniques/quick-tip-nonintrusive-css-text-gradients/"&gt;&lt;img src="http://media.smashingmagazine.com/cdn_smash/wp-content/uploads/2011/04/cssn-113.jpg" width="500" height="300" alt="Cssn-113 in Powerful New CSS Techniques and Tools"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://nimbupani.com/bokeh-with-css3-gradients.html"&gt;Bokeh with CSS3 Gradients&lt;/a&gt;&lt;br&gt;Divya Manian uses the CSS gradients and shows the results of his work on a project which uses a bunch of circles as a decorative background.&lt;/p&gt;&lt;p&gt;&lt;a href="http://nimbupani.com/bokeh-with-css3-gradients.html"&gt;&lt;img src="http://media.smashingmagazine.com/cdn_smash/wp-content/uploads/2011/04/cssn-114.jpg" width="500" height="300" alt="Cssn-114 in Powerful New CSS Techniques and Tools"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://css-tricks.com/different-transitions-for-hover-on-hover-off/"&gt;Different Transitions for Hover On / Hover Off&lt;/a&gt;&lt;br&gt;Chris Coyier tries to acchieve “different transitions on mouseenter and mouseleave”, but he isn’t using JavaScript here; we’re talking about CSS :hover state and CSS3 transitions. Hover on, some CSS property animates itself to a new value; hover off, a different CSS property animates.&lt;/p&gt;&lt;p&gt;&lt;a href="http://css-tricks.com/different-transitions-for-hover-on-hover-off/"&gt;&lt;img src="http://media.smashingmagazine.com/cdn_smash/wp-content/uploads/2011/04/cssn-115.jpg" width="500" height="300" alt="Cssn-115 in Powerful New CSS Techniques and Tools"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://leaverou.me/2011/01/styling-children-based-on-their-number-with-css3/"&gt;Styling children based on their number, with CSS3&lt;/a&gt;&lt;br&gt;Lea Verou shows how to style children of elements based on their total number (that is, their total count).&lt;/p&gt;&lt;p&gt;&lt;a href="http://leaverou.me/2011/01/styling-children-based-on-their-number-with-css3/"&gt;&lt;img src="http://media.smashingmagazine.com/cdn_smash/wp-content/uploads/2011/04/children.jpg" width="500" height="300" alt="Children in Powerful New CSS Techniques and Tools"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.paulrhayes.com/2011-03/css-modal/"&gt;CSS Modal&lt;/a&gt;&lt;br&gt;Using CSS3 tech­niques a modal box can be cre­ated with­out JavaScript or images. With a bit of ani­ma­tion, tran­si­tion and trans­form, it can be made that lit­tle bit more special. The problem: when you hit the “Back”-button after the modal has popped up and was closed, you’ll see the modal again. But maybe you’ll come with a way to fix it?&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.paulrhayes.com/2011-03/css-modal/"&gt;&lt;img src="http://media.smashingmagazine.com/cdn_smash/wp-content/uploads/2011/04/cssn-116.jpg" width="500" height="300" alt="Cssn-116 in Powerful New CSS Techniques and Tools"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://css-tricks.com/rotating-feature-boxes/"&gt;Rotating Feature Boxes&lt;/a&gt;&lt;br&gt;The full effect of it (with transition animations) will work in newish WebKit and Opera browsers and Firefox 4 (in real beta as of today). Any other browser will rotate the blocks without transition animation.&lt;/p&gt;&lt;p&gt;&lt;a href="http://css-tricks.com/rotating-feature-boxes/"&gt;&lt;img src="http://media.smashingmagazine.com/cdn_smash/wp-content/uploads/2011/04/new-css-125.jpg" width="500" height="300" alt="New-css-125 in Powerful New CSS Techniques and Tools"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://designfestival.com/when-and-how-to-visually-hide-content/"&gt;When and How to Visually Hide Content&lt;/a&gt;&lt;br&gt;Visually hiding content on a web page, usually textual content, is at times a viable technique in web design and development. It can be done for several reasons, most importantly, to improve the experience of a screen reader user. Other reasons include improving readability when CSS cannot be rendered, and improving search engine optimization (SEO). Other exaples about using the Visually Hide Content are shown in this article.&lt;/p&gt;&lt;p&gt;&lt;a href="http://designfestival.com/when-and-how-to-visually-hide-content/"&gt;&lt;img src="http://media.smashingmagazine.com/cdn_smash/wp-content/uploads/2011/04/clip1.gif" width="500" height="300" alt="Clip1 in Powerful New CSS Techniques and Tools"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.netmagazine.com/features/how-avoid-common-css3-mistakes"&gt;How to avoid common CSS3 mistakes&lt;/a&gt;&lt;br&gt;The new features of CSS3 bring with them complexity and new things for us to screw up. This article will help keep us in check as we start using these new features.&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.netmagazine.com/features/how-avoid-common-css3-mistakes"&gt;&lt;img src="http://media.smashingmagazine.com/cdn_smash/wp-content/uploads/2011/04/new-css-133.jpg" width="500" height="300" alt="New-css-133 in Powerful New CSS Techniques and Tools"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.merttol.com/articles/web/code/introduction-to-css-escape-sequences.html"&gt;Introduction to CSS Escape Sequences&lt;/a&gt;&lt;br&gt;Escape sequences are useful because they allow style sheet authors to represent characters that would normally be ignored or interpreted differently by traditional CSS parsing rules. In this article Mert Tol shows how to use these sequences.&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.merttol.com/articles/web/code/introduction-to-css-escape-sequences.html"&gt;&lt;img src="http://media.smashingmagazine.com/cdn_smash/wp-content/uploads/2011/04/new-css-134.jpg" width="500" height="300" alt="New-css-134 in Powerful New CSS Techniques and Tools"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://perishablepress.com/press/2010/06/01/wrapping-content/"&gt;Wrapping Long URLs and Text Content with CSS&lt;/a&gt;&lt;br&gt;To wrap long URLs, strings of text, and other content, you can just apply a carefully crafted chunk of CSS code to any block-level element .&lt;/p&gt;&lt;p&gt;&lt;a href="http://perishablepress.com/press/2010/06/01/wrapping-content/"&gt;&lt;img src="http://media.smashingmagazine.com/cdn_smash/wp-content/uploads/2011/04/cssn.gif" width="477" height="245" alt="Cssn in Powerful New CSS Techniques and Tools"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.viget.com/inspire/css-generated-content/"&gt;CSS Generated Content&lt;/a&gt;&lt;br&gt;Trevor Davis shows on some examples what you can do with the CSS generated content.&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.viget.com/inspire/css-generated-content/"&gt;&lt;img src="http://media.smashingmagazine.com/cdn_smash/wp-content/uploads/2011/04/new-css-135.jpg" width="500" height="300" alt="New-css-135 in Powerful New CSS Techniques and Tools"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.456bereastreet.com/archive/201104/controlling_width_with_css3_box-sizing/"&gt;Controlling width with CSS3 box-sizing&lt;/a&gt;&lt;br&gt;An incredibly useful CSS3 feature when you’re creating columns with floats is &lt;code&gt;box-sizing&lt;/code&gt;. It lets you choose which box sizing model to use – whether or not an element’s width and height include padding and border or not. It makes it much easier to define flexible widths where you also need padding and/or borders. A typical example is laying out forms, which can be a real pain when you want flexible widths.&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.456bereastreet.com/archive/201104/controlling_width_with_css3_box-sizing/"&gt;&lt;img src="http://media.smashingmagazine.com/cdn_smash/wp-content/uploads/2011/04/new-css-137.jpg" width="500" height="300" alt="New-css-137 in Powerful New CSS Techniques and Tools"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blog.highub.com/mobile-2/revisit-hardboiled-css3-media-queries/"&gt;Revisit Hardboiled CSS3 Media Queries&lt;/a&gt;&lt;br&gt;Shi Chuan takes a close look at boilerplates and helps us understand the math we need to tweak the width required for a good resolution to any particular device.&lt;/p&gt;&lt;p&gt;&lt;a href="http://catharsis.tumblr.com/post/501657271/ipad-orientation-css-revised"&gt;iPad Orientation CSS&lt;/a&gt;&lt;br&gt;Keith Chu revises Cloud Four’s work and finds a way to alleviate extra HTTP requests, not iPad-specific as well as lack of reusability. In this post, he shares with us his proposed revision to the iPad orientation CSS.&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.standardista.com/css3/css-values-lengths-times-frequenc-angles"&gt;CSS Value Lengths, Times, Frequencies and Angles&lt;/a&gt;&lt;br&gt;In this article the authors go over all the math type units that can be applied as property values in CSS.&lt;/p&gt;&lt;h3&gt;CSS Tools&lt;/h3&gt;&lt;p&gt;&lt;a href="http://stuffandnonsense.co.uk/projects/320andup/"&gt;320 and up&lt;/a&gt;&lt;br&gt;‘320 and Up’ prevents mobile devices from downloading desktop assets by using a tiny screen’s stylesheet as its starting point. Try this page at different window sizes and on different devices to see it in action.&lt;/p&gt;&lt;p&gt;&lt;a href="http://stuffandnonsense.co.uk/projects/320andup/"&gt;&lt;img src="http://media.smashingmagazine.com/cdn_smash/wp-content/uploads/2011/04/new-css-112.jpg" width="500" height="300" alt="New-css-112 in Powerful New CSS Techniques and Tools"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.css3.me/"&gt;CSS3 Generator – By Eric Hoffman and Peter Funk&lt;/a&gt;&lt;br&gt;This generator was proudly designed by Eric Hoffman and coded by Peter Funk.&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.css3.me/"&gt;&lt;img src="http://media.smashingmagazine.com/cdn_smash/wp-content/uploads/2011/04/new-css-113.jpg" width="500" height="300" alt="New-css-113 in Powerful New CSS Techniques and Tools"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.patternify.com/"&gt;CSS Pattern Generator&lt;/a&gt;&lt;br&gt;Patternify is a simple pattern generator that enables you to not only build your patterns online, but export them with the base64 code, so you don’t even need an image file anymore. Just include the code in your CSS and you’re ready to go. Created by Sacha Greif.&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.patternify.com/"&gt;&lt;img src="http://media.smashingmagazine.com/cdn_smash/wp-content/uploads/2011/04/css-techniques-april-105.jpg" width="500" height="300" alt="Css-techniques-april-105 in Powerful New CSS Techniques and Tools"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://griddle.it/"&gt;Griddle.it – Web page alignment made easy&lt;/a&gt;&lt;br&gt;A clean and simple way to help align your layouts. No complex grid frameworks necessary.Just put your dimensions after our URL to get a background guide image to work with in your browser. Grids are created on the fly, so any combination should work.&lt;/p&gt;&lt;p&gt;&lt;a href="http://griddle.it/"&gt;&lt;img src="http://media.smashingmagazine.com/cdn_smash/wp-content/uploads/2011/04/new-css-116.jpg" width="500" height="300" alt="New-css-116 in Powerful New CSS Techniques and Tools"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://cssgrid.net/"&gt;The 1140px Grid: Fluid down to mobile&lt;/a&gt;&lt;br&gt;The 1140 grid fits perfectly into a 1280 monitor. On smaller monitors it becomes fluid and adapts to the width of the browser.&lt;/p&gt;&lt;p&gt;&lt;a href="http://cssgrid.net/"&gt;&lt;img src="http://media.smashingmagazine.com/cdn_smash/wp-content/uploads/2011/04/new-css-117.jpg" width="500" height="300" alt="New-css-117 in Powerful New CSS Techniques and Tools"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://paulirish.com/2009/fighting-the-font-face-fout/#update2011"&gt;Fighting the @font-face FOUT&lt;/a&gt;&lt;br&gt;Paul Irish’s 2011 update for the @font-face FOUT issue. Good news: Firefox 4 has no FOUT, IE9 does, and &lt;a href="http://www.extensis.com/en/WebINK/fout-b-gone/"&gt;FOUT-b-GONE&lt;/a&gt; will help you out with that.&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.extensis.com/en/WebINK/fout-b-gone/"&gt;&lt;img src="http://media.smashingmagazine.com/cdn_smash/wp-content/uploads/2011/04/foutbgone.gif" width="500" height="300" alt="Foutbgone in Powerful New CSS Techniques and Tools"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://css3buttons.michaelhenriksen.dk/"&gt;CSS3 Github Buttons&lt;/a&gt;&lt;br&gt;CSS3 Buttons is a simple framework for creating good-looking GitHub style button links.&lt;/p&gt;&lt;p&gt;&lt;a href="http://css3buttons.michaelhenriksen.dk/"&gt;&lt;img src="http://media.smashingmagazine.com/cdn_smash/wp-content/uploads/2011/04/new-css-118.jpg" width="500" height="300" alt="New-css-118 in Powerful New CSS Techniques and Tools"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://nicolasgallagher.com/lab/css3-facebook-buttons/"&gt;CSS3 Facebook Buttons&lt;/a&gt;&lt;br&gt;CSS3 Facebook Buttons&lt;/p&gt;&lt;p&gt;&lt;a href="http://nicolasgallagher.com/lab/css3-facebook-buttons/"&gt;&lt;img src="http://media.smashingmagazine.com/cdn_smash/wp-content/uploads/2011/04/fb-button.gif" width="500" height="246" alt="Fb-button in Powerful New CSS Techniques and Tools"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://johndwells.com/software/minimee"&gt;Minimee&lt;/a&gt;&lt;br&gt;On the Internets, speed is everything – which means that when it comes to CSS &amp;amp; Javascript files, size DOES matter. By automatically minimizing and combining your files for you, Minimee takes the heavy lifting out of keeping your files svelte.&lt;/p&gt;&lt;p&gt;&lt;a href="http://johndwells.com/software/minimee"&gt;&lt;img src="http://media.smashingmagazine.com/cdn_smash/wp-content/uploads/2011/04/css-techniques-april-175.jpg" width="500" height="300" alt="Css-techniques-april-175 in Powerful New CSS Techniques and Tools"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://livejs.com/"&gt;Live.js&lt;/a&gt;&lt;br&gt;one script closer to designing in the browser.&lt;/p&gt;&lt;p&gt;&lt;a href="http://livejs.com/"&gt;&lt;img src="http://media.smashingmagazine.com/cdn_smash/wp-content/uploads/2011/04/css-techniques-april-178.jpg" width="500" height="300" alt="Css-techniques-april-178 in Powerful New CSS Techniques and Tools"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://markdotto.com/bootstrap/"&gt;Bootstrap.less&lt;/a&gt;&lt;br&gt;Bootstrap is a pack of mixins and variables to be used in conjunction with LESS, a CSS preprocessor for faster and easier web development.&lt;/p&gt;&lt;p&gt;&lt;a href="http://markdotto.com/bootstrap/"&gt;&lt;img src="http://media.smashingmagazine.com/cdn_smash/wp-content/uploads/2011/04/cssn-120.jpg" width="500" height="300" alt="Cssn-120 in Powerful New CSS Techniques and Tools"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://animatable.com/"&gt;Animatable: Create CSS3 animations and advertising for Webkit browsers&lt;/a&gt;&lt;br&gt;Animatable is the easy way to create CSS3 animations and advertising for Webkit browsers on any platform or device — including Android, BlackBerry, iOS and WebOS.&lt;/p&gt;&lt;p&gt;&lt;a href="http://animatable.com/"&gt;&lt;img src="http://media.smashingmagazine.com/cdn_smash/wp-content/uploads/2011/04/new-css-122.jpg" width="500" height="300" alt="New-css-122 in Powerful New CSS Techniques and Tools"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://matthewlein.com/ceaser/"&gt;Ceaser: CSS Easing Animation Tool&lt;/a&gt;&lt;br&gt;Ceaser is an CSS Easing Animation Tool.&lt;/p&gt;&lt;p&gt;&lt;a href="http://matthewlein.com/ceaser/"&gt;&lt;img src="http://media.smashingmagazine.com/cdn_smash/wp-content/uploads/2011/04/css-techniques-april-130.jpg" width="500" height="300" alt="Css-techniques-april-130 in Powerful New CSS Techniques and Tools"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://pepelsbey.github.com/shower/#Cover"&gt;Shower&lt;/a&gt;&lt;br&gt;This  is provided without warranty, guarantee, or much in the way of explanation.&lt;/p&gt;&lt;p&gt;&lt;a href="http://pepelsbey.github.com/shower/#Cover"&gt;&lt;img src="http://media.smashingmagazine.com/cdn_smash/wp-content/uploads/2011/04/new-css-119.jpg" width="500" height="300" alt="New-css-119 in Powerful New CSS Techniques and Tools"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.csspivot.com/"&gt;CSS Pivot&lt;/a&gt;&lt;br&gt;This tool allows you to add CSS styles to any website, and share (and adjust) the result with a short link.&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.csspivot.com/"&gt;&lt;img src="http://media.smashingmagazine.com/cdn_smash/wp-content/uploads/2011/04/cssn-121.jpg" width="500" height="300" alt="Cssn-121 in Powerful New CSS Techniques and Tools"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.rootstheme.com/"&gt;Roots WordPress Theme&lt;/a&gt;&lt;br&gt;Roots is a starting WordPress theme made for developers that’s based on HTML5 Boilerplate, Blueprint CSS (or 960.gs) and Starkers that will help you rapidly create brochure sites and blogs.&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.rootstheme.com/"&gt;&lt;img src="http://media.smashingmagazine.com/cdn_smash/wp-content/uploads/2011/04/roots1.gif" width="500" height="300" alt="Roots1 in Powerful New CSS Techniques and Tools"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.sciweavers.org/i2style"&gt;Free Online CSS3 Typeset Style Generator&lt;/a&gt;&lt;br&gt;An advanced generator of CSS buttons; the tools allows you to define font and color variations, shadows, borders, corners etc.&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.sciweavers.org/i2style"&gt;&lt;img src="http://media.smashingmagazine.com/cdn_smash/wp-content/uploads/2011/04/cssn-122.jpg" width="500" height="300" alt="Cssn-122 in Powerful New CSS Techniques and Tools"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://cssprefixer.appspot.com/"&gt;CSSPrefixer&lt;/a&gt;&lt;br&gt;You hate writing vendor prefixes for all browsers? The CSSPrefixer does it for you.&lt;/p&gt;&lt;p&gt;&lt;a href="http://cssprefixer.appspot.com/"&gt;&lt;img src="http://media.smashingmagazine.com/cdn_smash/wp-content/uploads/2011/04/cssprefixer.gif" width="500" height="300" alt="Cssprefixer in Powerful New CSS Techniques and Tools"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://type-a-file.com/"&gt;Type-a-file&lt;/a&gt;&lt;br&gt;This tool will give your Web typography a head start. Type-a-file is essentially a small collection of CSS stylesheets with heavy focus on rich and beautiful typography. The tool uses Typekit to preview the stylesheets, so if you have a Typekit-account, you could purchase the font license and have exact the same typography on your website.&lt;/p&gt;&lt;p&gt;&lt;a href="http://type-a-file.com/"&gt;&lt;img src="http://media.smashingmagazine.com/cdn_smash/wp-content/uploads/2011/04/cssn-124.jpg" width="500" height="300" alt="Cssn-124 in Powerful New CSS Techniques and Tools"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://html5boilerplate.com/mobile/"&gt;A Best Practice Baseline for Your Mobile Web App&lt;/a&gt;&lt;br&gt;Mobile Boilerplate is your trusted template made custom for creating rich and performant mobile web apps. You get cross-browser consistency among A-grade smartphones, and fallback support for legacy Blackberry, Symbian, and IE Mobile.&lt;/p&gt;&lt;p&gt;&lt;a href="http://html5boilerplate.com/mobile/"&gt;&lt;img src="http://media.smashingmagazine.com/cdn_smash/wp-content/uploads/2011/04/cssn-125.jpg" width="500" height="300" alt="Cssn-125 in Powerful New CSS Techniques and Tools"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://codebeautifier.com/"&gt;Code Beautifier&lt;/a&gt;&lt;br&gt;This tool allows you to format, clean up and optimize your stylesheets.&lt;/p&gt;&lt;p&gt;&lt;a href="http://codebeautifier.com/"&gt;&lt;img src="http://media.smashingmagazine.com/cdn_smash/wp-content/uploads/2011/04/optimize.gif" width="466" height="412" alt="Optimize in Powerful New CSS Techniques and Tools"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://lab.xms.pl/markup-generator/"&gt;Markup Generator&lt;/a&gt;&lt;br&gt;Markup Generator is a simple tool created for HTML/CSS coders that are tired of writing boring frame code at the very beginning of slicing work.&lt;/p&gt;&lt;p&gt;&lt;a href="http://lab.xms.pl/markup-generator/"&gt;&lt;img src="http://media.smashingmagazine.com/cdn_smash/wp-content/uploads/2011/04/css-techniques-april-180.jpg" width="500" height="300" alt="Css-techniques-april-180 in Powerful New CSS Techniques and Tools"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://spritegen.website-performance.org/"&gt;CSS Sprite Generator&lt;/a&gt;&lt;br&gt;This tool allows you to create and maintain your CSS sprites.&lt;/p&gt;&lt;p&gt;&lt;a href="http://spritegen.website-performance.org/"&gt;&lt;img src="http://media.smashingmagazine.com/cdn_smash/wp-content/uploads/2011/04/css-techniques-april-181.jpg" width="500" height="300" alt="Css-techniques-april-181 in Powerful New CSS Techniques and Tools"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="https://github.com/scottjehl/Respond"&gt;Respond&lt;/a&gt;&lt;br&gt;A fast &amp;amp; lightweight polyfill for min/max-width CSS3 Media Queries (for IE 6-8, and more)&lt;/p&gt;&lt;p&gt;&lt;a href="http://adapt.960.gs/"&gt;Adapt.js – Adaptive CSS&lt;/a&gt;&lt;br&gt;Adapt.js simply checks the browser width, and serves only the CSS that is needed, when it is needed.&lt;/p&gt;&lt;p&gt;&lt;a href="http://extralogical.net/projects/firmin/"&gt;Firmin, a JavaScript animation library using CSS transforms and transitions&lt;/a&gt;&lt;br&gt;Firmin is a JavaScript animation library that uses CSS transforms and transitions to create smooth, hardware-accelerated animations.&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.phpied.com/command-line-css-spriting/"&gt;Command-line CSS spriting&lt;/a&gt;&lt;br&gt;The author shows, how to create CSS sprites from the command line alone.&lt;/p&gt;&lt;h3&gt;Last Click&lt;/h3&gt;&lt;p&gt;&lt;a href="http://na.isobar.com/standards/"&gt;Code Standards&lt;/a&gt;&lt;br&gt;This document contains normative guidelines for web applications built by the Interface Development practice of Isobar North America (previously Molecular). It is to be readily available to anyone who wishes to check the iterative progress of our best practices.&lt;/p&gt;&lt;p&gt;&lt;a href="http://na.isobar.com/standards/"&gt;&lt;img src="http://media.smashingmagazine.com/cdn_smash/wp-content/uploads/2011/04/standards.jpg" width="500" height="310" alt="Standards in Powerful New CSS Techniques and Tools"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/2253110/how-to-manage-css-explosion"&gt;How to Manage CSS Explosion&lt;/a&gt;&lt;br&gt;A very useful thread on StackOverflow on how to keep CSS files organized and clean.&lt;/p&gt;&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/2253110/how-to-manage-css-explosion"&gt;&lt;img src="http://media.smashingmagazine.com/cdn_smash/wp-content/uploads/2011/04/organiz.jpg" width="500" height="300" alt="Organiz in Powerful New CSS Techniques and Tools"&gt;&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;Related Posts&lt;/h3&gt;&lt;p&gt;&lt;a href="http://www.smashingmagazine.com/2011/02/16/css-useful-coding-techniques-and-design-solutions/"&gt;CSS: Innovative Techniques and Practical Solutions&lt;/a&gt;&lt;br&gt;The main goal of the article is to present powerful new CSS techniques, encourage experimentation in the design community and push CSS forward.&lt;/p&gt;&lt;p&gt;&lt;em&gt;(vf) (ik)&lt;/em&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;small&gt;© Smashing Editorial for &lt;a href="http://www.smashingmagazine.com"&gt;Smashing Magazine&lt;/a&gt;, 2011. | &lt;a href="http://www.smashingmagazine.com/2011/04/18/powerful-new-css-techniques-and-tools/"&gt;Permalink&lt;/a&gt; | &lt;a href="http://www.smashingmagazine.com/2011/04/18/powerful-new-css-techniques-and-tools/#comments"&gt;Post a comment&lt;/a&gt; | &lt;a href="http://shop.smashingmagazine.com/" title="Smashing Shop"&gt;Smashing Shop&lt;/a&gt; | &lt;a href="http://www.smashingmagazine.com/the-smashing-network/" title="Smashing Network"&gt;Smashing Network&lt;/a&gt; | &lt;a href="http://www.smashingmagazine.com/about/" title="About Us"&gt;About Us&lt;/a&gt;&lt;br&gt; Post tags: &lt;a href="http://www.smashingmagazine.com/tag/css/" rel="tag"&gt;CSS&lt;/a&gt;, &lt;a href="http://www.smashingmagazine.com/tag/css3/" rel="tag"&gt;css3&lt;/a&gt;, &lt;a href="http://www.smashingmagazine.com/tag/html5/" rel="tag"&gt;html5&lt;/a&gt;, &lt;a href="http://www.smashingmagazine.com/tag/javascript/" rel="tag"&gt;javascript&lt;/a&gt;, &lt;a href="http://www.smashingmagazine.com/tag/techniques/" rel="tag"&gt;techniques&lt;/a&gt;, &lt;a href="http://www.smashingmagazine.com/tag/tools/" rel="tag"&gt;tools&lt;/a&gt;&lt;br&gt; &lt;/small&gt;&lt;/p&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name>Smashing Editorial</name></author><gr:likingUser>17195033727665057277</gr:likingUser><gr:likingUser>04813119969399391402</gr:likingUser><gr:likingUser>11822496793097396577</gr:likingUser><gr:likingUser>10791439320945370179</gr:likingUser><gr:likingUser>11896377250112661063</gr:likingUser><gr:likingUser>01378362922825043920</gr:likingUser><gr:likingUser>04214363527177083060</gr:likingUser><gr:likingUser>06985003348344481610</gr:likingUser><gr:likingUser>16376284135611387758</gr:likingUser><gr:likingUser>16588123341666047181</gr:likingUser><gr:likingUser>16054984645934374697</gr:likingUser><gr:likingUser>15938349700315246081</gr:likingUser><gr:likingUser>16036541317089998975</gr:likingUser><gr:likingUser>12575921012878112859</gr:likingUser><gr:likingUser>02744017681585425953</gr:likingUser><gr:likingUser>08921481233871200522</gr:likingUser><gr:likingUser>02619879655386783868</gr:likingUser><gr:likingUser>01589716558341904675</gr:likingUser><gr:likingUser>03083771080487868223</gr:likingUser><gr:likingUser>10097196360756351019</gr:likingUser><gr:likingUser>10950229150112045857</gr:likingUser><gr:likingUser>04378080009000556221</gr:likingUser><gr:likingUser>16588105126072809119</gr:likingUser><gr:likingUser>06145289717961175435</gr:likingUser><gr:likingUser>13848703108435258371</gr:likingUser><gr:likingUser>08001674578618019632</gr:likingUser><gr:likingUser>17460337457622603899</gr:likingUser><gr:likingUser>07938833274540645143</gr:likingUser><gr:likingUser>00456329523137726766</gr:likingUser><gr:likingUser>17478541002711025403</gr:likingUser><gr:likingUser>00208349776803261229</gr:likingUser><gr:likingUser>01588855735268245319</gr:likingUser><gr:likingUser>15717664374456905867</gr:likingUser><gr:likingUser>15726856901342776764</gr:likingUser><gr:likingUser>18073232472688908913</gr:likingUser><gr:likingUser>08444551714908603200</gr:likingUser><gr:likingUser>15006539974180567283</gr:likingUser><gr:likingUser>05614457940214209057</gr:likingUser><gr:likingUser>13660133450715484933</gr:likingUser><gr:likingUser>12711179589994278018</gr:likingUser><gr:likingUser>10845737844280048754</gr:likingUser><gr:likingUser>02522501341949674670</gr:likingUser><gr:likingUser>09436770577858325840</gr:likingUser><gr:likingUser>12315756231498855407</gr:likingUser><gr:likingUser>08062803592545546592</gr:likingUser><gr:likingUser>07473722672288884090</gr:likingUser><gr:likingUser>05241638607472045880</gr:likingUser><gr:likingUser>03084244025020584564</gr:likingUser><gr:likingUser>03994345909668016089</gr:likingUser><gr:likingUser>01775074864051403165</gr:likingUser><gr:likingUser>15998619181294633317</gr:likingUser><gr:likingUser>12090096041412972509</gr:likingUser><gr:likingUser>13720195540539939241</gr:likingUser><gr:likingUser>02507306877082642828</gr:likingUser><gr:likingUser>10633818359594075252</gr:likingUser><gr:likingUser>06671297150095676590</gr:likingUser><gr:likingUser>12862201542286383064</gr:likingUser><gr:likingUser>14222342143436437963</gr:likingUser><gr:likingUser>08155177511329758056</gr:likingUser><gr:likingUser>15138888323913763439</gr:likingUser><gr:likingUser>02259591061263896622</gr:likingUser><gr:likingUser>09002551974024340026</gr:likingUser><gr:likingUser>03027677480804790549</gr:likingUser><gr:likingUser>07594420364165362478</gr:likingUser><gr:likingUser>00716608601898137891</gr:likingUser><gr:likingUser>11871163155914020077</gr:likingUser><gr:likingUser>16156325089731475106</gr:likingUser><gr:likingUser>05701893183512786196</gr:likingUser><gr:likingUser>08311906128355959537</gr:likingUser><gr:likingUser>13500138861199264437</gr:likingUser><gr:likingUser>17220920203820147219</gr:likingUser><gr:likingUser>17111538906525861977</gr:likingUser><gr:likingUser>01317699181432091259</gr:likingUser><gr:likingUser>11000372808882902841</gr:likingUser><gr:likingUser>15988010693502247242</gr:likingUser><gr:likingUser>01066774654621179576</gr:likingUser><gr:likingUser>08138837994224393609</gr:likingUser><gr:likingUser>17365284859316475862</gr:likingUser><gr:likingUser>10456417861738177201</gr:likingUser><gr:likingUser>11516725439115563238</gr:likingUser><gr:likingUser>06894108084725024185</gr:likingUser><gr:likingUser>11750786551375619716</gr:likingUser><gr:likingUser>09652417574677056445</gr:likingUser><gr:likingUser>17214887482086724296</gr:likingUser><gr:likingUser>07750879847976425298</gr:likingUser><gr:likingUser>07799045417300207084</gr:likingUser><gr:likingUser>04702883828888207722</gr:likingUser><gr:likingUser>01133098555638878445</gr:likingUser><gr:likingUser>15862644292142724022</gr:likingUser><gr:likingUser>14530750435240001785</gr:likingUser><gr:likingUser>04079614565544756517</gr:likingUser><gr:likingUser>09861010378999536985</gr:likingUser><gr:likingUser>05230985879965499758</gr:likingUser><gr:likingUser>17796562442174829953</gr:likingUser><gr:likingUser>02434461288539857146</gr:likingUser><gr:likingUser>01650999374317979751</gr:likingUser><gr:likingUser>01147811247919660631</gr:likingUser><gr:likingUser>09063511033440329567</gr:likingUser><gr:likingUser>11764719891690612789</gr:likingUser><gr:likingUser>17543291858960396508</gr:likingUser><source gr:stream-id="feed/http://rss1.smashingmagazine.com/feed/"><id>tag:google.com,2005:reader/feed/http://rss1.smashingmagazine.com/feed/</id><title type="html">Smashing Magazine Feed</title><link rel="alternate" href="http://www.smashingmagazine.com/" type="text/html"/></source></entry><entry gr:crawl-timestamp-msec="1303213859910"><id gr:original-id="http://florianhanke.com/blog/2011/04/19/picky-geosearch-1">tag:google.com,2005:reader/item/423bd8bcb09b8ffb</id><title type="html">Picky: Geosearch 1</title><published>2011-04-18T22:00:00Z</published><updated>2011-04-18T22:00:00Z</updated><link rel="alternate" href="http://florianhanke.com/blog/2011/04/19/picky-geosearch-1.html" type="text/html"/><content xml:base="http://florianhanke.com/blog/" type="html">&lt;p&gt;This is a post in the &lt;a href="http://florianhanke.com/picky/"&gt;Picky&lt;/a&gt; series on its workings.&lt;/p&gt;
&lt;p&gt;Let me show you how to do a simple and fun geo search in Picky.&lt;/p&gt;
&lt;p&gt;But first, lean back.&lt;/p&gt;
&lt;h2&gt;Enjoy the show&lt;/h2&gt;
&lt;p&gt;The index contains around 21’000 Swiss places, taken from Wikipedia.&lt;/p&gt;
&lt;p&gt;First, I click a little around – Picky gives me places around the clicked location.&lt;/p&gt;
&lt;p&gt;After that I show what happens if I just give Picky a latitude or a longitude. Then, combined with the place text, finally, just with the place text.&lt;/p&gt;
&lt;p&gt;You’ll understand when you see it :)&lt;/p&gt;
&lt;p&gt;It’s best to switch to full-screen:&lt;/p&gt;
&lt;p&gt;&lt;iframe src="http://player.vimeo.com/video/22594668" width="707" height="726" frameborder="0"&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;The blob in the middle is Switzerland, by the way ;)&lt;/p&gt;
&lt;p&gt;How do we do it?&lt;/p&gt;
&lt;h2&gt;The server code&lt;/h2&gt;
&lt;p&gt;The server … you probably could have done sleeping if you’ve been reading this blog dilligently ;)&lt;/p&gt;
&lt;p&gt;The data comes from the &lt;span&gt;CSV&lt;/span&gt; file &lt;code&gt;data/swiss_places.csv&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;places = Index::Memory.new :geo do
  source         Sources::CSV.new(:location, :north, :east, file: 'data/swiss_places.csv')
  category       :location, partial: Partial::Substring.new(from: 1)
  geo_categories :north, :east, 1, precision: 3
end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What’s interesting here is the &lt;code&gt;geo_categories&lt;/code&gt; method. It takes two categories, &lt;code&gt;north&lt;/code&gt;, and &lt;code&gt;east&lt;/code&gt;, which are both in the lat/lng format, e.g. &lt;code&gt;47.2&lt;/code&gt;, &lt;code&gt;8.3&lt;/code&gt;. (It also takes options &lt;code&gt;lat_from&lt;/code&gt;, and &lt;code&gt;lng_from&lt;/code&gt; if the categories don’t have the same names as in the data source)&lt;/p&gt;
&lt;p&gt;Also, the 1 parameter in &lt;code&gt;geo_categories&lt;/code&gt; denotes that we search 1 km around the clicked location.&lt;/p&gt;
&lt;p&gt;This is actually the simple part. It does no exact calculation, but an approximate one that’s most correct in temperate zones. But as you see in the video, it works well. Especially in a “what’s around me” type search.&lt;/p&gt;
&lt;p&gt;Still in the server config &lt;code&gt;app/application.rb&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;route %r{\A/places\Z} =&amp;gt; Search.new(places)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Self-explanatory, eh? As regexp, you could also use &lt;code&gt;%r{^/places$}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;That’s it for the server. Nothing special so far.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;rake index; rake start&lt;/code&gt; and off we go.&lt;/p&gt;
&lt;h2&gt;The client code&lt;/h2&gt;
&lt;p&gt;In this part we’re going to install the map.&lt;/p&gt;
&lt;p&gt;So we’re using the generated code, but add a little more information to the returned json hash.&lt;/p&gt;
&lt;p&gt;We not only need the list results, but also the coordinates themselves. So we’re going to add them to the results separately.&lt;/p&gt;
&lt;p&gt;We (ab)use &lt;code&gt;populate_with&lt;/code&gt;, the method that makes models out of the returned ids and yields them to the block to be rendered.&lt;/p&gt;
&lt;p&gt;We then use the models to add geo coordinates to the result hash that is sent to the client.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;results = Geo.search params[:query], :ids =&amp;gt; params[:ids], :offset =&amp;gt; params[:offset]
results.extend Picky::Convenience
results[:geo] ||= [] # &amp;lt;= We initialize an array of coordinates in the results hash.
results.populate_with Location do |location|
  results[:geo] &amp;lt;&amp;lt; [location.north, location.east] # &amp;lt;- and we populate it with the coordinates.
  location.to_s
end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So essentially, our geo data piggybacks to the Javascript client. JS, here we come!&lt;/p&gt;
&lt;h2&gt;The javascript client code&lt;/h2&gt;
&lt;p&gt;The javascript client requires a bit more work. Well, the map does.&lt;/p&gt;
&lt;p&gt;We insert this after the &lt;code&gt;PickyClient&lt;/code&gt; code. The first 6 lines are noise and map preparation.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// The map
//
$(document).ready(function() {
  if (GBrowserIsCompatible()) {
    // Map setup.
    //
    map = new GMap2(document.getElementById('map_div'));
    map.addControl(new GSmallMapControl());
    map.setCenter(new GLatLng(46.85, 8.05), 13);
    map.setZoom(7);

    // Click listener.
    //
    GEvent.addListener(map, "click", function(overlay, latlng) {
      if (latlng) {
        pickyClient.insert(Math.round(latlng.lat()*1000)/1000 + ' ' + Math.round(latlng.lng()*1000)/1000);
      }
    });
  }
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, we add the most important part: A click &lt;code&gt;listener&lt;/code&gt; that inserts the coordinates (rounded to 3 digits) in the search field, as you have seen in the video.&lt;/p&gt;
&lt;p&gt;Now, searches are already sent off to Picky and come back. Whoosh!&lt;/p&gt;
&lt;p&gt;What do we need to do now? Yes, draw some markers in the map. The &lt;code&gt;PickyClient&lt;/code&gt; offers a callback that is called after Picky has updated the results (there are also &lt;code&gt;before&lt;/code&gt; and &lt;code&gt;success&lt;/code&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;after: function(data, query) {
  map.clearOverlays();

  var geo = data.original_hash.geo;
  if (geo) {
    for (var i = 0; i &amp;lt; geo.length; i++) {
      map.addOverlay(new GMarker(new GLatLng(geo[i][0], geo[i][1])));
    };
  }
},&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First we clear the overlays for the new results.&lt;/p&gt;
&lt;p&gt;Then, we get the piggybacking geo data using the data object’s &lt;code&gt;original_hash&lt;/code&gt; function, finally iterating over all coordinates and adding overlays as we go.&lt;/p&gt;
&lt;p&gt;By default, the client only gets 20 results at a time. We set it to 100 using the &lt;code&gt;fullResults&lt;/code&gt; option.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fullResults: 100&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s it. It’s fast and quite easy to set up.&lt;/p&gt;
&lt;h2&gt;Sidenote&lt;/h2&gt;
&lt;p&gt;Since for Swiss data it is clear which is the longitude and which is the latitude (no data intersection), we can just enter e.g. &lt;code&gt;47.2 8.3&lt;/code&gt;, but if your data area isn’t exclusive, e.g. &lt;code&gt;33.1 33.2&lt;/code&gt;, meaning that latitude values can also be longitude values, just add &lt;code&gt;north:33.1 east:33.2&lt;/code&gt;, to denote what is what if north, east are the names of your categories.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;So we’ve seen&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;that a geo search in Picky is quite snappy.&lt;/li&gt;
	&lt;li&gt;that you can search for latitude and location name only, for example.&lt;/li&gt;
	&lt;li&gt;how you can configure the server.&lt;/li&gt;
	&lt;li&gt;how you can configure the client and the web frontend.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Hope you learnt something new!&lt;/p&gt;</content><author gr:unknown-author="true"><name>(author unknown)</name></author><source gr:stream-id="feed/http://florianhanke.com/blog/atom.xml"><id>tag:google.com,2005:reader/feed/http://florianhanke.com/blog/atom.xml</id><title type="html">code is code</title><link rel="alternate" href="http://florianhanke.com/blog/" type="text/html"/></source></entry><entry gr:crawl-timestamp-msec="1303146504856"><id gr:original-id="http://thechangelog.com/post/4719798357">tag:google.com,2005:reader/item/63ccc168fbdd07b6</id><category term="github"/><category term="coffeescript"/><category term="html5"/><category term="cli"/><category term="javascript"/><category term="node.js"/><category term="CoffeeScript"/><title type="html">capt: Command line tool for creating Backbone.js apps</title><published>2011-04-18T15:23:45Z</published><updated>2011-04-18T15:23:45Z</updated><link rel="alternate" href="http://feedproxy.google.com/~r/thechangelog/~3/v_UQhbqQ6xE/4719798357" type="text/html"/><summary xml:base="http://thechangelog.com/" type="html">&lt;a href="http://github.com/bnolan/capt"&gt;capt: Command line tool for creating Backbone.js apps&lt;/a&gt;: &lt;p&gt;If you set out to use &lt;a href="http://thechangelog.com/post/1306791328/backbone-give-your-js-app-some-backbone-with-models-view"&gt;Backbone.js&lt;/a&gt; for a client-centric application, one
thing you might miss coming from a server-side MVC framework is some
basic file structure, dependency managment, and generator support. To solve this problem &lt;a href="https://twitter.com/bnolan"&gt;Ben
Nolan&lt;/a&gt; has created &lt;a href="http://github.com/bnolan/capt"&gt;Capt&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Capt is aimed at developers building single page, stand alone
applications as well as server-backed applications using Node.js,
bundling the following projects and languages:&lt;/p&gt;

&lt;h4&gt;Languages&lt;/h4&gt;

&lt;ul&gt;&lt;li&gt;Coffeescript&lt;/li&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;li&gt;SCSS&lt;/li&gt;
&lt;li&gt;LESS&lt;/li&gt;
&lt;/ul&gt;&lt;h4&gt;Testing frameworks&lt;/h4&gt;

&lt;ul&gt;&lt;li&gt;Qunit&lt;/li&gt;
&lt;li&gt;Jasmine [planned]&lt;/li&gt;
&lt;/ul&gt;&lt;h4&gt;Libraries&lt;/h4&gt;

&lt;ul&gt;&lt;li&gt;jQuery&lt;/li&gt;
&lt;li&gt;Backbone.js&lt;/li&gt;
&lt;li&gt;Underscore.js&lt;/li&gt;
&lt;li&gt;json2.js&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Installation&lt;/h3&gt;

&lt;p&gt;You can grab Capt from &lt;a href="http://npmjs.org"&gt;npm&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install capt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To check your installation and see usage help, just run &lt;code&gt;capt&lt;/code&gt; in your
terminal:&lt;/p&gt;

&lt;p&gt;Usage:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;capt new projectname 
  - create a new project

capt server
  - serve the current project on port 3000

capt watch
  - watch the current project and recompile as needed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There’s also generators to create Backbone models and controllers:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;capt generate model 

capt generate controller 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Capt is still in alpha but is under active development. Got ideas? Why
not &lt;a href="http://github.com/bnolan/capt"&gt;contribute&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;[&lt;a href="http://github.com/bnolan/capt"&gt;Source on GitHub&lt;/a&gt;] [&lt;a href="http://bennolan.com/capt/"&gt;Web
site&lt;/a&gt;]&lt;/p&gt;&lt;div&gt;
&lt;a href="http://feeds.feedburner.com/~ff/thechangelog?a=v_UQhbqQ6xE:tgW5wZNR3fU:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/thechangelog?d=yIl2AUoC8zA" border="0"&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/thechangelog?a=v_UQhbqQ6xE:tgW5wZNR3fU:7Q72WNTAKBA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/thechangelog?d=7Q72WNTAKBA" border="0"&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/thechangelog?a=v_UQhbqQ6xE:tgW5wZNR3fU:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/thechangelog?i=v_UQhbqQ6xE:tgW5wZNR3fU:V_sGLiPBpWU" border="0"&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/thechangelog?a=v_UQhbqQ6xE:tgW5wZNR3fU:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/thechangelog?d=qj6IDK7rITs" border="0"&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/thechangelog?a=v_UQhbqQ6xE:tgW5wZNR3fU:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/thechangelog?i=v_UQhbqQ6xE:tgW5wZNR3fU:gIN9vFwOqvQ" border="0"&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/thechangelog/~4/v_UQhbqQ6xE" height="1" width="1"&gt;</summary><author gr:unknown-author="true"><name>(author unknown)</name></author><gr:likingUser>09609092135959868587</gr:likingUser><gr:likingUser>12600226339001778958</gr:likingUser><gr:likingUser>08568509925380106333</gr:likingUser><gr:likingUser>09986713436382198282</gr:likingUser><gr:likingUser>04708364085589462378</gr:likingUser><gr:likingUser>14983200418612226946</gr:likingUser><source gr:stream-id="feed/http://feeds.feedburner.com/thechangelog"><id>tag:google.com,2005:reader/feed/http://feeds.feedburner.com/thechangelog</id><title type="html">The Changelog - Open Source moves fast. Keep up.</title><link rel="alternate" href="http://thechangelog.com/" type="text/html"/></source></entry><entry gr:crawl-timestamp-msec="1303146482494"><id gr:original-id="tag:weblog.rubyonrails.org,2011-04-18:28472">tag:google.com,2005:reader/item/ec6013eaace6be15</id><category term="Edge"/><title type="html">Why HTTP Streaming?</title><published>2011-04-18T15:23:00Z</published><updated>2011-04-18T21:36:55Z</updated><link rel="alternate" href="http://feedproxy.google.com/~r/RidingRails/~3/8RUz32K4N5E/why-http-streaming" type="text/html"/><content xml:base="http://weblog.rubyonrails.org/" xml:lang="en-US" type="html">&lt;p&gt;Rails 3.1 is going to support HTTP streaming, aka chunked responses, this post explains what's all about.&lt;/p&gt;

&lt;h2&gt;What Is HTTP Streaming?&lt;/h2&gt;

&lt;p&gt;Ordinary dynamic HTTP responses need a Content-Length header. Their timeline look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;HTTP request -&amp;gt; dynamic content generation -&amp;gt; HTTP response
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Those are three serial steps because normally you need to generate the content in order to be able to know its size, and thus fill the Content-Length header of the response.&lt;/p&gt;

&lt;p&gt;HTTP provides an alternative to this schema to be able to flush data as it is produced, known as &lt;a href="http://en.wikipedia.org/wiki/Chunked_transfer_encoding"&gt;chunked transfer encoding&lt;/a&gt;. That's what we are referring to as &lt;em&gt;streaming&lt;/em&gt; in recent commits.&lt;/p&gt;

&lt;p&gt;Streamed responses have no Content-Length header. Rather, they have a Transfer-Encoding header with a value of "chunked", and a body consisting of a series of chunks you write to the socket preceded by their individual sizes. Modulus details.&lt;/p&gt;

&lt;p&gt;This is an example taken from Wikipedia:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;HTTP/1.1 200 OK
Content-Type: text/plain
Transfer-Encoding: chunked

25
This is the data in the first chunk

1C
and this is the second one

3
con
8
sequence
0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Point is, you are able to flush chunks to the socket as soon as you have them, no need to wait for the whole thing to be generated.&lt;/p&gt;

&lt;h2&gt;When Do Web Browsers Fetch Assets?&lt;/h2&gt;

&lt;p&gt;Web broswers parse documents as their content is received. When they find an asset referenced, think an image, stylesheet, or script, a request to fetch them is fired. That happens in parallel &lt;em&gt;while&lt;/em&gt; the document is being received and processed, no matter whether the content comes chunked or not.&lt;/p&gt;

&lt;p&gt;Browsers have limits on the number of concurrent requests they are allowed to do, a global one (typically +30), and another per domain (nowadays typically 4 or 6), but within those limits, requests for getting assets happen as the content is parsed.&lt;/p&gt;

&lt;p&gt;Modern clients do not even block on JavaScript files as old ones did, they implement scanners that look ahead for asset nodes and request them. For example, &lt;a href="http://codesearch.google.com/codesearch/p?hl=en#OAMlx_jo-ck/src/third_party/WebKit/Source/WebCore/html/parser/HTMLPreloadScanner.cpp&amp;amp;d=7"&gt;this is the preload scanner of WebKit&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Trivia: While investigating this I discovered by accident that if the MIME type is unclear, for example "text/html" without an explicit charset, then web browsers buffer 1 KB of data firing no asset requests to be able to peek at the content and &lt;a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/parsing.html#determining-the-character-encoding"&gt;do an educated guess&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;So What's The Benefit Of Streaming?&lt;/h2&gt;

&lt;p&gt;Streaming doesn't cut latency, neither it cuts the time a dynamic response needs to be generated. But since the application sends content right away instead of waiting for the whole response to be rendered, the client is able to request assets sooner. In particular, if you flush the head of an HTML document &lt;strong&gt;CSS and JavaScript files are going to be fetched in parallel&lt;/strong&gt;, while the server works on generating content. The consequence is that pages load faster.&lt;/p&gt;

&lt;h2&gt;Followup&lt;/h2&gt;

&lt;p&gt;Streaming is still being polished for Rails 3.1, expect another post in the future covering its practical aspects in Ruby on Rails applications.&lt;/p&gt;

&lt;h2&gt;Thanks&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://gent.ilcore.com/"&gt;Tony Gentilcore&lt;/a&gt; provided his insider's guidance into this, thank you very much Tony! Also, thanks a lot to the &lt;a href="http://www.browserscope.org/?category=network"&gt;Browserscope project&lt;/a&gt; for their really useful tables.&lt;/p&gt;</content><author><name>fxn</name></author><gr:likingUser>03525184432343740983</gr:likingUser><gr:likingUser>00230411361231332476</gr:likingUser><gr:likingUser>15963914873140213203</gr:likingUser><gr:likingUser>16054984645934374697</gr:likingUser><gr:likingUser>08218769817860694145</gr:likingUser><gr:likingUser>13663871561925015526</gr:likingUser><gr:likingUser>04989347458541824019</gr:likingUser><gr:likingUser>02493920640513570848</gr:likingUser><gr:likingUser>06461515884007052888</gr:likingUser><gr:likingUser>16870399248652816551</gr:likingUser><gr:likingUser>01172661760330346675</gr:likingUser><gr:likingUser>16966204475155240861</gr:likingUser><gr:likingUser>17686710798090483553</gr:likingUser><gr:likingUser>03676399070155537502</gr:likingUser><gr:likingUser>12608176320090135909</gr:likingUser><gr:likingUser>13169543770112711206</gr:likingUser><gr:likingUser>05924429338927468978</gr:likingUser><gr:likingUser>18253276447546087020</gr:likingUser><gr:likingUser>09986713436382198282</gr:likingUser><gr:likingUser>14115969100220841908</gr:likingUser><gr:likingUser>13822067608165040568</gr:likingUser><gr:likingUser>00472732141156489149</gr:likingUser><gr:likingUser>14268721254469801417</gr:likingUser><gr:likingUser>06808395769643365537</gr:likingUser><gr:likingUser>06619129445745210567</gr:likingUser><gr:likingUser>09965776311802432465</gr:likingUser><gr:likingUser>12575556972603503365</gr:likingUser><gr:likingUser>13818729232887425322</gr:likingUser><gr:likingUser>09193292141477413545</gr:likingUser><gr:likingUser>08672001244995056044</gr:likingUser><gr:likingUser>01313617766859471227</gr:likingUser><gr:likingUser>02852144035480763091</gr:likingUser><gr:likingUser>12558735024476042006</gr:likingUser><gr:likingUser>04605841360574369872</gr:likingUser><gr:likingUser>04420437131661556218</gr:likingUser><gr:likingUser>02212498175199299275</gr:likingUser><gr:likingUser>01640370281238264014</gr:likingUser><gr:likingUser>15398205570777958235</gr:likingUser><gr:likingUser>13321201297124024449</gr:likingUser><gr:likingUser>11597436116262917569</gr:likingUser><gr:likingUser>15690628196526759217</gr:likingUser><gr:likingUser>03004389621336381378</gr:likingUser><gr:likingUser>15070213177608446064</gr:likingUser><gr:likingUser>05996799949037674299</gr:likingUser><gr:likingUser>11073263806386516595</gr:likingUser><source gr:stream-id="feed/http://feeds.feedburner.com/RidingRails"><id>tag:google.com,2005:reader/feed/http://feeds.feedburner.com/RidingRails</id><title type="html">Riding Rails - home</title><link rel="alternate" href="http://weblog.rubyonrails.org/" type="text/html"/></source></entry><entry gr:crawl-timestamp-msec="1303077388206"><id gr:original-id="http://codebetweenlines.wordpress.com/?p=6">tag:google.com,2005:reader/item/0835d620e4dc525b</id><category term="Software Craftsmanship"/><category term="software"/><category term="agile"/><category term="methodologies"/><category term="good practices"/><title type="html">(A Rant About) Agile Software Craftsmanship</title><published>2011-04-17T21:14:22Z</published><updated>2011-04-17T21:14:22Z</updated><link rel="alternate" href="https://codebetweenlines.wordpress.com/2011/04/17/a-rant-about-agile-software-craftsmanship/" type="text/html"/><content xml:base="https://codebetweenlines.wordpress.com/" type="html">&lt;p&gt;So, here is the thing:  is pretty common to hear people saying they write good software and apply software methodologies and techniques, and it is also pretty common, though, that those same people don’t actually build good, maintainable, software.&lt;/p&gt;
&lt;p&gt;The biggest reason for that is probably because people are usually all about the buzz but not about pursuing quality and continuously improving their own skills. They are so worried about strictly following what someone, who they look up to, said than actually looking into their own work and understanding how they could improve it. Everybody does that at some point. I used to.&lt;/p&gt;
&lt;p&gt;Software craftsmanship is all about realizing each code is unique and learn to apply certain patterns on it while still respecting the uniqueness of it. If the person you look up to made a certain design decision, doesn’t necessarily mean you should take the same decision in your project but rather understand why the decision was made and apply that knowledge.&lt;/p&gt;
&lt;p&gt;Another reason is definitely the misunderstanding  of certain methodologies practices, techniques, and values. Understanding the agile values is definitely the most important thing you should do, if you really care about being agile. All agile methodologies, practices and techniques are based on those values and, again, you shouldn’t follow those strictly but rather try to understand what are the benefits of each of them and when and how to apply them.&lt;/p&gt;
&lt;p&gt;For example, it is pretty easy to do test-driven-development but you will definitely not get the whole benefits if you don’t understand why you are doing it. There are reasons why you should write tests first and not after: writing your tests first make you think about how the application or unit under test should behave and how it should interact with it’s collaborators. So, in the end of the day, it is more of a software design issue than actually testing.&lt;/p&gt;
&lt;p&gt;Other practice I usually see being wrongly applied is the “Do the simplest thing that could possibly work” concept. Following this doesn’t mean you should do the most raw implementation, overseeing everything you know about good software. It means not trying to foresee future features and add extra complexity on your application if it is not necessary, at least yet.&lt;/p&gt;
&lt;p&gt;Unfortunately, some people think that structuring your code properly, following good OOP practices and making sure your code will be easier to maintain and extend in the future, is the same of adding extra complexity. I mean, you definitely don’t want to add things that are not necessary but you should still make an effort to make your code better, even if that means having more classes or more lines of code.&lt;/p&gt;
&lt;p&gt;If you look at the Extreme Programming developing cycle, it defines it as Write Test -&amp;gt; Write Code -&amp;gt; Refactor. If you think about it for a second, the values of each step are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Write Test: analyze and determine the best design for your code while writing regression tests. (&lt;span style="font-size:small"&gt;Working software over comprehensive documentation, Continuous attention to technical excellence &lt;/span&gt;&lt;span style="font-size:small"&gt;and good design enhances agility.)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style="font-size:small"&gt;Write Code: implement the current feature, making the tests pass, and nothing else. (Do the simplest thing that could possibly work)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style="font-size:small"&gt;Refactor: improve the current implementation so that it follows good OOP practices and it is easier to maintain. (&lt;span style="font-size:small"&gt;Responding to change over following a plan, Continuous attention to technical excellence and good design enhances agility.)&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I often see people skipping the Refactor step and if you pay attention to the values, it is as important as the others. If you are skipping any of these steps or doing them without paying attention to the actual values, you’re doing it wrong. And that is also true for all the other existing practices from different methodologies out there.&lt;/p&gt;
&lt;p&gt;So, wake up, start pursuing quality and stop blindly following practices.&lt;/p&gt;
&lt;br&gt;  &lt;a rel="nofollow" href="http://feeds.wordpress.com/1.0/gocomments/codebetweenlines.wordpress.com/6/"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/codebetweenlines.wordpress.com/6/"&gt;&lt;/a&gt; &lt;a rel="nofollow" href="http://feeds.wordpress.com/1.0/godelicious/codebetweenlines.wordpress.com/6/"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/codebetweenlines.wordpress.com/6/"&gt;&lt;/a&gt; &lt;a rel="nofollow" href="http://feeds.wordpress.com/1.0/gofacebook/codebetweenlines.wordpress.com/6/"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/codebetweenlines.wordpress.com/6/"&gt;&lt;/a&gt; &lt;a rel="nofollow" href="http://feeds.wordpress.com/1.0/gotwitter/codebetweenlines.wordpress.com/6/"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/codebetweenlines.wordpress.com/6/"&gt;&lt;/a&gt; &lt;a rel="nofollow" href="http://feeds.wordpress.com/1.0/gostumble/codebetweenlines.wordpress.com/6/"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/codebetweenlines.wordpress.com/6/"&gt;&lt;/a&gt; &lt;a rel="nofollow" href="http://feeds.wordpress.com/1.0/godigg/codebetweenlines.wordpress.com/6/"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/codebetweenlines.wordpress.com/6/"&gt;&lt;/a&gt; &lt;a rel="nofollow" href="http://feeds.wordpress.com/1.0/goreddit/codebetweenlines.wordpress.com/6/"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/codebetweenlines.wordpress.com/6/"&gt;&lt;/a&gt; &lt;img alt="" border="0" src="http://stats.wordpress.com/b.gif?host=codebetweenlines.wordpress.com&amp;amp;blog=22261329&amp;amp;post=6&amp;amp;subd=codebetweenlines&amp;amp;ref=&amp;amp;feed=1" width="1" height="1"&gt;</content><author><name>divoxx</name></author><source gr:stream-id="feed/https://codebetweenlines.wordpress.com/feed/"><id>tag:google.com,2005:reader/feed/https://codebetweenlines.wordpress.com/feed/</id><title type="html">code.between.lines</title><link rel="alternate" href="https://codebetweenlines.wordpress.com" type="text/html"/></source></entry></feed>