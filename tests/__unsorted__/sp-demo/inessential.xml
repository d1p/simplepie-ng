<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd">
  <channel>
    <title>inessential.com</title>
    <link>http://inessential.com/</link>
    <description>Brent Simmons’s weblog.</description>
    <item>
      <title>On Today’s Apple Event</title>
      <link>http://inessential.com/2015/09/09/on_todays_apple_event</link>
      <description>&lt;p&gt;I’ve been at home and injured — with lower-back spasms, which are excruciating but getting better today — which explains my string of snarky tweets during the Apple event today. (Also the pain medication might have something to do with it.)&lt;/p&gt;

&lt;p&gt;But there was &lt;a href=&quot;https://twitter.com/brentsimmons/status/641681331554942978&quot;&gt;one tweet&lt;/a&gt; I wanted to explain:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Apple events always give me the near-overwhelming urge to go outside and roll around in the dirt.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That’s the lyrical version of “I find Apple events to be more precious than I’d like.”&lt;/p&gt;

&lt;p&gt;By &lt;em&gt;precious&lt;/em&gt; I mean, as an old version of Webster’s has it: “Particular; fastidious; overnice; overrefined.” Think of &lt;em&gt;precious&lt;/em&gt; as high-end, high-emotion kitsch.&lt;/p&gt;

&lt;p&gt;Apple events are sugar pills with a sugar coating. Me, I prefer a sugar pill with a bitter coating (as in the British version of The Office), or a bitter pill with a sugar coating (any Kurt Vonnegut novel). (Note: I stole this metaphor from Vonnegut.)&lt;/p&gt;

&lt;p&gt;Which is to say: I’m as cheap and sentimental as the next person, but I think my sweets taste better with some peppers.&lt;/p&gt;

&lt;p&gt;However — and this is important — the way Apple does these events is utterly appropriate. For me to criticize it from a personal taste perspective is ridiculous, given that my personal tastes would work against Apple’s success.&lt;/p&gt;

&lt;p&gt;So I was just being a jerk, in other words.&lt;/p&gt;

&lt;p&gt;My back hurts.&lt;/p&gt;

&lt;p style=&quot;text-align:center&quot;&gt;* * *&lt;/p&gt;


&lt;p&gt;Apple announced some great things today. Of particular interest to me is the iPad Pro.&lt;/p&gt;

&lt;p&gt;I’m a Mac developer — I’ve done my time with iOS, and don’t have any wish to return to it. Except… except that the iPad Pro is sneaking up on being a Mac. Or on being the thing that replaces Macs in the long term. (Or on being the thing Macs turn into, or something.)&lt;/p&gt;

&lt;p&gt;I love writing productivity apps. Not games, not diversions, but apps where you get work done. And the iPad Pro looks like the first iOS device designed for productivity apps.&lt;/p&gt;

&lt;p&gt;I keep thinking, though, that if I could plug in my old Apple Extended Keyboard II, my Magic Mouse, and a 27&quot; display, &lt;em&gt;then&lt;/em&gt; I could get real work done on it. Well, if I could run Terminal and BBEdit and Xcode. And if there was something like AppleScript.&lt;/p&gt;

&lt;p&gt;All right, so it’s not a Mac, and isn’t supposed to be — but it’s some steps closer.&lt;/p&gt;

&lt;p&gt;And that’s intriguing. I don’t expect to go back to writing iOS apps again (unless, of course, at Omni I’m asked to) — but, gosh, it would be fun to write for iPad Pro.&lt;/p&gt;

&lt;p&gt;I wonder if it’s possible to write apps that run &lt;em&gt;only&lt;/em&gt; on iPad Pro. That might tempt me more. Obviously, in that case, I wouldn’t be writing for money but for love.&lt;/p&gt;

&lt;p style=&quot;text-align:center&quot;&gt;* * *&lt;/p&gt;


&lt;p&gt;I don’t have plans or interest in writing for Apple Watch or Apple TV. It’s nice, for once, to enjoy platforms where I’m just a user. I like my TV and my watch, and it’s fun to use them without knowing anything about their respective SDKs. Like a regular person.&lt;/p&gt;

&lt;p&gt;(That said, it’s always possible that at Omni I could end up working on anything, which is fine, but so far I’ve been on Mac apps and I’m happiest that way.)&lt;/p&gt;

&lt;p style=&quot;text-align:center&quot;&gt;* * *&lt;/p&gt;


&lt;p&gt;This event shows, again, that the Mac is at the back of the bus. But I like that — we can horse around a bit back there.&lt;/p&gt;

&lt;p&gt;P.S. Looks like the El Capitan ship date is September 30. I’ve been happily using the betas.&lt;/p&gt;</description>
      <pubDate>Wed, 09 Sep 2015 14:05:17 -0700</pubDate>
      <guid isPermaLink="false">http://inessential.com/2015/09/09/on_todays_apple_event</guid>
      <dc:date>2015-09-09T14:05:17-07:00</dc:date>
    </item>
    <item>
      <title>The Real Question</title>
      <link>http://inessential.com/2015/09/03/the_real_question</link>
      <description>&lt;p&gt;In an article about NetNewsWire 4, &lt;a href=&quot;http://sixcolors.com/post/2015/09/return-of-the-netnewswire/&quot;&gt;Dan Moren writes&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Of course, the real question is whether an RSS reader is still software that people get worked up about. With the demise of longtime RSS staple Google Reader and the incursion of social networks and alternative news reading apps like Flipboard, Nuzzel, and soon Apple News, an RSS reader seems decidedly last decade.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Is that the real question? I think it’s not. I think that, for some reason, many people &lt;em&gt;think&lt;/em&gt; that that’s the real question when it comes to RSS readers.&lt;/p&gt;

&lt;p&gt;There are plenty of software categories that are hot when they’re new, and then they settle down. RSS as a format remains &lt;em&gt;huge&lt;/em&gt; (ask your local podcaster) — and RSS readers have become a type of productivity software that some people like and some people don’t. Simple as that.&lt;/p&gt;

&lt;p&gt;I don’t mean to pick on Dan. Plenty of other writers write the same thing, which is why I bring this up.&lt;/p&gt;

&lt;p&gt;By now, though, it should be clear that RSS readers are another one of those software categories that has quite a nice life after its hot period.&lt;/p&gt;</description>
      <pubDate>Thu, 03 Sep 2015 12:20:58 -0700</pubDate>
      <guid isPermaLink="false">http://inessential.com/2015/09/03/the_real_question</guid>
      <dc:date>2015-09-03T12:20:58-07:00</dc:date>
    </item>
    <item>
      <title>NetNewsWire 4</title>
      <link>http://inessential.com/2015/09/03/netnewswire_4</link>
      <description>&lt;p&gt;&lt;a href=&quot;http://netnewswireapp.com/&quot;&gt;NetNewsWire 4 for Mac and iOS&lt;/a&gt; is shipping! Syncing is free.&lt;/p&gt;

&lt;p&gt;It’s been a poorly-kept secret on my part that I was disappointed in how long this took — but shipping means everything is forgiven. :)&lt;/p&gt;</description>
      <pubDate>Thu, 03 Sep 2015 10:12:28 -0700</pubDate>
      <guid isPermaLink="false">http://inessential.com/2015/09/03/netnewswire_4</guid>
      <dc:date>2015-09-03T10:12:28-07:00</dc:date>
    </item>
    <item>
      <title>OmniFocus for Mac 2.2.5</title>
      <link>http://inessential.com/2015/09/01/omnifocus_for_mac_2_2_5</link>
      <description>&lt;p&gt;&lt;a href=&quot;https://www.omnigroup.com/omnifocus&quot;&gt;It just came out on the Omni site&lt;/a&gt;, and will be on the Mac App Store once approved. It &lt;a href=&quot;https://www.omnigroup.com/releasenotes/omnifocus-mac&quot;&gt;fixes a couple crashes&lt;/a&gt; — including one that I called The Last of the Big Crashes.&lt;/p&gt;

&lt;p&gt;When I started working on OmniFocus last year, there was a set of the most common crashes and a set of crashes that were hit pretty rarely. So we fixed a bunch of crashing bugs — the most-common crashes and others — until we’re down to the rare crashes.&lt;/p&gt;

&lt;p&gt;(If you read the &lt;a href=&quot;https://www.omnigroup.com/releasenotes/omnifocus-mac&quot;&gt;release notes&lt;/a&gt; going &lt;a href=&quot;https://www.omnigroup.com/releasenotes/omnifocus-mac/P5&quot;&gt;back to 2.1&lt;/a&gt;, you’ll see crash bug fixes in almost every release. Sometimes a bunch of them.)&lt;/p&gt;

&lt;p&gt;I’ve often wondered if fixing crashing bugs leads to a more-successful app. It’s the right thing to do, regardless, so we do it. (In fact, I have to stop myself from being &lt;em&gt;too&lt;/em&gt; obsessed with fixing crashes.)&lt;/p&gt;

&lt;p&gt;But does that translate to more sales? Intuition tells me it does, since people using a trial version are less likely to hit a crash, and they’ll be more likely to buy the app. And people who have bought the app are less likely to hit a crash, and they’ll be happier with the app, and therefore more likely to tell friends, co-workers, and family about the app.&lt;/p&gt;

&lt;p&gt;I would love to be able to tell developers unequivocally that fixing crashing bugs is good for the bottom line. But I can’t. I can only say it &lt;em&gt;maybe&lt;/em&gt; helps — and then just appeal to our sense of professionalism. Fixing crashing bugs is the right thing to do. Period.&lt;/p&gt;

&lt;p&gt;But, yeah, nobody tweets about how stable your app was today.&lt;/p&gt;

&lt;p style=&quot;text-align:center&quot;&gt;* * *&lt;/p&gt;


&lt;p&gt;The specific Last of the Big Crashes in 2.2.5 was this: an NSOutlineView had unsafe references to deallocated objects, and then calling &lt;code&gt;itemAtRow:&lt;/code&gt; crashed. The solution was to make sure those objects would get deallocated afterward, not before, calling &lt;code&gt;itemAtRow:&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;(That sounds simple, but going from the crash logs to understanding the problem to figuring out the best way to fix it was anything but simple. There was even a period of an hour or two of staring at assembly code.)&lt;/p&gt;

&lt;p&gt;(Of course we couldn’t reproduce it — not until we got some anonymized databases that people were kind enough to send in. We get &lt;em&gt;great&lt;/em&gt; help from OmniFocus users.)&lt;/p&gt;</description>
      <pubDate>Tue, 01 Sep 2015 11:09:41 -0700</pubDate>
      <guid isPermaLink="false">http://inessential.com/2015/09/01/omnifocus_for_mac_2_2_5</guid>
      <dc:date>2015-09-01T11:09:41-07:00</dc:date>
    </item>
    <item>
      <title>Swift Book Club Book?</title>
      <link>http://inessential.com/2015/09/01/good_book</link>
      <description>&lt;p&gt;My co-worker Curt Clifton &lt;a href=&quot;https://twitter.com/curtclifton/status/638765286582185984&quot;&gt;writes&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I’d like to start a “bike shedding” club. One problem a week, everybody implements a solution in Swift. Get together and compare approaches.&lt;/p&gt;

&lt;p&gt;Anybody have a good source of sample problems? Project Euler is probably too mathy. Maybe a data structures book?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This would be for programmers at Omni, so think of the kinds of problems that people writing large Mac and iOS productivity apps need to solve.&lt;/p&gt;

&lt;p&gt;(And &lt;a href=&quot;https://twitter.com/curtclifton/status/638765286582185984&quot;&gt;reply to Curt on Twitter&lt;/a&gt; if you have a good idea. Thanks!)&lt;/p&gt;</description>
      <pubDate>Tue, 01 Sep 2015 10:30:26 -0700</pubDate>
      <guid isPermaLink="false">http://inessential.com/2015/09/01/good_book</guid>
      <dc:date>2015-09-01T10:30:26-07:00</dc:date>
    </item>
    <item>
      <title>Swift Diary #13: The Addiction</title>
      <link>http://inessential.com/2015/08/27/swift_diary_13_the_addiction</link>
      <description>&lt;p&gt;I’m at the point with Swift where I get on a roll sometimes. That’s when it gets fun.&lt;/p&gt;

&lt;p style=&quot;text-align:center&quot;&gt;* * *&lt;/p&gt;


&lt;p&gt;I know the saying that programming isn’t typing — it’s &lt;em&gt;thinking&lt;/em&gt;, and with autocompletion these days it really doesn’t matter how much typing a language requires.&lt;/p&gt;

&lt;p&gt;Except that that’s not entirely true. Programming is also typing.&lt;/p&gt;

&lt;p&gt;Or, put another way: a whole bunch of programming is housekeeping. And, for the most part, Objective-C requires a lot more housekeeping than Swift does. You end up with longer lines, twice the amount of files to maintain, imports to manage, types to type, and so on.&lt;/p&gt;

&lt;p&gt;With Swift you get more logic per page with less effort.&lt;/p&gt;

&lt;p style=&quot;text-align:center&quot;&gt;* * *&lt;/p&gt;


&lt;p&gt;I’m doing my best to understand exactly what sculptures come from this new type of rock. I design like an Objective-C programmer, but I’m learning how to design like a Swift programmer.&lt;/p&gt;

&lt;p&gt;I do still wish for things — especially, 1) the ability to treat objects that conform to the same protocol as the same type, and 2) something like KVC.&lt;/p&gt;

&lt;p style=&quot;text-align:center&quot;&gt;* * *&lt;/p&gt;


&lt;p&gt;But here’s what happens now. Sometimes I go to write some Objective-C code and I sigh at the effort — because I know the Swift version is half as long. I sigh at jumping to the top of the file and adding an import, and I sigh at switching to the .h file and adding a method.&lt;/p&gt;

&lt;p&gt;Part of me still wishes that Swift had been something like a cross between Objective-C and Ruby. I wanted a concise, expressive, and dynamic scripting language where I could be massively productive. Instead I got a concise and expressive programming language that’s less dynamic than I’d like — but where I could still be substantially more productive (once I learn it) than in Objective-C.&lt;/p&gt;

&lt;p&gt;And that’s where I am now — starting to feel that boost in productivity with Swift, and getting a little bit addicted to it.&lt;/p&gt;</description>
      <pubDate>Thu, 27 Aug 2015 11:07:26 -0700</pubDate>
      <guid isPermaLink="false">http://inessential.com/2015/08/27/swift_diary_13_the_addiction</guid>
      <dc:date>2015-08-27T11:07:26-07:00</dc:date>
    </item>
    <item>
      <title>On Scripting</title>
      <link>http://inessential.com/2015/08/25/on_scripting</link>
      <description>&lt;p&gt;Graham Lee writes of &lt;a href=&quot;http://www.sicpers.info/2015/08/the-death-of-scripting/&quot;&gt;The death of scripting&lt;/a&gt; and &lt;a href=&quot;http://www.sicpers.info/2015/08/the-paradox-of-scripting/&quot;&gt;The paradox of scripting&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;But how can scripting be dead? There’s bash, and powershell, and ruby, and…even Perl is still popular among sysadmins. There’s never been a better time to be a programmer or other IT professional trying to automate a task.&lt;/p&gt;

&lt;p&gt;True, but there’s never been a worse time for someone &lt;em&gt;who doesn’t care about computers&lt;/em&gt; to use a computer to automate a task. Apps are in-your-face “experiences” to be “used”, and for the most part can’t be glued together.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;There are counter-examples, of course — the apps I work on (Mac versions of OmniFocus and OmniOutliner) are highly scriptable. But the trend toward silos, sandboxing, and highly-controlled experiences is clear.&lt;/p&gt;

&lt;p&gt;(First thing I did was look to see if Slack has a scripting dictionary. Of course not. Neither does HipChat. Apps these days.)&lt;/p&gt;

&lt;p&gt;If you’re thinking about adding AppleScript support to your app, read these articles from objc.io last year:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.objc.io/issues/14-mac/scripting-data/&quot;&gt;Making Your Mac App’s Data Scriptable&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.objc.io/issues/14-mac/sandbox-scripting/&quot;&gt;Scripting from a Sandbox&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the first of these, I write:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;When adding AppleScript support — which is also JavaScript support, as of OS X 10.10 — it’s best to start with your app’s data. Scripting isn’t a matter of automating button clicks; it’s about exposing the model layer to people who could use your app in their workflows.&lt;/p&gt;

&lt;p&gt;While that’s usually a small minority of users, they’re power users — the kind of people who recommend apps to friends and family. They blog and tweet about apps, and people listen to them. They can be your app’s biggest evangelists.&lt;/p&gt;

&lt;p&gt;Overall, the best reason to add scripting support is that it’s a matter of professionalism. But it doesn’t hurt that the effort is worth the reward.&lt;/p&gt;&lt;/blockquote&gt;</description>
      <pubDate>Tue, 25 Aug 2015 11:08:01 -0700</pubDate>
      <guid isPermaLink="false">http://inessential.com/2015/08/25/on_scripting</guid>
      <dc:date>2015-08-25T11:08:01-07:00</dc:date>
    </item>
    <item>
      <title>OmniDev Blog</title>
      <link>http://inessential.com/2015/08/25/omnidev_blog</link>
      <description>&lt;p&gt;At Omni we &lt;a href=&quot;https://www.omnigroup.com/developer/&quot;&gt;started a new blog&lt;/a&gt;. (With an &lt;a href=&quot;https://www.omnigroup.com/developer/rss/&quot;&gt;RSS feed&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;I wrote an article: &lt;a href=&quot;https://www.omnigroup.com/developer/making-tab-switching-and-scrolling-faster-in-omnifocus-for-mac&quot;&gt;Making Tab-Switching and Scrolling Faster in OmniFocus for Mac&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And Tim Ekl has written the first two parts of a series on building push-triggered sync:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.omnigroup.com/developer/building-push-triggered-sync-part-one-choosing-a-language&quot;&gt;Building Push-Triggered Sync, Part One: Choosing a Language&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.omnigroup.com/developer/building-push-triggered-sync-part-two-first-steps&quot;&gt;Building Push-Triggered Sync, Part Two: First Steps&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Whistle-whetter: we’re using Go. Read all about it.&lt;/p&gt;

&lt;p&gt;PS I’ve been on my yearly beach vacation. Back now.&lt;/p&gt;</description>
      <pubDate>Tue, 25 Aug 2015 10:50:24 -0700</pubDate>
      <guid isPermaLink="false">http://inessential.com/2015/08/25/omnidev_blog</guid>
      <dc:date>2015-08-25T10:50:24-07:00</dc:date>
    </item>
    <item>
      <title>Swift Diary #12: The P Word</title>
      <link>http://inessential.com/2015/08/14/swift_diary_12_the_p_word</link>
      <description>&lt;p&gt;Guy English writes a &lt;a href=&quot;http://kickingbear.com/blog/archives/521&quot;&gt;Swift Protocol Proposal&lt;/a&gt;. It’s worth reading the &lt;a href=&quot;https://twitter.com/Kickingbear/status/632102667322556416&quot;&gt;Twitter discussion&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Wooji Juice &lt;a href=&quot;http://www.wooji-juice.com/blog/swift-genius-of-protocols.html&quot;&gt;disagrees&lt;/a&gt;, and writes about the genius of Swift protocols.&lt;/p&gt;

&lt;p&gt;Daniel Jalkut writes about &lt;a href=&quot;http://indiestack.com/2015/08/the-seven-stages-of-swift/&quot;&gt;The Seven Stages of Swift&lt;/a&gt;. I think I’m inhabiting several of them at once.&lt;/p&gt;

&lt;p style=&quot;text-align:center&quot;&gt;* * *&lt;/p&gt;


&lt;p&gt;I’ll try to re-state my issue with protocols again in a simple way.&lt;/p&gt;

&lt;p&gt;I’m writing a Finder replacement, let’s say. The UI has folders and files. There’s a Folder class and a File class. They’re quite different things, so there’s no class inheritance.&lt;/p&gt;

&lt;p&gt;I want to represent the file system internally as a tree of Folders and Files — let’s say I want to use Sets. A Folder has a &lt;code&gt;children&lt;/code&gt; property, which is a Set that contains both Folders and Files.&lt;/p&gt;

&lt;p&gt;I want Folder and File both to have a writable &lt;code&gt;name&lt;/code&gt; property so the UI can edit their names.&lt;/p&gt;

&lt;p&gt;Something like this ought to come naturally and easily to a language, or else that language is not helping me write apps.&lt;/p&gt;

&lt;p&gt;This isn’t some weird, made-up situation. It’s super-common. Look at Mail’s sidebar, for instance — there are a bunch of different things. (Or look at Xcode’s sidebar.)&lt;/p&gt;

&lt;p&gt;Yes. There are ways to deal with this in Swift, including using @objc protocols and collections. Or proxy objects or base classes (ugh) or whatever.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;But the most natural way is protocols.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If my point was just to get my work done and ship a great app as soon as possible, I wouldn’t be using Swift. I’d be using what I know: Objective-C.&lt;/p&gt;

&lt;p&gt;But I’m also taking the opportunity to learn Swift, and the best way to really understand it is to use, as much as possible, pure Swift, rather than Swift-with-objc. And if, along the way, I run into questions or things that don’t help me write high-quality apps more quickly, then I’ll ask questions and even criticize when warranted.&lt;/p&gt;

&lt;p&gt;My hope (and belief) is that the language designers take the feedback in the spirit intended. I want to help make Swift a great language for writing apps.&lt;/p&gt;

&lt;p&gt;The designers may not give me what I want — it’s possible that I’m just asking for a faster horse, and they’re delivering a Model T, after all — but feedback from experienced app-writers ought to warrant attention. (Which I think it gets, which makes me glad.)&lt;/p&gt;</description>
      <pubDate>Fri, 14 Aug 2015 10:13:59 -0700</pubDate>
      <guid isPermaLink="false">http://inessential.com/2015/08/14/swift_diary_12_the_p_word</guid>
      <dc:date>2015-08-14T10:13:59-07:00</dc:date>
    </item>
    <item>
      <title>Swift Diary Page</title>
      <link>http://inessential.com/2015/08/13/swift_diary_page</link>
      <description>&lt;p&gt;I collected my recent &lt;a href=&quot;http://inessential.com/swiftdiary&quot;&gt;articles on working with Swift&lt;/a&gt; on a single page. It’s linked-to at the bottom of every page on the site, so you can find it later.&lt;/p&gt;</description>
      <pubDate>Thu, 13 Aug 2015 13:58:51 -0700</pubDate>
      <guid isPermaLink="false">http://inessential.com/2015/08/13/swift_diary_page</guid>
      <dc:date>2015-08-13T13:58:51-07:00</dc:date>
    </item>
    <item>
      <title>People Were Quite Rightly Outraged at Me</title>
      <link>http://inessential.com/2015/08/13/people_were_quite_rightly_outraged_at_me</link>
      <description>&lt;p&gt;In 1990 I was an editor of the weekly college newspaper at Seattle Central Community College. Each week we printed a comic strip drawn by a student.&lt;/p&gt;

&lt;p&gt;The strip — “Red Ruffensor,” as in red, rough, ‘n’ sore — was a liberal satire of action hero comics. It was community college student work, but pretty good for that.&lt;/p&gt;

&lt;p&gt;We were criticized, though, for not including anyone but white men and women in the strip. The position of the cartoonist was that this was a satire of a genre that doesn’t include anyone but white men and women (mostly men), and that to include anyone else would actually be &lt;em&gt;mean&lt;/em&gt;. (Every character in the strip was a jerk.) So he didn’t.&lt;/p&gt;

&lt;p&gt;Until, under continuing pressure, he changed his mind.&lt;/p&gt;

&lt;p&gt;One day, the last panel of one of the strips included a character with stereotypical and exaggerated Asian features, and a speech bubble: “Me finally get a line!”&lt;/p&gt;

&lt;p&gt;Awful, right? It &lt;em&gt;fit&lt;/em&gt;, though, because the whole point of the strip was that action hero comics are homophobic and racist and sexist (and yet homoerotic), and this was a liberal college that, we thought, &lt;em&gt;got&lt;/em&gt; it.&lt;/p&gt;

&lt;p&gt;I was 21 years old. I okayed it. It ran.&lt;/p&gt;

&lt;p&gt;This became a huge (but localized) controversy. Seattle newspapers wrote it up, and some people (though not me) discussed it on 1090 talk radio. There were numerous discussions at school, and afterward the newspaper staff attended sensitivity training.&lt;/p&gt;

&lt;p&gt;What my 21-year-old self didn’t get was that that last panel was mean-spirited, even if, to our young minds, it made sense. The integrity of the comic as satirical speech would not have been harmed by leaving it out — and, even if it would have been, would that have been so important? (No. Consider the context.)&lt;/p&gt;

&lt;p&gt;I don’t remember if I apologized then or stuck to my guns. At any rate, now I say: I apologize. I’m sorry for running that. I should not have. It was wrong.&lt;/p&gt;

&lt;p style=&quot;text-align:center&quot;&gt;* * *&lt;/p&gt;


&lt;p&gt;If I had the ability to send myself a message back in time, I would send myself a message to &lt;em&gt;before&lt;/em&gt; the cartoonist wrote that panel. I would tell myself how to deal with the pressure to make the strip more inclusive.&lt;/p&gt;

&lt;p&gt;Here’s what I’d write:&lt;/p&gt;

&lt;p&gt;Dear Brent,&lt;/p&gt;

&lt;p&gt;Hi. I’m 47 years old now. Life is good. You’re still sitting in front of a Mac.&lt;/p&gt;

&lt;p&gt;I hear — actually, I remember — that you’re under a whole lot of pressure to make Red Ruffensor inclusive.&lt;/p&gt;

&lt;p&gt;Well, thing one: you, young man, have no idea what real pressure is yet. But I remember how this felt, and you need some advice. Luckily, this isn’t that hard.&lt;/p&gt;

&lt;p&gt;The solution is, in part, the same solution you’ve always used and always will use: start writing.&lt;/p&gt;

&lt;p&gt;Step one:&lt;/p&gt;

&lt;p&gt;Write an editorial explaining the comic — it won’t be hurt by explaining that it’s satirical, and that everyone in the strip is awful, and it’s all about pointing out the homophobia (and latent homosexuality) of action hero comics. Let people know that Red Ruffensor actually means “red, rough, ‘n’ sore” — because I guarantee you that they don’t know.&lt;/p&gt;

&lt;p&gt;Let people know that, in this particular comic, inclusiveness is a bad idea. Explain that the cartoonist is throwing punches — haymakers — at &lt;em&gt;everybody&lt;/em&gt; in the strip.&lt;/p&gt;

&lt;p&gt;Also write that the paper is committed to inclusiveness, and so you’re looking for more student cartoonists. And if anyone reading this might be that cartoonist, please get in touch!&lt;/p&gt;

&lt;p&gt;And make a pledge: no Red Ruffensor in a given week unless there’s at least one other strip to run.&lt;/p&gt;

&lt;p&gt;Step two:&lt;/p&gt;

&lt;p&gt;Actually find another cartoonist. Or more than one. And run their work, and write an editorial that first week introducing the new strip (or strips), and &lt;em&gt;thank&lt;/em&gt; the people who asked that the paper be inclusive, since it’s now better for it.&lt;/p&gt;

&lt;p&gt;That’s it. Pretty easy. Be good!&lt;/p&gt;

&lt;p&gt;Regards, your pal,&lt;br /&gt;
Brent&lt;/p&gt;</description>
      <pubDate>Thu, 13 Aug 2015 12:11:36 -0700</pubDate>
      <guid isPermaLink="false">http://inessential.com/2015/08/13/people_were_quite_rightly_outraged_at_me</guid>
      <dc:date>2015-08-13T12:11:36-07:00</dc:date>
    </item>
    <item>
      <title>Swift Diary #11: Objective-Swift</title>
      <link>http://inessential.com/2015/08/11/swift_diary_11_objective-swift</link>
      <description>&lt;p&gt;My main problems with Swift are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Collections of protocol-conforming objects don’t work as I need them to.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;No KVC.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;No equivalent of NSClassFromString.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Now, these aren’t really problems with Swift — they’re problems with &lt;em&gt;pure&lt;/em&gt; Swift.&lt;/p&gt;

&lt;p&gt;But there’s no such thing as a pure Swift app. The frameworks are Objective-C frameworks. You can’t load nibs without Objective-C.&lt;/p&gt;

&lt;p&gt;Given that, I made the pragmatic decision to start using @objc protocols, classes, and collection types where those things make sense, where Swift fought against my design.&lt;/p&gt;

&lt;p&gt;And suddenly the language is a joy to use. It’s like Objective-C but with type inference, no .h files, fewer imports, shorter syntax — &lt;em&gt;and&lt;/em&gt; I get the things I was missing.&lt;/p&gt;

&lt;p&gt;I’m still not sure I like optionals, and there’s more casting than I’d like, but overall it feels like Objective-C with less housekeeping. In this language — I’ll call it Objective-Swift — I can go &lt;em&gt;fast&lt;/em&gt;.&lt;/p&gt;

&lt;p style=&quot;text-align:center&quot;&gt;* * *&lt;/p&gt;


&lt;p&gt;More about optionals…&lt;/p&gt;

&lt;p&gt;For those who don’t know Objective-C: it’s based on message passing, and sending a message to a nil receiver is fine. It just doesn’t do anything. If it has a return type, it returns nil. (Roughly speaking.)&lt;/p&gt;

&lt;p&gt;In other words: say &lt;code&gt;foo&lt;/code&gt; is nil. The following in Objective-C is a-okay — nothing happens when foo is nil:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;[foo doSomething:someArgument];&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The Objective-C syntax is weird to everyone who isn’t used to it, I’ll grant. The above could be expressed in another language as &lt;code&gt;foo.doSomething(someArgument)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;What’s cool about this is that you can do nil-checking less often. Say you call a method that returns an object or returns nil. If it returns an object, you want to tell that object to do something, or you want to get one of its properties — or you want nothing to happen if the object is nil.&lt;/p&gt;

&lt;p&gt;You can just skip the nil check and write your code as if the object isn’t nil.&lt;/p&gt;

&lt;p&gt;I’ve relied on that behavior thousands of times. As an Objective-C developer it’s second nature.&lt;/p&gt;

&lt;p&gt;There are obvious problems with that, though. One is that it’s not clear at all in the code that the object may be nil and nothing’s happening and it’s okay (it’s by design). Someone reading it — including future me — may not realize it, and it may be important.&lt;/p&gt;

&lt;p&gt;The second, and related, problem is that nil as an &lt;em&gt;argument&lt;/em&gt; rather than as a receiver is a completely different story. Plenty of methods will crash if you pass nil as an argument. So it’s not true that Objective-C code is free of nil-checking.&lt;/p&gt;

&lt;p&gt;Along comes optionals in Swift, which make it clear when a thing may or may not be nil. When a variable is defined as optional, and you want to do something with it, you &lt;em&gt;have&lt;/em&gt; to handle the nil case, and that’s enforced by the compiler.&lt;/p&gt;

&lt;p&gt;That’s good — very good, in fact — except for all those times when I’m bugged because I have to satisfy the compiler when I feel like I shouldn’t have to, when years of experience tell me it’s quite okay to ignore the possibility of nil.&lt;/p&gt;

&lt;p&gt;So I’m of two minds on optionals. Like many other things with Swift, I don’t really care about it for code that’s entirely mine — because I know my own style so well, because I know what mistakes I make and don’t make — but I &lt;em&gt;do&lt;/em&gt; care about it for code that will have many authors.&lt;/p&gt;</description>
      <pubDate>Tue, 11 Aug 2015 10:05:33 -0700</pubDate>
      <guid isPermaLink="false">http://inessential.com/2015/08/11/swift_diary_11_objective-swift</guid>
      <dc:date>2015-08-11T10:05:33-07:00</dc:date>
    </item>
    <item>
      <title>Swift Diary #10: Changes to Properties</title>
      <link>http://inessential.com/2015/08/07/swift_diary_10_changes_to_properties</link>
      <description>&lt;p&gt;Both of the apps I’m working on have a custom persistence engine (built on top of FMDB and SQLite). Core Data isn’t a great fit for these apps. (This isn’t me being contrary. I’m doing very database-y stuff, and Core Data is an object persistence system, not a database. Seriously: you should use Core Data.)&lt;/p&gt;

&lt;p&gt;The model objects are pure Swift objects. And I’d like to borrow one of Core Data’s awesome features: when a property is set on an object, the persistence system should get notified. It will record the change, then coalesce and queue updates to the database.&lt;/p&gt;

&lt;p style=&quot;text-align:center&quot;&gt;* * *&lt;/p&gt;


&lt;p&gt;Let’s say I’m writing a Twitter client. (This an example used for historical reasons — because, if you look at history, you’ll find that people used to write Twitter clients — and should not be taken as indicative.)&lt;/p&gt;

&lt;p&gt;Let’s pretend it has a Tweet class, a pure Swift class, with about 20 properties (some from the server, some local) — and setting any one of those should trigger the persistence system to do its thing.&lt;/p&gt;

&lt;p&gt;I can do what I want if I add a &lt;code&gt;didSet&lt;/code&gt; code block to each property. One of the cool things is that didSet is ignored during &lt;code&gt;init&lt;/code&gt;, which means I can initialize an object with data without didSet getting called and triggering an unnecessary database update.&lt;/p&gt;

&lt;p&gt;Each didSet block looks like a variation on this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;recordPropertyChange(self, key: &quot;somePropertyName&quot;, newValue: somePropertyName)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It’s a pain to do this for every single property in every single class that’s database-backed.&lt;/p&gt;

&lt;p style=&quot;text-align:center&quot;&gt;* * *&lt;/p&gt;


&lt;p&gt;Were this Objective-C, the situation would be fairly easily dealt with via &lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtDynamicResolution.html&quot;&gt;dynamic method resolution&lt;/a&gt;. Each property would be marked as &lt;code&gt;@dynamic&lt;/code&gt;, and methods that do the right thing (update in-memory storage and notify the persistence system) would be provided at runtime.&lt;/p&gt;

&lt;p&gt;That’s not available to pure Swift classes, though.&lt;/p&gt;

&lt;p&gt;I could ask for that feature — but it had me thinking that there might be a better feature request to make. Classes could optionally (perhaps when conforming to a PropertyObserver protocol) implement a class method that gets notified when any property changes in the same circumstances where it would call didSet. (It should &lt;em&gt;still&lt;/em&gt; call didSet, when it’s there.)&lt;/p&gt;

&lt;p&gt;Something like:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;class func didSetProperty&amp;lt;T, U&gt;(object: T, key: String, newValue: U) {&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;&amp;nbsp;&amp;nbsp;recordPropertyChange&amp;#8203;(object, key: key, newValue: newValue)&lt;/code&gt;&lt;br /&gt;
&lt;/code&gt;}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;(I’m totally unsure that the above is the right way to express this. Maybe object should be Self? I’m still learning my way around generics and protocols.)&lt;/p&gt;

&lt;p&gt;If there already &lt;em&gt;is&lt;/em&gt; a way to solve this, and I don’t need to make this feature request, then I’m keen to hear the solution. It would be useful.&lt;/p&gt;</description>
      <pubDate>Fri, 07 Aug 2015 16:47:50 -0700</pubDate>
      <guid isPermaLink="false">http://inessential.com/2015/08/07/swift_diary_10_changes_to_properties</guid>
      <dc:date>2015-08-07T16:47:50-07:00</dc:date>
    </item>
    <item>
      <title>Swift Diary #9: Where I’m Stuck</title>
      <link>http://inessential.com/2015/08/05/swift_diary_9_where_im_stuck</link>
      <description>&lt;p&gt;Let’s say I’m writing a multi-platform social networking client. I know a person, and I have it on strong authority that Jack Dorsey’s going to re-open the Twitter APIs. (I can say this out loud because it sounds like I’m just pretending.) So my social networking client will support Twitter, App.net, LinkedIn, and a handful of other systems. (Let’s say.)&lt;/p&gt;

&lt;p&gt;I’ve got the problem that &lt;a href=&quot;http://inessential.com/2015/07/19/secret_projects_diary_2_swift_2_0_prot&quot;&gt;I’ve written about before&lt;/a&gt; — protocols and collections don’t mix well.&lt;/p&gt;

&lt;p&gt;I’m using a protocol for the Account type. There are classes that conform to the Account protocol: TwitterAccount, AppNetAccount, LinkedInAccount, etc.&lt;/p&gt;

&lt;p&gt;There’s also an AccountManager class that manages the accounts list. The list is a &lt;code&gt;Set&amp;lt;Account&gt;&lt;/code&gt;, as it should be (since no account should appear more than once; since ordering isn’t important).&lt;/p&gt;

&lt;p&gt;Except, of course, no it isn’t, because Account is not Hashable.&lt;/p&gt;

&lt;p&gt;In reality it’s an array — &lt;code&gt;[Account]&lt;/code&gt; — that holds all the accounts. That’s fine. That works.&lt;/p&gt;

&lt;p&gt;Except when it doesn’t: except when I want to see if the array contains an account object. Error: &lt;code&gt;cannot invoke 'contains' with an argument list of type '(Account)'&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;So I can’t do manually what a Set would do automatically, which is to ensure that a given account appears only once.&lt;/p&gt;

&lt;p&gt;And, here’s the thing: this scenario doesn’t appear once but a bunch of times. (A major example is the TimelineItem protocol. Each different type of account has one or more different TimelineItem-conforming classes, and a given timeline can contain multiple different concrete TimelineItem objects.)&lt;/p&gt;

&lt;p&gt;I’ve worked around some of these, and I’m sure I can come up with work-arounds for each case. But it’s getting increasingly frustrating. It’s slowing me down.&lt;/p&gt;

&lt;p&gt;I have some options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Continue with the work-arounds, despite the frustration. (Even though these projects are supposed to be &lt;em&gt;fun&lt;/em&gt;.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Switch to Swift plus Objective-C types — that is, make Account and TimelineObject @objc protocols and make the classes that conform to those protocols @objc types. Then use Foundation collection types NSSet and NSArray. (This is like writing Objective-C with Swift syntax.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Switch to Objective-C, which handles my design perfectly. But is not Swift.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I don’t know what to do. What would you do?&lt;/p&gt;

&lt;p style=&quot;text-align:center&quot;&gt;* * *&lt;/p&gt;


&lt;p&gt;&lt;b&gt;Update 10:40 am&lt;/b&gt;: Some people are asking why Account can’t be Hashable. It’s because it can’t be Equatable. (For starters. There might be other reasons too.)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;protocol Account: Equatable {&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;&amp;nbsp;&amp;nbsp;var accountID: String {get}&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;}&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;func ==(lhs: Account, rhs: Account) -&gt; Bool {&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;&amp;nbsp;&amp;nbsp;return lhs.accountID == rhs.accountID&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Error: &lt;code&gt;protocol 'Account' can only be used as a generic constraint because it has Self or associated type requirements&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If there’s an answer to this, then I’d be extremely keen to know what it is!&lt;/p&gt;

&lt;p style=&quot;text-align:center&quot;&gt;* * *&lt;/p&gt;


&lt;p&gt;&lt;b&gt;Update 11:00 am&lt;/b&gt;: Got Equatable working, &lt;a href=&quot;https://twitter.com/optshiftk/status/628985834801336320&quot;&gt;thanks to Kyle Sluder&lt;/a&gt;, but not Hashable. &lt;a href=&quot;https://gist.github.com/brentsimmons/beba6ec62302dfe09070&quot;&gt;Here’s my current gist&lt;/a&gt;.&lt;/p&gt;

&lt;p style=&quot;text-align:center&quot;&gt;* * *&lt;/p&gt;


&lt;p&gt;&lt;b&gt;Update 11:10 am&lt;/b&gt;: I spoke too quickly. Equatable is still the problem. &lt;a href=&quot;https://gist.github.com/brentsimmons/7ec7e3669ff7ad17e446&quot;&gt;Here’s the gist&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Which means I’m faced with the original point of this post. What to do?&lt;/p&gt;

&lt;p style=&quot;text-align:center&quot;&gt;* * *&lt;/p&gt;


&lt;p&gt;&lt;b&gt;Update: 11:35 am&lt;/b&gt;: Several people have suggested using a base class instead of a protocol. That should do the trick, yes.&lt;/p&gt;

&lt;p&gt;But there were reasons to use protocols in the first place:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;I dislike class inheritance in general.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I don’t like using a base class purely to satisfy the type system.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Requiring a base class makes doing a plug-in API more difficult. (It’s simpler to have plug-ins conform to a protocol. Though I have to admit I haven’t done any research with Swift plug-ins, so it’s possible I’m completely optimistic here anyway.)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I’m pragmatic, though, and I may end up doing this as a work-around.&lt;/p&gt;</description>
      <pubDate>Wed, 05 Aug 2015 10:24:55 -0700</pubDate>
      <guid isPermaLink="false">http://inessential.com/2015/08/05/swift_diary_9_where_im_stuck</guid>
      <dc:date>2015-08-05T10:24:55-07:00</dc:date>
    </item>
    <item>
      <title>Mapping with Wil</title>
      <link>http://blog.wilshipley.com/2015/08/pimp-my-code-book-2-eliminating-loops.html</link>
      <description>&lt;p&gt;Wil Shipley writes about eliminating loops in Swift by &lt;a href=&quot;http://blog.wilshipley.com/2015/08/pimp-my-code-book-2-eliminating-loops.html&quot;&gt;using map and filter&lt;/a&gt;.&lt;/p&gt;</description>
      <pubDate>Wed, 05 Aug 2015 10:11:09 -0700</pubDate>
      <guid isPermaLink="false">http://inessential.com/2015/08/05/mapping_with_wil</guid>
      <dc:date>2015-08-05T10:11:09-07:00</dc:date>
    </item>
    <item>
      <title>Swift Diary #8: forwardInvocation</title>
      <link>http://inessential.com/2015/08/04/swift_diary_8_forwardinvocation</link>
      <description>&lt;p&gt;Let’s say I’m writing an image editor. (I use this example on my blog for historical reasons — because, historically, I like to rib &lt;a href=&quot;http://shapeof.com&quot;&gt;Gus&lt;/a&gt;. It should not be taken as indicative.)&lt;/p&gt;

&lt;p&gt;Here’s the problem I’m running into:&lt;/p&gt;

&lt;p&gt;I have various layer classes (BitmapLayer, ShapeLayer, GroupLayer, etc.) that live outside the responder chain. There’s a Canvas object that &lt;em&gt;is&lt;/em&gt; in the responder chain.&lt;/p&gt;

&lt;p&gt;So I hook up my menu items and buttons with a nil target and whichever action makes sense.&lt;/p&gt;

&lt;p&gt;Now, the Canvas object doesn’t implement the various actions that the layers implement. Instead, the Canvas object implements &lt;code&gt;respondsToSelector:&lt;/code&gt; — it returns YES if the selected layer responds to that selector.&lt;/p&gt;

&lt;p&gt;And then, if YES, &lt;code&gt;forwardInvocation:&lt;/code&gt; in the Canvas object forwards the message to the selected layer.&lt;/p&gt;

&lt;p&gt;Well, that’s the design, anyway. Sensible. Time-saving. Simple.&lt;/p&gt;

&lt;p&gt;But forwardInvocation and NSInvocation are not available to Swift.&lt;/p&gt;

&lt;p style=&quot;text-align:center&quot;&gt;* * *&lt;/p&gt;


&lt;p&gt;But, soft! What light through yonder window breaks!&lt;/p&gt;

&lt;p&gt;While &lt;code&gt;forwardInvocation:&lt;/code&gt; isn’t available, &lt;code&gt;forwardingTargetForSelector:&lt;/code&gt; &lt;em&gt;is&lt;/em&gt; available.&lt;/p&gt;

&lt;p&gt;Which means the Canvas could see if the selected layer responds to that selector, and then does a &lt;code&gt;performSelector:&lt;/code&gt; on that layer.&lt;/p&gt;

&lt;p&gt;Correct?&lt;/p&gt;

&lt;p&gt;If so, then it means that anyone writing an image editor is good-to-go with Swift.&lt;/p&gt;

&lt;p&gt;(That last sentence is the rib-Gus part again.)&lt;/p&gt;

&lt;p style=&quot;text-align:center&quot;&gt;* * *&lt;/p&gt;


&lt;p&gt;However, Swift support for &lt;code&gt;forwardInvocation:&lt;/code&gt; and NSInvocation would be useful. These things have their uses, and while &lt;code&gt;forwardingTargetForSelector:&lt;/code&gt; can take care of some of them, they don’t take care of all of them.&lt;/p&gt;

&lt;p style=&quot;text-align:center&quot;&gt;* * *&lt;/p&gt;


&lt;p&gt;&lt;b&gt;Update 1:30 pm&lt;/b&gt;: Kyle Sluder &lt;a href=&quot;https://twitter.com/optshiftk/status/628663380723699712&quot;&gt;reminds me&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Remember that -[NSResponder supplementalTargetForAction:…] does not require its return value to be an instance of UIResponder.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;(Or NSResponder, in my case as a Mac app writer.)&lt;/p&gt;

&lt;p&gt;At any rate, &lt;code&gt;supplementalTarget&amp;#8203;ForAction&amp;#8203;:sender:&lt;/code&gt; might fill the bill even better. The Canvas object could return the selected layer object.&lt;/p&gt;</description>
      <pubDate>Tue, 04 Aug 2015 13:16:36 -0700</pubDate>
      <guid isPermaLink="false">http://inessential.com/2015/08/04/swift_diary_8_forwardinvocation</guid>
      <dc:date>2015-08-04T13:16:36-07:00</dc:date>
    </item>
    <item>
      <title>Swift Diary #7: Protocols, Arrays, and Casting</title>
      <link>http://inessential.com/2015/08/02/swift_diary_7_protocols_arrays_and_c</link>
      <description>&lt;p&gt;I mentioned before that I’m making heavy use of protocols in my new apps.&lt;/p&gt;

&lt;p&gt;Here’s what got me today:&lt;/p&gt;

&lt;p&gt;Let’s pretend I’m writing an email client. (This is an example I use on my blog for historical reasons, and should not be taken as indicative.)&lt;/p&gt;

&lt;p&gt;I have a tree of Node objects. Each Node has a represented object, which is a data model object. There’s a NodeRepresentedObject protocol.&lt;/p&gt;

&lt;p&gt;There are also more-specific protocols. EmailMessage, for instance, is a protocol because I might need different concrete classes for different types of accounts (Gmail, IMAP, POP, etc.).&lt;/p&gt;

&lt;p&gt;My class Mailbox has its internal array of email messages. It also has a children variable which is part of the NodeRepresentedObject protocol. Here’s the relevant code:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;protocol NodeRepresentedObject : class {&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;&amp;nbsp;&amp;nbsp;var children: [NodeRepresentedObject]? {get}&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;protocol EmailMessage : NodeRepresentedObject {&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;&amp;nbsp;&amp;nbsp;// stuff here…&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;class Mailbox : NodeRepresentedObject {&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;&amp;nbsp;&amp;nbsp;var messages = [EmailMessage]()&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;&amp;nbsp;&amp;nbsp;var children: [NodeRepresentedObject]? {&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;get {&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return messages&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;&amp;nbsp;&amp;nbsp;}&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The error is: &lt;code&gt;'EmailMessage' is not identical to 'NodeRepresentedObject'.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;That’s true: it’s not. But an EmailMessage &lt;em&gt;is&lt;/em&gt; a NodeRepresentedObject, so it ought to work just fine.&lt;/p&gt;

&lt;p&gt;I tried this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;return messages as [NodeRepresentedObject]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The error: &lt;code&gt;'[EmailMessage]' is not convertible to '[NodeRepresentedObject]'.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Why not? Again — it &lt;em&gt;is&lt;/em&gt; a NodeRepresentedObject.&lt;/p&gt;

&lt;p&gt;The best way I’ve found to deal with this is to map it.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;return messages.map { return $0 as NodeRepresentedObject }&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;That seems crazy. I’m using map to create an array whose members are absolutely identical to the original array. And if it would let me do that, why not allow my original solution? (Or at least the second solution?)&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Update 5:30 pm&lt;/b&gt;: Filed as &lt;a href=&quot;rdar://22109003&quot;&gt;rdar://22109003&lt;/a&gt;.&lt;/p&gt;</description>
      <pubDate>Sun, 02 Aug 2015 17:02:12 -0700</pubDate>
      <guid isPermaLink="false">http://inessential.com/2015/08/02/swift_diary_7_protocols_arrays_and_c</guid>
      <dc:date>2015-08-02T17:02:12-07:00</dc:date>
    </item>
    <item>
      <title>Swift Diary #6: Window Controller Initialization</title>
      <link>http://inessential.com/2015/08/01/swift_diary_6_window_controller_initia</link>
      <description>&lt;p&gt;I’m working on UI code — and the below took me a half hour and quite a bit of frustration to figure out, so I thought I’d better write it up.&lt;/p&gt;

&lt;p&gt;Here’s the deal: I want my window controllers (and view controllers too) to know about their nib name, but the outside world should not know about their nib name.&lt;/p&gt;

&lt;p&gt;Here’s how I handle this in Objective-C: the NSWindowController’s subclass has an init method that references the nib name.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;- (instancetype)init {&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;&amp;nbsp;&amp;nbsp;return [self initWithWindowNibName:&amp;#8203;@&quot;SomeNibName&quot;];&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To instantiate the window controller from elsewhere, I just do &lt;code&gt;[SomeWindowController new]&lt;/code&gt;. (Could be alloc/init, but I like the fewer characters this way.)&lt;/p&gt;

&lt;p&gt;Here’s how to do it in Swift:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;convenience init() {&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;&amp;nbsp;&amp;nbsp;self.init(windowNibName: &quot;SomeNibName&quot;)&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;}&lt;/code&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;And then I can instantiate the window controller via &lt;code&gt;SomeWindowController()&lt;/code&gt;, and all’s well.&lt;/p&gt;

&lt;p&gt;Now that I have the answer, it looks so simple. Many Bothans died, etc.&lt;/p&gt;

&lt;p&gt;PS Yes, I’m using storyboards, except for the few things that should be nibs.&lt;/p&gt;</description>
      <pubDate>Sat, 01 Aug 2015 14:57:21 -0700</pubDate>
      <guid isPermaLink="false">http://inessential.com/2015/08/01/swift_diary_6_window_controller_initia</guid>
      <dc:date>2015-08-01T14:57:21-07:00</dc:date>
    </item>
    <item>
      <title>Swift Diary #5: Yet More Uses for KVC</title>
      <link>http://inessential.com/2015/07/29/swift_diary_5_yet_more_uses_for_kvc</link>
      <description>&lt;p&gt;I’ve argued before (&lt;a href=&quot;http://inessential.com/2015/07/22/swift_diary_2_kvc&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;http://inessential.com/2015/07/24/swift_diary_4_kvc_again&quot;&gt;here&lt;/a&gt;) that pure Swift objects and structs need KVC or something like it.&lt;/p&gt;

&lt;p&gt;I keep running across real-world uses. I present two more.&lt;/p&gt;

&lt;h4&gt;Templates&lt;/h4&gt;

&lt;p&gt;In NetNewsWire you could create a custom theme, which was a CSS file, an HTML template, and, optionally, some assets.&lt;/p&gt;

&lt;p&gt;Inside a template you could type things like &lt;code&gt;&amp;#91;[newsItemTitle]&amp;#93;&lt;/code&gt;, and at render-time that string would be replaced with the title.&lt;/p&gt;

&lt;p&gt;How this was done:&lt;/p&gt;

&lt;p&gt;The template renderer took two objects:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;A string — the template itself. (The thing that included some HTML and code like &lt;code&gt;&amp;#91;[newsItemTitle]&amp;#93;&lt;/code&gt;.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;An object, typed as &lt;code&gt;id&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;The template renderer worked by scanning the template. Every time it found something in double-brackets — &lt;code&gt;&amp;#91;[whatever]&amp;#93;&lt;/code&gt; — it pulled out the &lt;code&gt;whatever&lt;/code&gt; part (call it the “tagName,” for lack of a better word) and got the replacement string like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;replacement = [obj valueForKey:tagName];&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then it would replace &lt;code&gt;&amp;#91;[whatever]&amp;#93;&lt;/code&gt; with the value of &lt;code&gt;replacement&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What was cool about this was that the template renderer didn’t know anything about HTML or RSS. It didn’t know anything whatsoever about the passed-in object that generated the replacement strings. The system was uncoupled and reusable.&lt;/p&gt;

&lt;p&gt;It knew how to scan through a string and replace &lt;code&gt;&amp;#91;[something]&amp;#93;&lt;/code&gt; with a call to &lt;code&gt;valueForKey:&lt;/code&gt;, and that’s it.&lt;/p&gt;

&lt;p&gt;Would I love to be able to do the same thing with a Swift struct as the object? You bet. This is a great case for a struct.&lt;/p&gt;

&lt;h4&gt;Object Comparison and Updating&lt;/h4&gt;

&lt;p&gt;Say I’m writing an RSS reader or Twitter client — or something like Vesper or Glassboard — where the app makes calls to a web service to get a bunch of objects, then it compares those incoming objects to objects it already has and updates them as needed.&lt;/p&gt;

&lt;p&gt;This code doesn’t have to be a pain to write. In fact, you can write it once and reuse it in every single app.&lt;/p&gt;

&lt;p&gt;You need a comparison method that takes two objects — typed as &lt;code&gt;id&lt;/code&gt; — and a set of property names to check.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;+ (void)updateExistingObject:&amp;#8203;(id)existingObject withServerObject:&amp;#8203;(id)serverObject propertyNames:(NSSet *)propertyNames;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Loop through propertyNames. For each:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;id oneExistingValue = [existingObject valueForKey:&amp;#8203;onePropertyName];&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;id oneServerValue = [serverObject valueForKey:&amp;#8203;onePropertyName];&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;if (![oneExistingValue isEqual:oneServerValue]) {&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;&amp;nbsp;&amp;nbsp;[existingObject setValue:oneServerValue forKey:&amp;#8203;onePropertyName];&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Note that existingObject and serverObject don’t have to be the same type. serverObject could even be a dictionary. Whatever. It doesn’t matter, as long as the property names match up.&lt;/p&gt;

&lt;p&gt;Also note that you could easily extend this to return a BOOL saying whether or not existingObject actually changed. This can be very useful if you need to conditionally save a database or plist or update the UI.&lt;/p&gt;

&lt;p&gt;You can go a step further and have it return the set of property names that changed. If you have a custom persistence system, this could mean less work your database has to do when updating existingObject in the database. (For instance: you could generate SQL that updates the values only for those changed property names.)&lt;/p&gt;

&lt;p&gt;This is also just a few lines of code away from a syncing system &lt;a href=&quot;http://inessential.com/vespersyncdiary&quot;&gt;like the one in Vesper&lt;/a&gt;. In Vesper the various properties have a modification date property. (For instance: note.text and note.textModificationDate.)&lt;/p&gt;

&lt;p&gt;The above code would be modified like this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;In the case where values aren’t equal, it then constructs the modification date property name from the property name (by appending &lt;code&gt;@&quot;ModificationDate&quot;&lt;/code&gt;, so that you have textModificationDate and similar).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Then it does &lt;code&gt;valueForKey:&lt;/code&gt; on both objects to get that date. It compares the dates. Whichever value has the later date is the winning value.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;And then you could write 100 apps that all use this same code.&lt;/p&gt;

&lt;p&gt;(To bring it back to Swift: serverObject ought to be a struct.)&lt;/p&gt;

&lt;h4&gt;Trade-offs&lt;/h4&gt;

&lt;p&gt;The compiler isn’t going to catch some possible errors. But I’m willing to put up with that because of the other benefits — these systems are uncoupled and highly reusable, and they mean &lt;em&gt;writing and maintaining less code&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I don’t suggest for one second that KVC should be used everywhere and all the time. I &lt;em&gt;love&lt;/em&gt; having the compiler catch bugs. But there are often some small-but-important spots like these where KVC is the best choice.&lt;/p&gt;

&lt;h4&gt;Update 10:25 am&lt;/h4&gt;

&lt;p&gt;I had thought it was obvious, but beyond the scope of this post, to point out that in the first pattern you need some constraints and you need to handle undefined keys.&lt;/p&gt;

&lt;p&gt;This is pretty easily done. The object that generates replacement strings could be a dictionary. Or you could override valueForKey and valueForUndefinedKey. That object certainly should not have any methods other than what’s needed to generate the replacement strings.&lt;/p&gt;

&lt;p&gt;In the end you might think it’s safer to base the system entirely on dictionaries and use objectForKey instead (especially when there’s a chance that the templates include user data). Totally fair.&lt;/p&gt;</description>
      <pubDate>Wed, 29 Jul 2015 10:03:12 -0700</pubDate>
      <guid isPermaLink="false">http://inessential.com/2015/07/29/swift_diary_5_yet_more_uses_for_kvc</guid>
      <dc:date>2015-07-29T10:03:12-07:00</dc:date>
    </item>
    <item>
      <title>Swift Diary #4: KVC Again</title>
      <link>http://inessential.com/2015/07/24/swift_diary_4_kvc_again</link>
      <description>&lt;p&gt;Al Skipp &lt;a href=&quot;https://twitter.com/al_skipp/status/624549746640834560&quot;&gt;wisely writes&lt;/a&gt; (in reply to &lt;a href=&quot;http://inessential.com/2015/07/22/swift_diary_2_kvc&quot;&gt;my post about KVC&lt;/a&gt;):&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;It's still the case that Stringly typed code is a pain in the Aris to write/debug/maintain.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;True. So true.&lt;/p&gt;

&lt;p&gt;But let me remind you of a place where most iOS and Mac developers do it all the time: Interface Builder.&lt;/p&gt;

&lt;h4&gt;Interface Builder is a Very Fancy XML Editor&lt;/h4&gt;

&lt;p&gt;Some developers eschew Interface Builder (IB) altogether. That’s fair. I myself don’t automatically reach for it — there are times when a UI is so simple that it doesn’t need it, or it’s too dynamic to be expressed well in IB. So I at least think about it before I go there. But I do use it plenty often.&lt;/p&gt;

&lt;p&gt;And I’d bet that most developers use IB at least a little bit, if not a lot, in their apps. (Though maybe not for games.)&lt;/p&gt;

&lt;p&gt;And what you do you do in IB? You type (or copy-and-paste) in the class name of your view controller. You click checkboxes and set attributes. In the end you’re just setting a bunch of strings that gets stored in an XML file.&lt;/p&gt;

&lt;p&gt;In the end, you get things like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;buttonCell key=&quot;cell&quot; type=&quot;square&quot; bezelStyle=&quot;shadowlessSquare&quot; image=&quot;gear&quot; imagePosition=&quot;only&quot; alignment=&quot;center&quot; borderStyle=&quot;border&quot; inset=&quot;2&quot; id=&quot;1194&quot; customClass=&quot;TransparentButtonCell&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You don’t want to do edit that directly, of course, so you have IB. But this is still what you end up with.&lt;/p&gt;

&lt;h4&gt;Runtime&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/gparker/status/1787428084&quot;&gt;Nib loading uses KVC&lt;/a&gt;. Though it may not use &lt;code&gt;setValue:forKey:&lt;/code&gt; directly, it does the conceptual equivalent.&lt;/p&gt;

&lt;p&gt;That does not mean that you can only interact with your objects via &lt;code&gt;valueForKey:&lt;/code&gt; and &lt;code&gt;setValue:forKey:&lt;/code&gt;, of course. It’s just that instantiating uses KVC. Your own code is still &lt;code&gt;foo.bar = 7&lt;/code&gt; and so on.&lt;/p&gt;

&lt;p&gt;The alternative to KVC (or something much like it) — commence shuddering now — would be &lt;em&gt;code generation&lt;/em&gt; instead. (Those of you who’ve been through that on other platforms, come out from under your desk. It’ll be okay.)&lt;/p&gt;

&lt;h4&gt;Trade-offs&lt;/h4&gt;

&lt;p&gt;Of course, it &lt;em&gt;is&lt;/em&gt; a pain when you’ve mistyped — or just plain forgot to type — the name of a class in IB. That’s a drawback of any system like this.&lt;/p&gt;

&lt;p&gt;But we’re willing to make the trade-off because the productivity gain we get from using IB is worth the occasional issue like this. The nice thing about bugs like that is that they’re usually caught very quickly, and are just a normal part of the development process. It’s what we do for a living.&lt;/p&gt;

&lt;h4&gt;If IB can do it, why can’t I?&lt;/h4&gt;

&lt;p&gt;It’s a pretty nice system. I get to declare things rather than write code — and though I have to take care that my declarations are correct, I still end up saving time and writing and maintaining less code. It’s a win.&lt;/p&gt;

&lt;p&gt;The Core Data modeler is another example. I don’t have a handy example, but I bet it generates XML (or maybe JSON or, more likely, plists). And the runtime uses KVC and KVO (and method generation, which is another topic) to make it all work.&lt;/p&gt;

&lt;p&gt;It’s only natural that I might want to write similar systems for my own use. And I have. In the case of the database and model object code that I’ve written, I don’t have a fancy modeler — I just edit a plist. Though editing is more raw, the concept is the same: I type in class names and map database columns to types and property names.&lt;/p&gt;

&lt;p&gt;And my code — which I can reuse unchanged in as many apps as I want to — uses KVC to put it all together. As IB does.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;rest&lt;/em&gt; of my code — the code outside my database code — doesn’t use KVC. I still write &lt;code&gt;foo.bar = 7&lt;/code&gt;, rather than &lt;code&gt;[foo setValue:@7 forKey:@&quot;bar&quot;]&lt;/code&gt;. I can rely on the compiler to tell me when I’ve made an error in the rest of my code.&lt;/p&gt;

&lt;p&gt;So, in the end, this stringly-typed database/model-object code is way &lt;em&gt;less&lt;/em&gt; of a pain to write, debug, and maintain.&lt;/p&gt;

&lt;p&gt;In fact, I don’t touch it at all, since it’s debugged and working.&lt;/p&gt;

&lt;p&gt;But I’d still love to make it work with pure Swift objects and structs.&lt;/p&gt;</description>
      <pubDate>Fri, 24 Jul 2015 10:04:45 -0700</pubDate>
      <guid isPermaLink="false">http://inessential.com/2015/07/24/swift_diary_4_kvc_again</guid>
      <dc:date>2015-07-24T10:04:45-07:00</dc:date>
    </item>
  </channel>
</rss>
